{
  "version": 3,
  "sources": ["../../../../../../node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs", "../../../../../../node_modules/@azure/msal-common/dist/utils/Constants.mjs", "../../../../../../node_modules/@azure/msal-common/dist/error/AuthErrorCodes.mjs", "../../../../../../node_modules/@azure/msal-common/dist/error/AuthError.mjs", "../../../../../../node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs", "../../../../../../node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs", "../../../../../../node_modules/@azure/msal-common/dist/logger/Logger.mjs", "../../../../../../node_modules/@azure/msal-common/dist/packageMetadata.mjs", "../../../../../../node_modules/@azure/msal-common/dist/authority/AuthorityOptions.mjs", "../../../../../../node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs", "../../../../../../node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs", "../../../../../../node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs", "../../../../../../node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs", "../../../../../../node_modules/@azure/msal-common/dist/utils/StringUtils.mjs", "../../../../../../node_modules/@azure/msal-common/dist/authority/AuthorityType.mjs", "../../../../../../node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs", "../../../../../../node_modules/@azure/msal-common/dist/utils/UrlUtils.mjs", "../../../../../../node_modules/@azure/msal-common/dist/url/UrlString.mjs", "../../../../../../node_modules/@azure/msal-common/dist/authority/AuthorityMetadata.mjs", "../../../../../../node_modules/@azure/msal-common/dist/error/CacheErrorCodes.mjs", "../../../../../../node_modules/@azure/msal-common/dist/error/CacheError.mjs", "../../../../../../node_modules/@azure/msal-common/dist/config/ClientConfiguration.mjs", "../../../../../../node_modules/@azure/msal-common/dist/authority/OpenIdConfigResponse.mjs", "../../../../../../node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryResponse.mjs", "../../../../../../node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryErrorResponse.mjs", "../../../../../../node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs", "../../../../../../node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs", "../../../../../../node_modules/@azure/msal-common/dist/authority/RegionDiscovery.mjs", "../../../../../../node_modules/@azure/msal-common/dist/authority/Authority.mjs", "../../../../../../node_modules/@azure/msal-common/dist/error/NetworkError.mjs", "../../../../../../node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthErrorCodes.mjs", "../../../../../../node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs", "../../../../../../node_modules/@azure/msal-common/dist/network/INetworkModule.mjs", "../../../../../../node_modules/@azure/msal-common/dist/error/JoseHeaderErrorCodes.mjs", "../../../../../../node_modules/@azure/msal-common/dist/error/JoseHeaderError.mjs", "../../../../../../node_modules/@azure/msal-common/dist/crypto/JoseHeader.mjs", "../../../../../../node_modules/@azure/msal-common/dist/telemetry/performance/StubPerformanceClient.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/encode/Base64Encode.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/encode/Base64Decode.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthErrorCodes.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthError.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/navigation/NavigationClient.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/network/FetchClient.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/config/Configuration.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/packageMetadata.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/operatingcontext/BaseOperatingContext.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/naa/BridgeStatusCode.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/naa/BridgeProxy.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/operatingcontext/NestedAppOperatingContext.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/operatingcontext/StandardOperatingContext.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/cache/DatabaseStorage.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/cache/MemoryStorage.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/cache/AsyncMemoryStorage.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/crypto/CryptoOps.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/cache/CookieStorage.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/event/EventType.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/error/NativeAuthErrorCodes.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/error/NativeAuthError.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/operatingcontext/UnknownOperatingContext.mjs", "../../../../../../node_modules/@azure/msal-browser/dist/event/EventMessage.mjs", "../../../../../../node_modules/@azure/msal-angular/fesm2015/azure-msal-angular.mjs", "../../../../../../node_modules/tslib/tslib.es6.mjs"],
  "sourcesContent": ["/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\nimport { UrlString } from '@azure/msal-common/browser';\nexport { invoke, invokeAsync } from '@azure/msal-common/browser';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { BrowserConstants, BrowserCacheLocation } from './BrowserConstants.mjs';\nimport { createNewGuid } from '../crypto/BrowserCrypto.mjs';\nimport { createBrowserConfigurationAuthError } from '../error/BrowserConfigurationAuthError.mjs';\nimport { blockIframeReload, redirectInIframe, blockNestedPopups, nonBrowserEnvironment, uninitializedPublicClientApplication } from '../error/BrowserAuthErrorCodes.mjs';\nimport { inMemRedirectUnavailable } from '../error/BrowserConfigurationAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Clears hash from window url.\r\n */\nfunction clearHash(contentWindow) {\n  // Office.js sets history.replaceState to null\n  contentWindow.location.hash = \"\";\n  if (typeof contentWindow.history.replaceState === \"function\") {\n    // Full removes \"#\" from url\n    contentWindow.history.replaceState(null, \"\", `${contentWindow.location.origin}${contentWindow.location.pathname}${contentWindow.location.search}`);\n  }\n}\n/**\r\n * Replaces current hash with hash from provided url\r\n */\nfunction replaceHash(url) {\n  const urlParts = url.split(\"#\");\n  urlParts.shift(); // Remove part before the hash\n  window.location.hash = urlParts.length > 0 ? urlParts.join(\"#\") : \"\";\n}\n/**\r\n * Returns boolean of whether the current window is in an iframe or not.\r\n */\nfunction isInIframe() {\n  return window.parent !== window;\n}\n/**\r\n * Returns boolean of whether or not the current window is a popup opened by msal\r\n */\nfunction isInPopup() {\n  return typeof window !== \"undefined\" && !!window.opener && window.opener !== window && typeof window.name === \"string\" && window.name.indexOf(`${BrowserConstants.POPUP_NAME_PREFIX}.`) === 0;\n}\n// #endregion\n/**\r\n * Returns current window URL as redirect uri\r\n */\nfunction getCurrentUri() {\n  return typeof window !== \"undefined\" && window.location ? window.location.href.split(\"?\")[0].split(\"#\")[0] : \"\";\n}\n/**\r\n * Gets the homepage url for the current window location.\r\n */\nfunction getHomepage() {\n  const currentUrl = new UrlString(window.location.href);\n  const urlComponents = currentUrl.getUrlComponents();\n  return `${urlComponents.Protocol}//${urlComponents.HostNameAndPort}/`;\n}\n/**\r\n * Throws error if we have completed an auth and are\r\n * attempting another auth request inside an iframe.\r\n */\nfunction blockReloadInHiddenIframes() {\n  const isResponseHash = UrlString.hashContainsKnownProperties(window.location.hash);\n  // return an error if called from the hidden iframe created by the msal js silent calls\n  if (isResponseHash && isInIframe()) {\n    throw createBrowserAuthError(blockIframeReload);\n  }\n}\n/**\r\n * Block redirect operations in iframes unless explicitly allowed\r\n * @param interactionType Interaction type for the request\r\n * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\r\n */\nfunction blockRedirectInIframe(allowRedirectInIframe) {\n  if (isInIframe() && !allowRedirectInIframe) {\n    // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\n    throw createBrowserAuthError(redirectInIframe);\n  }\n}\n/**\r\n * Block redirectUri loaded in popup from calling AcquireToken APIs\r\n */\nfunction blockAcquireTokenInPopups() {\n  // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\n  if (isInPopup()) {\n    throw createBrowserAuthError(blockNestedPopups);\n  }\n}\n/**\r\n * Throws error if token requests are made in non-browser environment\r\n * @param isBrowserEnvironment Flag indicating if environment is a browser.\r\n */\nfunction blockNonBrowserEnvironment() {\n  if (typeof window === \"undefined\") {\n    throw createBrowserAuthError(nonBrowserEnvironment);\n  }\n}\n/**\r\n * Throws error if initialize hasn't been called\r\n * @param initialized\r\n */\nfunction blockAPICallsBeforeInitialize(initialized) {\n  if (!initialized) {\n    throw createBrowserAuthError(uninitializedPublicClientApplication);\n  }\n}\n/**\r\n * Helper to validate app environment before making an auth request\r\n * @param initialized\r\n */\nfunction preflightCheck(initialized) {\n  // Block request if not in browser environment\n  blockNonBrowserEnvironment();\n  // Block auth requests inside a hidden iframe\n  blockReloadInHiddenIframes();\n  // Block redirectUri opened in a popup from calling MSAL APIs\n  blockAcquireTokenInPopups();\n  // Block token acquisition before initialize has been called\n  blockAPICallsBeforeInitialize(initialized);\n}\n/**\r\n * Helper to validate app enviornment before making redirect request\r\n * @param initialized\r\n * @param config\r\n */\nfunction redirectPreflightCheck(initialized, config) {\n  preflightCheck(initialized);\n  blockRedirectInIframe(config.system.allowRedirectInIframe);\n  // Block redirects if memory storage is enabled but storeAuthStateInCookie is not\n  if (config.cache.cacheLocation === BrowserCacheLocation.MemoryStorage && !config.cache.storeAuthStateInCookie) {\n    throw createBrowserConfigurationAuthError(inMemRedirectUnavailable);\n  }\n}\n/**\r\n * Adds a preconnect link element to the header which begins DNS resolution and SSL connection in anticipation of the /token request\r\n * @param loginDomain Authority domain, including https protocol e.g. https://login.microsoftonline.com\r\n * @returns\r\n */\nfunction preconnect(authority) {\n  const link = document.createElement(\"link\");\n  link.rel = \"preconnect\";\n  link.href = new URL(authority).origin;\n  link.crossOrigin = \"anonymous\";\n  document.head.appendChild(link);\n  // The browser will close connection if not used within a few seconds, remove element from the header after 10s\n  window.setTimeout(() => {\n    try {\n      document.head.removeChild(link);\n    } catch {}\n  }, 10000); // 10s Timeout\n}\n/**\r\n * Wrapper function that creates a UUID v7 from the current timestamp.\r\n * @returns {string}\r\n */\nfunction createGuid() {\n  return createNewGuid();\n}\nexport { blockAPICallsBeforeInitialize, blockAcquireTokenInPopups, blockNonBrowserEnvironment, blockRedirectInIframe, blockReloadInHiddenIframes, clearHash, createGuid, getCurrentUri, getHomepage, isInIframe, isInPopup, preconnect, preflightCheck, redirectPreflightCheck, replaceHash };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst Constants = {\n  LIBRARY_NAME: \"MSAL.JS\",\n  SKU: \"msal.js.common\",\n  // Prefix for all library cache entries\n  CACHE_PREFIX: \"msal\",\n  // default authority\n  DEFAULT_AUTHORITY: \"https://login.microsoftonline.com/common/\",\n  DEFAULT_AUTHORITY_HOST: \"login.microsoftonline.com\",\n  DEFAULT_COMMON_TENANT: \"common\",\n  // ADFS String\n  ADFS: \"adfs\",\n  DSTS: \"dstsv2\",\n  // Default AAD Instance Discovery Endpoint\n  AAD_INSTANCE_DISCOVERY_ENDPT: \"https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=\",\n  // CIAM URL\n  CIAM_AUTH_URL: \".ciamlogin.com\",\n  AAD_TENANT_DOMAIN_SUFFIX: \".onmicrosoft.com\",\n  // Resource delimiter - used for certain cache entries\n  RESOURCE_DELIM: \"|\",\n  // Placeholder for non-existent account ids/objects\n  NO_ACCOUNT: \"NO_ACCOUNT\",\n  // Claims\n  CLAIMS: \"claims\",\n  // Consumer UTID\n  CONSUMER_UTID: \"9188040d-6c67-4c5b-b112-36a304b66dad\",\n  // Default scopes\n  OPENID_SCOPE: \"openid\",\n  PROFILE_SCOPE: \"profile\",\n  OFFLINE_ACCESS_SCOPE: \"offline_access\",\n  EMAIL_SCOPE: \"email\",\n  // Default response type for authorization code flow\n  CODE_RESPONSE_TYPE: \"code\",\n  CODE_GRANT_TYPE: \"authorization_code\",\n  RT_GRANT_TYPE: \"refresh_token\",\n  FRAGMENT_RESPONSE_MODE: \"fragment\",\n  S256_CODE_CHALLENGE_METHOD: \"S256\",\n  URL_FORM_CONTENT_TYPE: \"application/x-www-form-urlencoded;charset=utf-8\",\n  AUTHORIZATION_PENDING: \"authorization_pending\",\n  NOT_DEFINED: \"not_defined\",\n  EMPTY_STRING: \"\",\n  NOT_APPLICABLE: \"N/A\",\n  NOT_AVAILABLE: \"Not Available\",\n  FORWARD_SLASH: \"/\",\n  IMDS_ENDPOINT: \"http://169.254.169.254/metadata/instance/compute/location\",\n  IMDS_VERSION: \"2020-06-01\",\n  IMDS_TIMEOUT: 2000,\n  AZURE_REGION_AUTO_DISCOVER_FLAG: \"TryAutoDetect\",\n  REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: \"login.microsoft.com\",\n  KNOWN_PUBLIC_CLOUDS: [\"login.microsoftonline.com\", \"login.windows.net\", \"login.microsoft.com\", \"sts.windows.net\"],\n  TOKEN_RESPONSE_TYPE: \"token\",\n  ID_TOKEN_RESPONSE_TYPE: \"id_token\",\n  SHR_NONCE_VALIDITY: 240,\n  INVALID_INSTANCE: \"invalid_instance\"\n};\nconst HttpStatus = {\n  SUCCESS: 200,\n  SUCCESS_RANGE_START: 200,\n  SUCCESS_RANGE_END: 299,\n  REDIRECT: 302,\n  CLIENT_ERROR: 400,\n  CLIENT_ERROR_RANGE_START: 400,\n  BAD_REQUEST: 400,\n  UNAUTHORIZED: 401,\n  NOT_FOUND: 404,\n  REQUEST_TIMEOUT: 408,\n  TOO_MANY_REQUESTS: 429,\n  CLIENT_ERROR_RANGE_END: 499,\n  SERVER_ERROR: 500,\n  SERVER_ERROR_RANGE_START: 500,\n  SERVICE_UNAVAILABLE: 503,\n  GATEWAY_TIMEOUT: 504,\n  SERVER_ERROR_RANGE_END: 599,\n  MULTI_SIDED_ERROR: 600\n};\nconst OIDC_DEFAULT_SCOPES = [Constants.OPENID_SCOPE, Constants.PROFILE_SCOPE, Constants.OFFLINE_ACCESS_SCOPE];\nconst OIDC_SCOPES = [...OIDC_DEFAULT_SCOPES, Constants.EMAIL_SCOPE];\n/**\r\n * Request header names\r\n */\nconst HeaderNames = {\n  CONTENT_TYPE: \"Content-Type\",\n  CONTENT_LENGTH: \"Content-Length\",\n  RETRY_AFTER: \"Retry-After\",\n  CCS_HEADER: \"X-AnchorMailbox\",\n  WWWAuthenticate: \"WWW-Authenticate\",\n  AuthenticationInfo: \"Authentication-Info\",\n  X_MS_REQUEST_ID: \"x-ms-request-id\",\n  X_MS_HTTP_VERSION: \"x-ms-httpver\"\n};\n/**\r\n * Persistent cache keys MSAL which stay while user is logged in.\r\n */\nconst PersistentCacheKeys = {\n  ACTIVE_ACCOUNT_FILTERS: \"active-account-filters\" // new cache entry for active_account for a more robust version for browser\n};\n/**\r\n * String constants related to AAD Authority\r\n */\nconst AADAuthorityConstants = {\n  COMMON: \"common\",\n  ORGANIZATIONS: \"organizations\",\n  CONSUMERS: \"consumers\"\n};\n/**\r\n * Claims request keys\r\n */\nconst ClaimsRequestKeys = {\n  ACCESS_TOKEN: \"access_token\",\n  XMS_CC: \"xms_cc\"\n};\n/**\r\n * we considered making this \"enum\" in the request instead of string, however it looks like the allowed list of\r\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\r\n * internal partners too, hence the choice of generic \"string\" type instead of the \"enum\"\r\n */\nconst PromptValue = {\n  LOGIN: \"login\",\n  SELECT_ACCOUNT: \"select_account\",\n  CONSENT: \"consent\",\n  NONE: \"none\",\n  CREATE: \"create\",\n  NO_SESSION: \"no_session\"\n};\n/**\r\n * allowed values for codeVerifier\r\n */\nconst CodeChallengeMethodValues = {\n  PLAIN: \"plain\",\n  S256: \"S256\"\n};\n/**\r\n * allowed values for server response type\r\n */\nconst ServerResponseType = {\n  QUERY: \"query\",\n  FRAGMENT: \"fragment\"\n};\n/**\r\n * allowed values for response_mode\r\n */\nconst ResponseMode = {\n  ...ServerResponseType,\n  FORM_POST: \"form_post\"\n};\n/**\r\n * allowed grant_type\r\n */\nconst GrantType = {\n  IMPLICIT_GRANT: \"implicit\",\n  AUTHORIZATION_CODE_GRANT: \"authorization_code\",\n  CLIENT_CREDENTIALS_GRANT: \"client_credentials\",\n  RESOURCE_OWNER_PASSWORD_GRANT: \"password\",\n  REFRESH_TOKEN_GRANT: \"refresh_token\",\n  DEVICE_CODE_GRANT: \"device_code\",\n  JWT_BEARER: \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n};\n/**\r\n * Account types in Cache\r\n */\nconst CacheAccountType = {\n  MSSTS_ACCOUNT_TYPE: \"MSSTS\",\n  ADFS_ACCOUNT_TYPE: \"ADFS\",\n  MSAV1_ACCOUNT_TYPE: \"MSA\",\n  GENERIC_ACCOUNT_TYPE: \"Generic\" // NTLM, Kerberos, FBA, Basic etc\n};\n/**\r\n * Separators used in cache\r\n */\nconst Separators = {\n  CACHE_KEY_SEPARATOR: \"-\",\n  CLIENT_INFO_SEPARATOR: \".\"\n};\n/**\r\n * Credential Type stored in the cache\r\n */\nconst CredentialType = {\n  ID_TOKEN: \"IdToken\",\n  ACCESS_TOKEN: \"AccessToken\",\n  ACCESS_TOKEN_WITH_AUTH_SCHEME: \"AccessToken_With_AuthScheme\",\n  REFRESH_TOKEN: \"RefreshToken\"\n};\n/**\r\n * Combine all cache types\r\n */\nconst CacheType = {\n  ADFS: 1001,\n  MSA: 1002,\n  MSSTS: 1003,\n  GENERIC: 1004,\n  ACCESS_TOKEN: 2001,\n  REFRESH_TOKEN: 2002,\n  ID_TOKEN: 2003,\n  APP_METADATA: 3001,\n  UNDEFINED: 9999\n};\n/**\r\n * More Cache related constants\r\n */\nconst APP_METADATA = \"appmetadata\";\nconst CLIENT_INFO = \"client_info\";\nconst THE_FAMILY_ID = \"1\";\nconst AUTHORITY_METADATA_CONSTANTS = {\n  CACHE_KEY: \"authority-metadata\",\n  REFRESH_TIME_SECONDS: 3600 * 24 // 24 Hours\n};\nconst AuthorityMetadataSource = {\n  CONFIG: \"config\",\n  CACHE: \"cache\",\n  NETWORK: \"network\",\n  HARDCODED_VALUES: \"hardcoded_values\"\n};\nconst SERVER_TELEM_CONSTANTS = {\n  SCHEMA_VERSION: 5,\n  MAX_CUR_HEADER_BYTES: 80,\n  MAX_LAST_HEADER_BYTES: 330,\n  MAX_CACHED_ERRORS: 50,\n  CACHE_KEY: \"server-telemetry\",\n  CATEGORY_SEPARATOR: \"|\",\n  VALUE_SEPARATOR: \",\",\n  OVERFLOW_TRUE: \"1\",\n  OVERFLOW_FALSE: \"0\",\n  UNKNOWN_ERROR: \"unknown_error\"\n};\n/**\r\n * Type of the authentication request\r\n */\nconst AuthenticationScheme = {\n  BEARER: \"Bearer\",\n  POP: \"pop\",\n  SSH: \"ssh-cert\"\n};\n/**\r\n * Constants related to throttling\r\n */\nconst ThrottlingConstants = {\n  // Default time to throttle RequestThumbprint in seconds\n  DEFAULT_THROTTLE_TIME_SECONDS: 60,\n  // Default maximum time to throttle in seconds, overrides what the server sends back\n  DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,\n  // Prefix for storing throttling entries\n  THROTTLING_PREFIX: \"throttling\",\n  // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling\n  X_MS_LIB_CAPABILITY_VALUE: \"retry-after, h429\"\n};\nconst Errors = {\n  INVALID_GRANT_ERROR: \"invalid_grant\",\n  CLIENT_MISMATCH_ERROR: \"client_mismatch\"\n};\n/**\r\n * Password grant parameters\r\n */\nconst PasswordGrantConstants = {\n  username: \"username\",\n  password: \"password\"\n};\n/**\r\n * Response codes\r\n */\nconst ResponseCodes = {\n  httpSuccess: 200,\n  httpBadRequest: 400\n};\n/**\r\n * Region Discovery Sources\r\n */\nconst RegionDiscoverySources = {\n  FAILED_AUTO_DETECTION: \"1\",\n  INTERNAL_CACHE: \"2\",\n  ENVIRONMENT_VARIABLE: \"3\",\n  IMDS: \"4\"\n};\n/**\r\n * Region Discovery Outcomes\r\n */\nconst RegionDiscoveryOutcomes = {\n  CONFIGURED_MATCHES_DETECTED: \"1\",\n  CONFIGURED_NO_AUTO_DETECTION: \"2\",\n  CONFIGURED_NOT_DETECTED: \"3\",\n  AUTO_DETECTION_REQUESTED_SUCCESSFUL: \"4\",\n  AUTO_DETECTION_REQUESTED_FAILED: \"5\"\n};\n/**\r\n * Specifies the reason for fetching the access token from the identity provider\r\n */\nconst CacheOutcome = {\n  // When a token is found in the cache or the cache is not supposed to be hit when making the request\n  NOT_APPLICABLE: \"0\",\n  // When the token request goes to the identity provider because force_refresh was set to true. Also occurs if claims were requested\n  FORCE_REFRESH_OR_CLAIMS: \"1\",\n  // When the token request goes to the identity provider because no cached access token exists\n  NO_CACHED_ACCESS_TOKEN: \"2\",\n  // When the token request goes to the identity provider because cached access token expired\n  CACHED_ACCESS_TOKEN_EXPIRED: \"3\",\n  // When the token request goes to the identity provider because refresh_in was used and the existing token needs to be refreshed\n  PROACTIVELY_REFRESHED: \"4\"\n};\nconst JsonWebTokenTypes = {\n  Jwt: \"JWT\",\n  Jwk: \"JWK\",\n  Pop: \"pop\"\n};\nconst ONE_DAY_IN_MS = 86400000;\n// Token renewal offset default in seconds\nconst DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\nexport { AADAuthorityConstants, APP_METADATA, AUTHORITY_METADATA_CONSTANTS, AuthenticationScheme, AuthorityMetadataSource, CLIENT_INFO, CacheAccountType, CacheOutcome, CacheType, ClaimsRequestKeys, CodeChallengeMethodValues, Constants, CredentialType, DEFAULT_TOKEN_RENEWAL_OFFSET_SEC, Errors, GrantType, HeaderNames, HttpStatus, JsonWebTokenTypes, OIDC_DEFAULT_SCOPES, OIDC_SCOPES, ONE_DAY_IN_MS, PasswordGrantConstants, PersistentCacheKeys, PromptValue, RegionDiscoveryOutcomes, RegionDiscoverySources, ResponseCodes, ResponseMode, SERVER_TELEM_CONSTANTS, Separators, ServerResponseType, THE_FAMILY_ID, ThrottlingConstants };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * AuthErrorMessage class containing string constants used by error codes and messages.\r\n */\nconst unexpectedError = \"unexpected_error\";\nconst postRequestFailed = \"post_request_failed\";\nexport { postRequestFailed, unexpectedError };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\nimport { Constants } from '../utils/Constants.mjs';\nimport { unexpectedError, postRequestFailed } from './AuthErrorCodes.mjs';\nimport * as AuthErrorCodes from './AuthErrorCodes.mjs';\nexport { AuthErrorCodes };\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst AuthErrorMessages = {\n  [unexpectedError]: \"Unexpected error in authentication.\",\n  [postRequestFailed]: \"Post request failed from the network, could be a 4xx/5xx or a network unavailability. Please check the exact error code for details.\"\n};\n/**\r\n * AuthErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use AuthErrorCodes instead\r\n */\nconst AuthErrorMessage = {\n  unexpectedError: {\n    code: unexpectedError,\n    desc: AuthErrorMessages[unexpectedError]\n  },\n  postRequestFailed: {\n    code: postRequestFailed,\n    desc: AuthErrorMessages[postRequestFailed]\n  }\n};\n/**\r\n * General error class thrown by the MSAL.js library.\r\n */\nclass AuthError extends Error {\n  constructor(errorCode, errorMessage, suberror) {\n    const errorString = errorMessage ? `${errorCode}: ${errorMessage}` : errorCode;\n    super(errorString);\n    Object.setPrototypeOf(this, AuthError.prototype);\n    this.errorCode = errorCode || Constants.EMPTY_STRING;\n    this.errorMessage = errorMessage || Constants.EMPTY_STRING;\n    this.subError = suberror || Constants.EMPTY_STRING;\n    this.name = \"AuthError\";\n  }\n  setCorrelationId(correlationId) {\n    this.correlationId = correlationId;\n  }\n}\nfunction createAuthError(code, additionalMessage) {\n  return new AuthError(code, additionalMessage ? `${AuthErrorMessages[code]} ${additionalMessage}` : AuthErrorMessages[code]);\n}\nexport { AuthError, AuthErrorMessage, AuthErrorMessages, createAuthError };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst clientInfoDecodingError = \"client_info_decoding_error\";\nconst clientInfoEmptyError = \"client_info_empty_error\";\nconst tokenParsingError = \"token_parsing_error\";\nconst nullOrEmptyToken = \"null_or_empty_token\";\nconst endpointResolutionError = \"endpoints_resolution_error\";\nconst networkError = \"network_error\";\nconst openIdConfigError = \"openid_config_error\";\nconst hashNotDeserialized = \"hash_not_deserialized\";\nconst invalidState = \"invalid_state\";\nconst stateMismatch = \"state_mismatch\";\nconst stateNotFound = \"state_not_found\";\nconst nonceMismatch = \"nonce_mismatch\";\nconst authTimeNotFound = \"auth_time_not_found\";\nconst maxAgeTranspired = \"max_age_transpired\";\nconst multipleMatchingTokens = \"multiple_matching_tokens\";\nconst multipleMatchingAccounts = \"multiple_matching_accounts\";\nconst multipleMatchingAppMetadata = \"multiple_matching_appMetadata\";\nconst requestCannotBeMade = \"request_cannot_be_made\";\nconst cannotRemoveEmptyScope = \"cannot_remove_empty_scope\";\nconst cannotAppendScopeSet = \"cannot_append_scopeset\";\nconst emptyInputScopeSet = \"empty_input_scopeset\";\nconst deviceCodePollingCancelled = \"device_code_polling_cancelled\";\nconst deviceCodeExpired = \"device_code_expired\";\nconst deviceCodeUnknownError = \"device_code_unknown_error\";\nconst noAccountInSilentRequest = \"no_account_in_silent_request\";\nconst invalidCacheRecord = \"invalid_cache_record\";\nconst invalidCacheEnvironment = \"invalid_cache_environment\";\nconst noAccountFound = \"no_account_found\";\nconst noCryptoObject = \"no_crypto_object\";\nconst unexpectedCredentialType = \"unexpected_credential_type\";\nconst invalidAssertion = \"invalid_assertion\";\nconst invalidClientCredential = \"invalid_client_credential\";\nconst tokenRefreshRequired = \"token_refresh_required\";\nconst userTimeoutReached = \"user_timeout_reached\";\nconst tokenClaimsCnfRequiredForSignedJwt = \"token_claims_cnf_required_for_signedjwt\";\nconst authorizationCodeMissingFromServerResponse = \"authorization_code_missing_from_server_response\";\nconst bindingKeyNotRemoved = \"binding_key_not_removed\";\nconst endSessionEndpointNotSupported = \"end_session_endpoint_not_supported\";\nconst keyIdMissing = \"key_id_missing\";\nconst noNetworkConnectivity = \"no_network_connectivity\";\nconst userCanceled = \"user_canceled\";\nconst missingTenantIdError = \"missing_tenant_id_error\";\nconst methodNotImplemented = \"method_not_implemented\";\nconst nestedAppAuthBridgeDisabled = \"nested_app_auth_bridge_disabled\";\nexport { authTimeNotFound, authorizationCodeMissingFromServerResponse, bindingKeyNotRemoved, cannotAppendScopeSet, cannotRemoveEmptyScope, clientInfoDecodingError, clientInfoEmptyError, deviceCodeExpired, deviceCodePollingCancelled, deviceCodeUnknownError, emptyInputScopeSet, endSessionEndpointNotSupported, endpointResolutionError, hashNotDeserialized, invalidAssertion, invalidCacheEnvironment, invalidCacheRecord, invalidClientCredential, invalidState, keyIdMissing, maxAgeTranspired, methodNotImplemented, missingTenantIdError, multipleMatchingAccounts, multipleMatchingAppMetadata, multipleMatchingTokens, nestedAppAuthBridgeDisabled, networkError, noAccountFound, noAccountInSilentRequest, noCryptoObject, noNetworkConnectivity, nonceMismatch, nullOrEmptyToken, openIdConfigError, requestCannotBeMade, stateMismatch, stateNotFound, tokenClaimsCnfRequiredForSignedJwt, tokenParsingError, tokenRefreshRequired, unexpectedCredentialType, userCanceled, userTimeoutReached };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\nimport { AuthError } from './AuthError.mjs';\nimport { clientInfoDecodingError, clientInfoEmptyError, tokenParsingError, nullOrEmptyToken, endpointResolutionError, networkError, openIdConfigError, hashNotDeserialized, invalidState, stateMismatch, stateNotFound, nonceMismatch, authTimeNotFound, maxAgeTranspired, multipleMatchingTokens, multipleMatchingAccounts, multipleMatchingAppMetadata, requestCannotBeMade, cannotRemoveEmptyScope, cannotAppendScopeSet, emptyInputScopeSet, deviceCodePollingCancelled, deviceCodeExpired, deviceCodeUnknownError, noAccountInSilentRequest, invalidCacheRecord, invalidCacheEnvironment, noAccountFound, noCryptoObject, unexpectedCredentialType, invalidAssertion, invalidClientCredential, tokenRefreshRequired, userTimeoutReached, tokenClaimsCnfRequiredForSignedJwt, authorizationCodeMissingFromServerResponse, bindingKeyNotRemoved, endSessionEndpointNotSupported, keyIdMissing, noNetworkConnectivity, userCanceled, missingTenantIdError, nestedAppAuthBridgeDisabled, methodNotImplemented } from './ClientAuthErrorCodes.mjs';\nimport * as ClientAuthErrorCodes from './ClientAuthErrorCodes.mjs';\nexport { ClientAuthErrorCodes };\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\nconst ClientAuthErrorMessages = {\n  [clientInfoDecodingError]: \"The client info could not be parsed/decoded correctly\",\n  [clientInfoEmptyError]: \"The client info was empty\",\n  [tokenParsingError]: \"Token cannot be parsed\",\n  [nullOrEmptyToken]: \"The token is null or empty\",\n  [endpointResolutionError]: \"Endpoints cannot be resolved\",\n  [networkError]: \"Network request failed\",\n  [openIdConfigError]: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\",\n  [hashNotDeserialized]: \"The hash parameters could not be deserialized\",\n  [invalidState]: \"State was not the expected format\",\n  [stateMismatch]: \"State mismatch error\",\n  [stateNotFound]: \"State not found\",\n  [nonceMismatch]: \"Nonce mismatch error\",\n  [authTimeNotFound]: \"Max Age was requested and the ID token is missing the auth_time variable.\" + \" auth_time is an optional claim and is not enabled by default - it must be enabled.\" + \" See https://aka.ms/msaljs/optional-claims for more information.\",\n  [maxAgeTranspired]: \"Max Age is set to 0, or too much time has elapsed since the last end-user authentication.\",\n  [multipleMatchingTokens]: \"The cache contains multiple tokens satisfying the requirements. \" + \"Call AcquireToken again providing more requirements such as authority or account.\",\n  [multipleMatchingAccounts]: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\",\n  [multipleMatchingAppMetadata]: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\",\n  [requestCannotBeMade]: \"Token request cannot be made without authorization code or refresh token.\",\n  [cannotRemoveEmptyScope]: \"Cannot remove null or empty scope from ScopeSet\",\n  [cannotAppendScopeSet]: \"Cannot append ScopeSet\",\n  [emptyInputScopeSet]: \"Empty input ScopeSet cannot be processed\",\n  [deviceCodePollingCancelled]: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\",\n  [deviceCodeExpired]: \"Device code is expired.\",\n  [deviceCodeUnknownError]: \"Device code stopped polling for unknown reasons.\",\n  [noAccountInSilentRequest]: \"Please pass an account object, silent flow is not supported without account information\",\n  [invalidCacheRecord]: \"Cache record object was null or undefined.\",\n  [invalidCacheEnvironment]: \"Invalid environment when attempting to create cache entry\",\n  [noAccountFound]: \"No account found in cache for given key.\",\n  [noCryptoObject]: \"No crypto object detected.\",\n  [unexpectedCredentialType]: \"Unexpected credential type.\",\n  [invalidAssertion]: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\",\n  [invalidClientCredential]: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\",\n  [tokenRefreshRequired]: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\",\n  [userTimeoutReached]: \"User defined timeout for device code polling reached\",\n  [tokenClaimsCnfRequiredForSignedJwt]: \"Cannot generate a POP jwt if the token_claims are not populated\",\n  [authorizationCodeMissingFromServerResponse]: \"Server response does not contain an authorization code to proceed\",\n  [bindingKeyNotRemoved]: \"Could not remove the credential's binding key from storage.\",\n  [endSessionEndpointNotSupported]: \"The provided authority does not support logout\",\n  [keyIdMissing]: \"A keyId value is missing from the requested bound token's cache record and is required to match the token to it's stored binding key.\",\n  [noNetworkConnectivity]: \"No network connectivity. Check your internet connection.\",\n  [userCanceled]: \"User cancelled the flow.\",\n  [missingTenantIdError]: \"A tenant id - not common, organizations, or consumers - must be specified when using the client_credentials flow.\",\n  [methodNotImplemented]: \"This method has not been implemented\",\n  [nestedAppAuthBridgeDisabled]: \"The nested app auth bridge is disabled\"\n};\n/**\r\n * String constants used by error codes and messages.\r\n * @deprecated Use ClientAuthErrorCodes instead\r\n */\nconst ClientAuthErrorMessage = {\n  clientInfoDecodingError: {\n    code: clientInfoDecodingError,\n    desc: ClientAuthErrorMessages[clientInfoDecodingError]\n  },\n  clientInfoEmptyError: {\n    code: clientInfoEmptyError,\n    desc: ClientAuthErrorMessages[clientInfoEmptyError]\n  },\n  tokenParsingError: {\n    code: tokenParsingError,\n    desc: ClientAuthErrorMessages[tokenParsingError]\n  },\n  nullOrEmptyToken: {\n    code: nullOrEmptyToken,\n    desc: ClientAuthErrorMessages[nullOrEmptyToken]\n  },\n  endpointResolutionError: {\n    code: endpointResolutionError,\n    desc: ClientAuthErrorMessages[endpointResolutionError]\n  },\n  networkError: {\n    code: networkError,\n    desc: ClientAuthErrorMessages[networkError]\n  },\n  unableToGetOpenidConfigError: {\n    code: openIdConfigError,\n    desc: ClientAuthErrorMessages[openIdConfigError]\n  },\n  hashNotDeserialized: {\n    code: hashNotDeserialized,\n    desc: ClientAuthErrorMessages[hashNotDeserialized]\n  },\n  invalidStateError: {\n    code: invalidState,\n    desc: ClientAuthErrorMessages[invalidState]\n  },\n  stateMismatchError: {\n    code: stateMismatch,\n    desc: ClientAuthErrorMessages[stateMismatch]\n  },\n  stateNotFoundError: {\n    code: stateNotFound,\n    desc: ClientAuthErrorMessages[stateNotFound]\n  },\n  nonceMismatchError: {\n    code: nonceMismatch,\n    desc: ClientAuthErrorMessages[nonceMismatch]\n  },\n  authTimeNotFoundError: {\n    code: authTimeNotFound,\n    desc: ClientAuthErrorMessages[authTimeNotFound]\n  },\n  maxAgeTranspired: {\n    code: maxAgeTranspired,\n    desc: ClientAuthErrorMessages[maxAgeTranspired]\n  },\n  multipleMatchingTokens: {\n    code: multipleMatchingTokens,\n    desc: ClientAuthErrorMessages[multipleMatchingTokens]\n  },\n  multipleMatchingAccounts: {\n    code: multipleMatchingAccounts,\n    desc: ClientAuthErrorMessages[multipleMatchingAccounts]\n  },\n  multipleMatchingAppMetadata: {\n    code: multipleMatchingAppMetadata,\n    desc: ClientAuthErrorMessages[multipleMatchingAppMetadata]\n  },\n  tokenRequestCannotBeMade: {\n    code: requestCannotBeMade,\n    desc: ClientAuthErrorMessages[requestCannotBeMade]\n  },\n  removeEmptyScopeError: {\n    code: cannotRemoveEmptyScope,\n    desc: ClientAuthErrorMessages[cannotRemoveEmptyScope]\n  },\n  appendScopeSetError: {\n    code: cannotAppendScopeSet,\n    desc: ClientAuthErrorMessages[cannotAppendScopeSet]\n  },\n  emptyInputScopeSetError: {\n    code: emptyInputScopeSet,\n    desc: ClientAuthErrorMessages[emptyInputScopeSet]\n  },\n  DeviceCodePollingCancelled: {\n    code: deviceCodePollingCancelled,\n    desc: ClientAuthErrorMessages[deviceCodePollingCancelled]\n  },\n  DeviceCodeExpired: {\n    code: deviceCodeExpired,\n    desc: ClientAuthErrorMessages[deviceCodeExpired]\n  },\n  DeviceCodeUnknownError: {\n    code: deviceCodeUnknownError,\n    desc: ClientAuthErrorMessages[deviceCodeUnknownError]\n  },\n  NoAccountInSilentRequest: {\n    code: noAccountInSilentRequest,\n    desc: ClientAuthErrorMessages[noAccountInSilentRequest]\n  },\n  invalidCacheRecord: {\n    code: invalidCacheRecord,\n    desc: ClientAuthErrorMessages[invalidCacheRecord]\n  },\n  invalidCacheEnvironment: {\n    code: invalidCacheEnvironment,\n    desc: ClientAuthErrorMessages[invalidCacheEnvironment]\n  },\n  noAccountFound: {\n    code: noAccountFound,\n    desc: ClientAuthErrorMessages[noAccountFound]\n  },\n  noCryptoObj: {\n    code: noCryptoObject,\n    desc: ClientAuthErrorMessages[noCryptoObject]\n  },\n  unexpectedCredentialType: {\n    code: unexpectedCredentialType,\n    desc: ClientAuthErrorMessages[unexpectedCredentialType]\n  },\n  invalidAssertion: {\n    code: invalidAssertion,\n    desc: ClientAuthErrorMessages[invalidAssertion]\n  },\n  invalidClientCredential: {\n    code: invalidClientCredential,\n    desc: ClientAuthErrorMessages[invalidClientCredential]\n  },\n  tokenRefreshRequired: {\n    code: tokenRefreshRequired,\n    desc: ClientAuthErrorMessages[tokenRefreshRequired]\n  },\n  userTimeoutReached: {\n    code: userTimeoutReached,\n    desc: ClientAuthErrorMessages[userTimeoutReached]\n  },\n  tokenClaimsRequired: {\n    code: tokenClaimsCnfRequiredForSignedJwt,\n    desc: ClientAuthErrorMessages[tokenClaimsCnfRequiredForSignedJwt]\n  },\n  noAuthorizationCodeFromServer: {\n    code: authorizationCodeMissingFromServerResponse,\n    desc: ClientAuthErrorMessages[authorizationCodeMissingFromServerResponse]\n  },\n  bindingKeyNotRemovedError: {\n    code: bindingKeyNotRemoved,\n    desc: ClientAuthErrorMessages[bindingKeyNotRemoved]\n  },\n  logoutNotSupported: {\n    code: endSessionEndpointNotSupported,\n    desc: ClientAuthErrorMessages[endSessionEndpointNotSupported]\n  },\n  keyIdMissing: {\n    code: keyIdMissing,\n    desc: ClientAuthErrorMessages[keyIdMissing]\n  },\n  noNetworkConnectivity: {\n    code: noNetworkConnectivity,\n    desc: ClientAuthErrorMessages[noNetworkConnectivity]\n  },\n  userCanceledError: {\n    code: userCanceled,\n    desc: ClientAuthErrorMessages[userCanceled]\n  },\n  missingTenantIdError: {\n    code: missingTenantIdError,\n    desc: ClientAuthErrorMessages[missingTenantIdError]\n  },\n  nestedAppAuthBridgeDisabled: {\n    code: nestedAppAuthBridgeDisabled,\n    desc: ClientAuthErrorMessages[nestedAppAuthBridgeDisabled]\n  }\n};\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */\nclass ClientAuthError extends AuthError {\n  constructor(errorCode, additionalMessage) {\n    super(errorCode, additionalMessage ? `${ClientAuthErrorMessages[errorCode]}: ${additionalMessage}` : ClientAuthErrorMessages[errorCode]);\n    this.name = \"ClientAuthError\";\n    Object.setPrototypeOf(this, ClientAuthError.prototype);\n  }\n}\nfunction createClientAuthError(errorCode, additionalMessage) {\n  return new ClientAuthError(errorCode, additionalMessage);\n}\nexport { ClientAuthError, ClientAuthErrorMessage, ClientAuthErrorMessages, createClientAuthError };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\nimport { Constants } from '../utils/Constants.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Log message level.\r\n */\nvar LogLevel;\n(function (LogLevel) {\n  LogLevel[LogLevel[\"Error\"] = 0] = \"Error\";\n  LogLevel[LogLevel[\"Warning\"] = 1] = \"Warning\";\n  LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n  LogLevel[LogLevel[\"Verbose\"] = 3] = \"Verbose\";\n  LogLevel[LogLevel[\"Trace\"] = 4] = \"Trace\";\n})(LogLevel || (LogLevel = {}));\n/**\r\n * Class which facilitates logging of messages to a specific place.\r\n */\nclass Logger {\n  constructor(loggerOptions, packageName, packageVersion) {\n    // Current log level, defaults to info.\n    this.level = LogLevel.Info;\n    const defaultLoggerCallback = () => {\n      return;\n    };\n    const setLoggerOptions = loggerOptions || Logger.createDefaultLoggerOptions();\n    this.localCallback = setLoggerOptions.loggerCallback || defaultLoggerCallback;\n    this.piiLoggingEnabled = setLoggerOptions.piiLoggingEnabled || false;\n    this.level = typeof setLoggerOptions.logLevel === \"number\" ? setLoggerOptions.logLevel : LogLevel.Info;\n    this.correlationId = setLoggerOptions.correlationId || Constants.EMPTY_STRING;\n    this.packageName = packageName || Constants.EMPTY_STRING;\n    this.packageVersion = packageVersion || Constants.EMPTY_STRING;\n  }\n  static createDefaultLoggerOptions() {\n    return {\n      loggerCallback: () => {\n        // allow users to not set loggerCallback\n      },\n      piiLoggingEnabled: false,\n      logLevel: LogLevel.Info\n    };\n  }\n  /**\r\n   * Create new Logger with existing configurations.\r\n   */\n  clone(packageName, packageVersion, correlationId) {\n    return new Logger({\n      loggerCallback: this.localCallback,\n      piiLoggingEnabled: this.piiLoggingEnabled,\n      logLevel: this.level,\n      correlationId: correlationId || this.correlationId\n    }, packageName, packageVersion);\n  }\n  /**\r\n   * Log message with required options.\r\n   */\n  logMessage(logMessage, options) {\n    if (options.logLevel > this.level || !this.piiLoggingEnabled && options.containsPii) {\n      return;\n    }\n    const timestamp = new Date().toUTCString();\n    // Add correlationId to logs if set, correlationId provided on log messages take precedence\n    const logHeader = `[${timestamp}] : [${options.correlationId || this.correlationId || \"\"}]`;\n    const log = `${logHeader} : ${this.packageName}@${this.packageVersion} : ${LogLevel[options.logLevel]} - ${logMessage}`;\n    // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? \"-Pii\": Constants.EMPTY_STRING}${options.context ? `:${options.context}` : Constants.EMPTY_STRING}`)(logMessage);\n    this.executeCallback(options.logLevel, log, options.containsPii || false);\n  }\n  /**\r\n   * Execute callback with message.\r\n   */\n  executeCallback(level, message, containsPii) {\n    if (this.localCallback) {\n      this.localCallback(level, message, containsPii);\n    }\n  }\n  /**\r\n   * Logs error messages.\r\n   */\n  error(message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Error,\n      containsPii: false,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  }\n  /**\r\n   * Logs error messages with PII.\r\n   */\n  errorPii(message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Error,\n      containsPii: true,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  }\n  /**\r\n   * Logs warning messages.\r\n   */\n  warning(message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Warning,\n      containsPii: false,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  }\n  /**\r\n   * Logs warning messages with PII.\r\n   */\n  warningPii(message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Warning,\n      containsPii: true,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  }\n  /**\r\n   * Logs info messages.\r\n   */\n  info(message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Info,\n      containsPii: false,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  }\n  /**\r\n   * Logs info messages with PII.\r\n   */\n  infoPii(message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Info,\n      containsPii: true,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  }\n  /**\r\n   * Logs verbose messages.\r\n   */\n  verbose(message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Verbose,\n      containsPii: false,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  }\n  /**\r\n   * Logs verbose messages with PII.\r\n   */\n  verbosePii(message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Verbose,\n      containsPii: true,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  }\n  /**\r\n   * Logs trace messages.\r\n   */\n  trace(message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Trace,\n      containsPii: false,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  }\n  /**\r\n   * Logs trace messages with PII.\r\n   */\n  tracePii(message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Trace,\n      containsPii: true,\n      correlationId: correlationId || Constants.EMPTY_STRING\n    });\n  }\n  /**\r\n   * Returns whether PII Logging is enabled or not.\r\n   */\n  isPiiLoggingEnabled() {\n    return this.piiLoggingEnabled || false;\n  }\n}\nexport { LogLevel, Logger };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\n/* eslint-disable header/header */\nconst name = \"@azure/msal-common\";\nconst version = \"15.2.0\";\nexport { name, version };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst AzureCloudInstance = {\n  // AzureCloudInstance is not specified.\n  None: \"none\",\n  // Microsoft Azure public cloud\n  AzurePublic: \"https://login.microsoftonline.com\",\n  // Microsoft PPE\n  AzurePpe: \"https://login.windows-ppe.net\",\n  // Microsoft Chinese national/regional cloud\n  AzureChina: \"https://login.chinacloudapi.cn\",\n  // Microsoft German national/regional cloud (\"Black Forest\")\n  AzureGermany: \"https://login.microsoftonline.de\",\n  // US Government cloud\n  AzureUsGovernment: \"https://login.microsoftonline.us\"\n};\nexport { AzureCloudInstance };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Utility functions for managing date and time operations.\r\n */\n/**\r\n * return the current time in Unix time (seconds).\r\n */\nfunction nowSeconds() {\n  // Date.getTime() returns in milliseconds.\n  return Math.round(new Date().getTime() / 1000.0);\n}\n/**\r\n * check if a token is expired based on given UTC time in seconds.\r\n * @param expiresOn\r\n */\nfunction isTokenExpired(expiresOn, offset) {\n  // check for access token expiry\n  const expirationSec = Number(expiresOn) || 0;\n  const offsetCurrentTimeSec = nowSeconds() + offset;\n  // If current time + offset is greater than token expiration time, then token is expired.\n  return offsetCurrentTimeSec > expirationSec;\n}\n/**\r\n * If the current time is earlier than the time that a token was cached at, we must discard the token\r\n * i.e. The system clock was turned back after acquiring the cached token\r\n * @param cachedAt\r\n * @param offset\r\n */\nfunction wasClockTurnedBack(cachedAt) {\n  const cachedAtSec = Number(cachedAt);\n  return cachedAtSec > nowSeconds();\n}\n/**\r\n * Waits for t number of milliseconds\r\n * @param t number\r\n * @param value T\r\n */\nfunction delay(t, value) {\n  return new Promise(resolve => setTimeout(() => resolve(value), t));\n}\nexport { delay, isTokenExpired, nowSeconds, wasClockTurnedBack };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\nimport { extractTokenClaims } from '../../account/AuthToken.mjs';\nimport { createClientAuthError } from '../../error/ClientAuthError.mjs';\nimport { Separators, CredentialType, AuthenticationScheme, SERVER_TELEM_CONSTANTS, ThrottlingConstants, APP_METADATA, AUTHORITY_METADATA_CONSTANTS } from '../../utils/Constants.mjs';\nimport { nowSeconds } from '../../utils/TimeUtils.mjs';\nimport { tokenClaimsCnfRequiredForSignedJwt } from '../../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Cache Key: <home_account_id>-<environment>-<credential_type>-<client_id or familyId>-<realm>-<scopes>-<claims hash>-<scheme>\r\n * IdToken Example: uid.utid-login.microsoftonline.com-idtoken-app_client_id-contoso.com\r\n * AccessToken Example: uid.utid-login.microsoftonline.com-accesstoken-app_client_id-contoso.com-scope1 scope2--pop\r\n * RefreshToken Example: uid.utid-login.microsoftonline.com-refreshtoken-1-contoso.com\r\n * @param credentialEntity\r\n * @returns\r\n */\nfunction generateCredentialKey(credentialEntity) {\n  const credentialKey = [generateAccountId(credentialEntity), generateCredentialId(credentialEntity), generateTarget(credentialEntity), generateClaimsHash(credentialEntity), generateScheme(credentialEntity)];\n  return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/**\r\n * Create IdTokenEntity\r\n * @param homeAccountId\r\n * @param authenticationResult\r\n * @param clientId\r\n * @param authority\r\n */\nfunction createIdTokenEntity(homeAccountId, environment, idToken, clientId, tenantId) {\n  const idTokenEntity = {\n    credentialType: CredentialType.ID_TOKEN,\n    homeAccountId: homeAccountId,\n    environment: environment,\n    clientId: clientId,\n    secret: idToken,\n    realm: tenantId\n  };\n  return idTokenEntity;\n}\n/**\r\n * Create AccessTokenEntity\r\n * @param homeAccountId\r\n * @param environment\r\n * @param accessToken\r\n * @param clientId\r\n * @param tenantId\r\n * @param scopes\r\n * @param expiresOn\r\n * @param extExpiresOn\r\n */\nfunction createAccessTokenEntity(homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, base64Decode, refreshOn, tokenType, userAssertionHash, keyId, requestedClaims, requestedClaimsHash) {\n  const atEntity = {\n    homeAccountId: homeAccountId,\n    credentialType: CredentialType.ACCESS_TOKEN,\n    secret: accessToken,\n    cachedAt: nowSeconds().toString(),\n    expiresOn: expiresOn.toString(),\n    extendedExpiresOn: extExpiresOn.toString(),\n    environment: environment,\n    clientId: clientId,\n    realm: tenantId,\n    target: scopes,\n    tokenType: tokenType || AuthenticationScheme.BEARER\n  };\n  if (userAssertionHash) {\n    atEntity.userAssertionHash = userAssertionHash;\n  }\n  if (refreshOn) {\n    atEntity.refreshOn = refreshOn.toString();\n  }\n  if (requestedClaims) {\n    atEntity.requestedClaims = requestedClaims;\n    atEntity.requestedClaimsHash = requestedClaimsHash;\n  }\n  /*\r\n   * Create Access Token With Auth Scheme instead of regular access token\r\n   * Cast to lower to handle \"bearer\" from ADFS\r\n   */\n  if (atEntity.tokenType?.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase()) {\n    atEntity.credentialType = CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n    switch (atEntity.tokenType) {\n      case AuthenticationScheme.POP:\n        // Make sure keyId is present and add it to credential\n        const tokenClaims = extractTokenClaims(accessToken, base64Decode);\n        if (!tokenClaims?.cnf?.kid) {\n          throw createClientAuthError(tokenClaimsCnfRequiredForSignedJwt);\n        }\n        atEntity.keyId = tokenClaims.cnf.kid;\n        break;\n      case AuthenticationScheme.SSH:\n        atEntity.keyId = keyId;\n    }\n  }\n  return atEntity;\n}\n/**\r\n * Create RefreshTokenEntity\r\n * @param homeAccountId\r\n * @param authenticationResult\r\n * @param clientId\r\n * @param authority\r\n */\nfunction createRefreshTokenEntity(homeAccountId, environment, refreshToken, clientId, familyId, userAssertionHash, expiresOn) {\n  const rtEntity = {\n    credentialType: CredentialType.REFRESH_TOKEN,\n    homeAccountId: homeAccountId,\n    environment: environment,\n    clientId: clientId,\n    secret: refreshToken\n  };\n  if (userAssertionHash) {\n    rtEntity.userAssertionHash = userAssertionHash;\n  }\n  if (familyId) {\n    rtEntity.familyId = familyId;\n  }\n  if (expiresOn) {\n    rtEntity.expiresOn = expiresOn.toString();\n  }\n  return rtEntity;\n}\nfunction isCredentialEntity(entity) {\n  return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"credentialType\") && entity.hasOwnProperty(\"clientId\") && entity.hasOwnProperty(\"secret\");\n}\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */\nfunction isAccessTokenEntity(entity) {\n  if (!entity) {\n    return false;\n  }\n  return isCredentialEntity(entity) && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"target\") && (entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN || entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME);\n}\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */\nfunction isIdTokenEntity(entity) {\n  if (!entity) {\n    return false;\n  }\n  return isCredentialEntity(entity) && entity.hasOwnProperty(\"realm\") && entity[\"credentialType\"] === CredentialType.ID_TOKEN;\n}\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */\nfunction isRefreshTokenEntity(entity) {\n  if (!entity) {\n    return false;\n  }\n  return isCredentialEntity(entity) && entity[\"credentialType\"] === CredentialType.REFRESH_TOKEN;\n}\n/**\r\n * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n */\nfunction generateAccountId(credentialEntity) {\n  const accountId = [credentialEntity.homeAccountId, credentialEntity.environment];\n  return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/**\r\n * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\r\n */\nfunction generateCredentialId(credentialEntity) {\n  const clientOrFamilyId = credentialEntity.credentialType === CredentialType.REFRESH_TOKEN ? credentialEntity.familyId || credentialEntity.clientId : credentialEntity.clientId;\n  const credentialId = [credentialEntity.credentialType, clientOrFamilyId, credentialEntity.realm || \"\"];\n  return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/**\r\n * Generate target key component as per schema: <target>\r\n */\nfunction generateTarget(credentialEntity) {\n  return (credentialEntity.target || \"\").toLowerCase();\n}\n/**\r\n * Generate requested claims key component as per schema: <requestedClaims>\r\n */\nfunction generateClaimsHash(credentialEntity) {\n  return (credentialEntity.requestedClaimsHash || \"\").toLowerCase();\n}\n/**\r\n * Generate scheme key componenet as per schema: <scheme>\r\n */\nfunction generateScheme(credentialEntity) {\n  /*\r\n   * PoP Tokens and SSH certs include scheme in cache key\r\n   * Cast to lowercase to handle \"bearer\" from ADFS\r\n   */\n  return credentialEntity.tokenType && credentialEntity.tokenType.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase() ? credentialEntity.tokenType.toLowerCase() : \"\";\n}\n/**\r\n * validates if a given cache entry is \"Telemetry\", parses <key,value>\r\n * @param key\r\n * @param entity\r\n */\nfunction isServerTelemetryEntity(key, entity) {\n  const validateKey = key.indexOf(SERVER_TELEM_CONSTANTS.CACHE_KEY) === 0;\n  let validateEntity = true;\n  if (entity) {\n    validateEntity = entity.hasOwnProperty(\"failedRequests\") && entity.hasOwnProperty(\"errors\") && entity.hasOwnProperty(\"cacheHits\");\n  }\n  return validateKey && validateEntity;\n}\n/**\r\n * validates if a given cache entry is \"Throttling\", parses <key,value>\r\n * @param key\r\n * @param entity\r\n */\nfunction isThrottlingEntity(key, entity) {\n  let validateKey = false;\n  if (key) {\n    validateKey = key.indexOf(ThrottlingConstants.THROTTLING_PREFIX) === 0;\n  }\n  let validateEntity = true;\n  if (entity) {\n    validateEntity = entity.hasOwnProperty(\"throttleTime\");\n  }\n  return validateKey && validateEntity;\n}\n/**\r\n * Generate AppMetadata Cache Key as per the schema: appmetadata-<environment>-<client_id>\r\n */\nfunction generateAppMetadataKey({\n  environment,\n  clientId\n}) {\n  const appMetaDataKeyArray = [APP_METADATA, environment, clientId];\n  return appMetaDataKeyArray.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/*\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */\nfunction isAppMetadataEntity(key, entity) {\n  if (!entity) {\n    return false;\n  }\n  return key.indexOf(APP_METADATA) === 0 && entity.hasOwnProperty(\"clientId\") && entity.hasOwnProperty(\"environment\");\n}\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */\nfunction isAuthorityMetadataEntity(key, entity) {\n  if (!entity) {\n    return false;\n  }\n  return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 && entity.hasOwnProperty(\"aliases\") && entity.hasOwnProperty(\"preferred_cache\") && entity.hasOwnProperty(\"preferred_network\") && entity.hasOwnProperty(\"canonical_authority\") && entity.hasOwnProperty(\"authorization_endpoint\") && entity.hasOwnProperty(\"token_endpoint\") && entity.hasOwnProperty(\"issuer\") && entity.hasOwnProperty(\"aliasesFromNetwork\") && entity.hasOwnProperty(\"endpointsFromNetwork\") && entity.hasOwnProperty(\"expiresAt\") && entity.hasOwnProperty(\"jwks_uri\");\n}\n/**\r\n * Reset the exiresAt value\r\n */\nfunction generateAuthorityMetadataExpiresAt() {\n  return nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\n}\nfunction updateAuthorityEndpointMetadata(authorityMetadata, updatedValues, fromNetwork) {\n  authorityMetadata.authorization_endpoint = updatedValues.authorization_endpoint;\n  authorityMetadata.token_endpoint = updatedValues.token_endpoint;\n  authorityMetadata.end_session_endpoint = updatedValues.end_session_endpoint;\n  authorityMetadata.issuer = updatedValues.issuer;\n  authorityMetadata.endpointsFromNetwork = fromNetwork;\n  authorityMetadata.jwks_uri = updatedValues.jwks_uri;\n}\nfunction updateCloudDiscoveryMetadata(authorityMetadata, updatedValues, fromNetwork) {\n  authorityMetadata.aliases = updatedValues.aliases;\n  authorityMetadata.preferred_cache = updatedValues.preferred_cache;\n  authorityMetadata.preferred_network = updatedValues.preferred_network;\n  authorityMetadata.aliasesFromNetwork = fromNetwork;\n}\n/**\r\n * Returns whether or not the data needs to be refreshed\r\n */\nfunction isAuthorityMetadataExpired(metadata) {\n  return metadata.expiresAt <= nowSeconds();\n}\nexport { createAccessTokenEntity, createIdTokenEntity, createRefreshTokenEntity, generateAppMetadataKey, generateAuthorityMetadataExpiresAt, generateCredentialKey, isAccessTokenEntity, isAppMetadataEntity, isAuthorityMetadataEntity, isAuthorityMetadataExpired, isCredentialEntity, isIdTokenEntity, isRefreshTokenEntity, isServerTelemetryEntity, isThrottlingEntity, updateAuthorityEndpointMetadata, updateCloudDiscoveryMetadata };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst redirectUriEmpty = \"redirect_uri_empty\";\nconst claimsRequestParsingError = \"claims_request_parsing_error\";\nconst authorityUriInsecure = \"authority_uri_insecure\";\nconst urlParseError = \"url_parse_error\";\nconst urlEmptyError = \"empty_url_error\";\nconst emptyInputScopesError = \"empty_input_scopes_error\";\nconst invalidPromptValue = \"invalid_prompt_value\";\nconst invalidClaims = \"invalid_claims\";\nconst tokenRequestEmpty = \"token_request_empty\";\nconst logoutRequestEmpty = \"logout_request_empty\";\nconst invalidCodeChallengeMethod = \"invalid_code_challenge_method\";\nconst pkceParamsMissing = \"pkce_params_missing\";\nconst invalidCloudDiscoveryMetadata = \"invalid_cloud_discovery_metadata\";\nconst invalidAuthorityMetadata = \"invalid_authority_metadata\";\nconst untrustedAuthority = \"untrusted_authority\";\nconst missingSshJwk = \"missing_ssh_jwk\";\nconst missingSshKid = \"missing_ssh_kid\";\nconst missingNonceAuthenticationHeader = \"missing_nonce_authentication_header\";\nconst invalidAuthenticationHeader = \"invalid_authentication_header\";\nconst cannotSetOIDCOptions = \"cannot_set_OIDCOptions\";\nconst cannotAllowPlatformBroker = \"cannot_allow_platform_broker\";\nconst authorityMismatch = \"authority_mismatch\";\nexport { authorityMismatch, authorityUriInsecure, cannotAllowPlatformBroker, cannotSetOIDCOptions, claimsRequestParsingError, emptyInputScopesError, invalidAuthenticationHeader, invalidAuthorityMetadata, invalidClaims, invalidCloudDiscoveryMetadata, invalidCodeChallengeMethod, invalidPromptValue, logoutRequestEmpty, missingNonceAuthenticationHeader, missingSshJwk, missingSshKid, pkceParamsMissing, redirectUriEmpty, tokenRequestEmpty, untrustedAuthority, urlEmptyError, urlParseError };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\nimport { AuthError } from './AuthError.mjs';\nimport { redirectUriEmpty, claimsRequestParsingError, authorityUriInsecure, urlParseError, urlEmptyError, emptyInputScopesError, invalidPromptValue, invalidClaims, tokenRequestEmpty, logoutRequestEmpty, invalidCodeChallengeMethod, pkceParamsMissing, invalidCloudDiscoveryMetadata, invalidAuthorityMetadata, untrustedAuthority, missingSshJwk, missingSshKid, missingNonceAuthenticationHeader, invalidAuthenticationHeader, cannotSetOIDCOptions, cannotAllowPlatformBroker, authorityMismatch } from './ClientConfigurationErrorCodes.mjs';\nimport * as ClientConfigurationErrorCodes from './ClientConfigurationErrorCodes.mjs';\nexport { ClientConfigurationErrorCodes };\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst ClientConfigurationErrorMessages = {\n  [redirectUriEmpty]: \"A redirect URI is required for all calls, and none has been set.\",\n  [claimsRequestParsingError]: \"Could not parse the given claims request object.\",\n  [authorityUriInsecure]: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\",\n  [urlParseError]: \"URL could not be parsed into appropriate segments.\",\n  [urlEmptyError]: \"URL was empty or null.\",\n  [emptyInputScopesError]: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\",\n  [invalidPromptValue]: \"Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest\",\n  [invalidClaims]: \"Given claims parameter must be a stringified JSON object.\",\n  [tokenRequestEmpty]: \"Token request was empty and not found in cache.\",\n  [logoutRequestEmpty]: \"The logout request was null or undefined.\",\n  [invalidCodeChallengeMethod]: 'code_challenge_method passed is invalid. Valid values are \"plain\" and \"S256\".',\n  [pkceParamsMissing]: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\",\n  [invalidCloudDiscoveryMetadata]: \"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields\",\n  [invalidAuthorityMetadata]: \"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.\",\n  [untrustedAuthority]: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\",\n  [missingSshJwk]: \"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.\",\n  [missingSshKid]: \"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.\",\n  [missingNonceAuthenticationHeader]: \"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.\",\n  [invalidAuthenticationHeader]: \"Invalid authentication header provided\",\n  [cannotSetOIDCOptions]: \"Cannot set OIDCOptions parameter. Please change the protocol mode to OIDC or use a non-Microsoft authority.\",\n  [cannotAllowPlatformBroker]: \"Cannot set allowPlatformBroker parameter to true when not in AAD protocol mode.\",\n  [authorityMismatch]: \"Authority mismatch error. Authority provided in login request or PublicClientApplication config does not match the environment of the provided account. Please use a matching account or make an interactive request to login to this authority.\"\n};\n/**\r\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use ClientConfigurationErrorCodes instead\r\n */\nconst ClientConfigurationErrorMessage = {\n  redirectUriNotSet: {\n    code: redirectUriEmpty,\n    desc: ClientConfigurationErrorMessages[redirectUriEmpty]\n  },\n  claimsRequestParsingError: {\n    code: claimsRequestParsingError,\n    desc: ClientConfigurationErrorMessages[claimsRequestParsingError]\n  },\n  authorityUriInsecure: {\n    code: authorityUriInsecure,\n    desc: ClientConfigurationErrorMessages[authorityUriInsecure]\n  },\n  urlParseError: {\n    code: urlParseError,\n    desc: ClientConfigurationErrorMessages[urlParseError]\n  },\n  urlEmptyError: {\n    code: urlEmptyError,\n    desc: ClientConfigurationErrorMessages[urlEmptyError]\n  },\n  emptyScopesError: {\n    code: emptyInputScopesError,\n    desc: ClientConfigurationErrorMessages[emptyInputScopesError]\n  },\n  invalidPrompt: {\n    code: invalidPromptValue,\n    desc: ClientConfigurationErrorMessages[invalidPromptValue]\n  },\n  invalidClaimsRequest: {\n    code: invalidClaims,\n    desc: ClientConfigurationErrorMessages[invalidClaims]\n  },\n  tokenRequestEmptyError: {\n    code: tokenRequestEmpty,\n    desc: ClientConfigurationErrorMessages[tokenRequestEmpty]\n  },\n  logoutRequestEmptyError: {\n    code: logoutRequestEmpty,\n    desc: ClientConfigurationErrorMessages[logoutRequestEmpty]\n  },\n  invalidCodeChallengeMethod: {\n    code: invalidCodeChallengeMethod,\n    desc: ClientConfigurationErrorMessages[invalidCodeChallengeMethod]\n  },\n  invalidCodeChallengeParams: {\n    code: pkceParamsMissing,\n    desc: ClientConfigurationErrorMessages[pkceParamsMissing]\n  },\n  invalidCloudDiscoveryMetadata: {\n    code: invalidCloudDiscoveryMetadata,\n    desc: ClientConfigurationErrorMessages[invalidCloudDiscoveryMetadata]\n  },\n  invalidAuthorityMetadata: {\n    code: invalidAuthorityMetadata,\n    desc: ClientConfigurationErrorMessages[invalidAuthorityMetadata]\n  },\n  untrustedAuthority: {\n    code: untrustedAuthority,\n    desc: ClientConfigurationErrorMessages[untrustedAuthority]\n  },\n  missingSshJwk: {\n    code: missingSshJwk,\n    desc: ClientConfigurationErrorMessages[missingSshJwk]\n  },\n  missingSshKid: {\n    code: missingSshKid,\n    desc: ClientConfigurationErrorMessages[missingSshKid]\n  },\n  missingNonceAuthenticationHeader: {\n    code: missingNonceAuthenticationHeader,\n    desc: ClientConfigurationErrorMessages[missingNonceAuthenticationHeader]\n  },\n  invalidAuthenticationHeader: {\n    code: invalidAuthenticationHeader,\n    desc: ClientConfigurationErrorMessages[invalidAuthenticationHeader]\n  },\n  cannotSetOIDCOptions: {\n    code: cannotSetOIDCOptions,\n    desc: ClientConfigurationErrorMessages[cannotSetOIDCOptions]\n  },\n  cannotAllowPlatformBroker: {\n    code: cannotAllowPlatformBroker,\n    desc: ClientConfigurationErrorMessages[cannotAllowPlatformBroker]\n  },\n  authorityMismatch: {\n    code: authorityMismatch,\n    desc: ClientConfigurationErrorMessages[authorityMismatch]\n  }\n};\n/**\r\n * Error thrown when there is an error in configuration of the MSAL.js library.\r\n */\nclass ClientConfigurationError extends AuthError {\n  constructor(errorCode) {\n    super(errorCode, ClientConfigurationErrorMessages[errorCode]);\n    this.name = \"ClientConfigurationError\";\n    Object.setPrototypeOf(this, ClientConfigurationError.prototype);\n  }\n}\nfunction createClientConfigurationError(errorCode) {\n  return new ClientConfigurationError(errorCode);\n}\nexport { ClientConfigurationError, ClientConfigurationErrorMessage, ClientConfigurationErrorMessages, createClientConfigurationError };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * @hidden\r\n */\nclass StringUtils {\n  /**\r\n   * Check if stringified object is empty\r\n   * @param strObj\r\n   */\n  static isEmptyObj(strObj) {\n    if (strObj) {\n      try {\n        const obj = JSON.parse(strObj);\n        return Object.keys(obj).length === 0;\n      } catch (e) {}\n    }\n    return true;\n  }\n  static startsWith(str, search) {\n    return str.indexOf(search) === 0;\n  }\n  static endsWith(str, search) {\n    return str.length >= search.length && str.lastIndexOf(search) === str.length - search.length;\n  }\n  /**\r\n   * Parses string into an object.\r\n   *\r\n   * @param query\r\n   */\n  static queryStringToObject(query) {\n    const obj = {};\n    const params = query.split(\"&\");\n    const decode = s => decodeURIComponent(s.replace(/\\+/g, \" \"));\n    params.forEach(pair => {\n      if (pair.trim()) {\n        const [key, value] = pair.split(/=(.+)/g, 2); // Split on the first occurence of the '=' character\n        if (key && value) {\n          obj[decode(key)] = decode(value);\n        }\n      }\n    });\n    return obj;\n  }\n  /**\r\n   * Trims entries in an array.\r\n   *\r\n   * @param arr\r\n   */\n  static trimArrayEntries(arr) {\n    return arr.map(entry => entry.trim());\n  }\n  /**\r\n   * Removes empty strings from array\r\n   * @param arr\r\n   */\n  static removeEmptyStringsFromArray(arr) {\n    return arr.filter(entry => {\n      return !!entry;\n    });\n  }\n  /**\r\n   * Attempts to parse a string into JSON\r\n   * @param str\r\n   */\n  static jsonParseHelper(str) {\n    try {\n      return JSON.parse(str);\n    } catch (e) {\n      return null;\n    }\n  }\n  /**\r\n   * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n   * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n   * @param input String to match against\r\n   */\n  static matchPattern(pattern, input) {\n    /**\r\n     * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n     * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n     */\n    // eslint-disable-next-line security/detect-non-literal-regexp\n    const regex = new RegExp(pattern.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\?\"));\n    return regex.test(input);\n  }\n}\nexport { StringUtils };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Authority types supported by MSAL.\r\n */\nconst AuthorityType = {\n  Default: 0,\n  Adfs: 1,\n  Dsts: 2,\n  Ciam: 3\n};\nexport { AuthorityType };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Protocol modes supported by MSAL.\r\n */\nconst ProtocolMode = {\n  AAD: \"AAD\",\n  OIDC: \"OIDC\"\n};\nexport { ProtocolMode };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { hashNotDeserialized } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Parses hash string from given string. Returns empty string if no hash symbol is found.\r\n * @param hashString\r\n */\nfunction stripLeadingHashOrQuery(responseString) {\n  if (responseString.startsWith(\"#/\")) {\n    return responseString.substring(2);\n  } else if (responseString.startsWith(\"#\") || responseString.startsWith(\"?\")) {\n    return responseString.substring(1);\n  }\n  return responseString;\n}\n/**\r\n * Returns URL hash as server auth code response object.\r\n */\nfunction getDeserializedResponse(responseString) {\n  // Check if given hash is empty\n  if (!responseString || responseString.indexOf(\"=\") < 0) {\n    return null;\n  }\n  try {\n    // Strip the # or ? symbol if present\n    const normalizedResponse = stripLeadingHashOrQuery(responseString);\n    // If # symbol was not present, above will return empty string, so give original hash value\n    const deserializedHash = Object.fromEntries(new URLSearchParams(normalizedResponse));\n    // Check for known response properties\n    if (deserializedHash.code || deserializedHash.error || deserializedHash.error_description || deserializedHash.state) {\n      return deserializedHash;\n    }\n  } catch (e) {\n    throw createClientAuthError(hashNotDeserialized);\n  }\n  return null;\n}\nexport { getDeserializedResponse, stripLeadingHashOrQuery };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { AADAuthorityConstants, Constants } from '../utils/Constants.mjs';\nimport { getDeserializedResponse } from '../utils/UrlUtils.mjs';\nimport { urlEmptyError, urlParseError, authorityUriInsecure } from '../error/ClientConfigurationErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Url object class which can perform various transformations on url strings.\r\n */\nclass UrlString {\n  get urlString() {\n    return this._urlString;\n  }\n  constructor(url) {\n    this._urlString = url;\n    if (!this._urlString) {\n      // Throws error if url is empty\n      throw createClientConfigurationError(urlEmptyError);\n    }\n    if (!url.includes(\"#\")) {\n      this._urlString = UrlString.canonicalizeUri(url);\n    }\n  }\n  /**\r\n   * Ensure urls are lower case and end with a / character.\r\n   * @param url\r\n   */\n  static canonicalizeUri(url) {\n    if (url) {\n      let lowerCaseUrl = url.toLowerCase();\n      if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\n        lowerCaseUrl = lowerCaseUrl.slice(0, -1);\n      } else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\n        lowerCaseUrl = lowerCaseUrl.slice(0, -2);\n      }\n      if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\n        lowerCaseUrl += \"/\";\n      }\n      return lowerCaseUrl;\n    }\n    return url;\n  }\n  /**\r\n   * Throws if urlString passed is not a valid authority URI string.\r\n   */\n  validateAsUri() {\n    // Attempts to parse url for uri components\n    let components;\n    try {\n      components = this.getUrlComponents();\n    } catch (e) {\n      throw createClientConfigurationError(urlParseError);\n    }\n    // Throw error if URI or path segments are not parseable.\n    if (!components.HostNameAndPort || !components.PathSegments) {\n      throw createClientConfigurationError(urlParseError);\n    }\n    // Throw error if uri is insecure.\n    if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\n      throw createClientConfigurationError(authorityUriInsecure);\n    }\n  }\n  /**\r\n   * Given a url and a query string return the url with provided query string appended\r\n   * @param url\r\n   * @param queryString\r\n   */\n  static appendQueryString(url, queryString) {\n    if (!queryString) {\n      return url;\n    }\n    return url.indexOf(\"?\") < 0 ? `${url}?${queryString}` : `${url}&${queryString}`;\n  }\n  /**\r\n   * Returns a url with the hash removed\r\n   * @param url\r\n   */\n  static removeHashFromUrl(url) {\n    return UrlString.canonicalizeUri(url.split(\"#\")[0]);\n  }\n  /**\r\n   * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n   * @param href The url\r\n   * @param tenantId The tenant id to replace\r\n   */\n  replaceTenantPath(tenantId) {\n    const urlObject = this.getUrlComponents();\n    const pathArray = urlObject.PathSegments;\n    if (tenantId && pathArray.length !== 0 && (pathArray[0] === AADAuthorityConstants.COMMON || pathArray[0] === AADAuthorityConstants.ORGANIZATIONS)) {\n      pathArray[0] = tenantId;\n    }\n    return UrlString.constructAuthorityUriFromObject(urlObject);\n  }\n  /**\r\n   * Parses out the components from a url string.\r\n   * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n   */\n  getUrlComponents() {\n    // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\n    const regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\n    // If url string does not match regEx, we throw an error\n    const match = this.urlString.match(regEx);\n    if (!match) {\n      throw createClientConfigurationError(urlParseError);\n    }\n    // Url component object\n    const urlComponents = {\n      Protocol: match[1],\n      HostNameAndPort: match[4],\n      AbsolutePath: match[5],\n      QueryString: match[7]\n    };\n    let pathSegments = urlComponents.AbsolutePath.split(\"/\");\n    pathSegments = pathSegments.filter(val => val && val.length > 0); // remove empty elements\n    urlComponents.PathSegments = pathSegments;\n    if (urlComponents.QueryString && urlComponents.QueryString.endsWith(\"/\")) {\n      urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);\n    }\n    return urlComponents;\n  }\n  static getDomainFromUrl(url) {\n    const regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\n    const match = url.match(regEx);\n    if (!match) {\n      throw createClientConfigurationError(urlParseError);\n    }\n    return match[2];\n  }\n  static getAbsoluteUrl(relativeUrl, baseUrl) {\n    if (relativeUrl[0] === Constants.FORWARD_SLASH) {\n      const url = new UrlString(baseUrl);\n      const baseComponents = url.getUrlComponents();\n      return baseComponents.Protocol + \"//\" + baseComponents.HostNameAndPort + relativeUrl;\n    }\n    return relativeUrl;\n  }\n  static constructAuthorityUriFromObject(urlObject) {\n    return new UrlString(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + urlObject.PathSegments.join(\"/\"));\n  }\n  /**\r\n   * Check if the hash of the URL string contains known properties\r\n   * @deprecated This API will be removed in a future version\r\n   */\n  static hashContainsKnownProperties(response) {\n    return !!getDeserializedResponse(response);\n  }\n}\nexport { UrlString };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\nimport { UrlString } from '../url/UrlString.mjs';\nimport { AuthorityMetadataSource } from '../utils/Constants.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst rawMetdataJSON = {\n  endpointMetadata: {\n    \"login.microsoftonline.com\": {\n      token_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/token\",\n      jwks_uri: \"https://login.microsoftonline.com/{tenantid}/discovery/v2.0/keys\",\n      issuer: \"https://login.microsoftonline.com/{tenantid}/v2.0\",\n      authorization_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/authorize\",\n      end_session_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/logout\"\n    },\n    \"login.chinacloudapi.cn\": {\n      token_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/token\",\n      jwks_uri: \"https://login.chinacloudapi.cn/{tenantid}/discovery/v2.0/keys\",\n      issuer: \"https://login.partner.microsoftonline.cn/{tenantid}/v2.0\",\n      authorization_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/authorize\",\n      end_session_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/logout\"\n    },\n    \"login.microsoftonline.us\": {\n      token_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/token\",\n      jwks_uri: \"https://login.microsoftonline.us/{tenantid}/discovery/v2.0/keys\",\n      issuer: \"https://login.microsoftonline.us/{tenantid}/v2.0\",\n      authorization_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/authorize\",\n      end_session_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/logout\"\n    }\n  },\n  instanceDiscoveryMetadata: {\n    tenant_discovery_endpoint: \"https://{canonicalAuthority}/v2.0/.well-known/openid-configuration\",\n    metadata: [{\n      preferred_network: \"login.microsoftonline.com\",\n      preferred_cache: \"login.windows.net\",\n      aliases: [\"login.microsoftonline.com\", \"login.windows.net\", \"login.microsoft.com\", \"sts.windows.net\"]\n    }, {\n      preferred_network: \"login.partner.microsoftonline.cn\",\n      preferred_cache: \"login.partner.microsoftonline.cn\",\n      aliases: [\"login.partner.microsoftonline.cn\", \"login.chinacloudapi.cn\"]\n    }, {\n      preferred_network: \"login.microsoftonline.de\",\n      preferred_cache: \"login.microsoftonline.de\",\n      aliases: [\"login.microsoftonline.de\"]\n    }, {\n      preferred_network: \"login.microsoftonline.us\",\n      preferred_cache: \"login.microsoftonline.us\",\n      aliases: [\"login.microsoftonline.us\", \"login.usgovcloudapi.net\"]\n    }, {\n      preferred_network: \"login-us.microsoftonline.com\",\n      preferred_cache: \"login-us.microsoftonline.com\",\n      aliases: [\"login-us.microsoftonline.com\"]\n    }]\n  }\n};\nconst EndpointMetadata = rawMetdataJSON.endpointMetadata;\nconst InstanceDiscoveryMetadata = rawMetdataJSON.instanceDiscoveryMetadata;\nconst InstanceDiscoveryMetadataAliases = new Set();\nInstanceDiscoveryMetadata.metadata.forEach(metadataEntry => {\n  metadataEntry.aliases.forEach(alias => {\n    InstanceDiscoveryMetadataAliases.add(alias);\n  });\n});\n/**\r\n * Attempts to get an aliases array from the static authority metadata sources based on the canonical authority host\r\n * @param staticAuthorityOptions\r\n * @param logger\r\n * @returns\r\n */\nfunction getAliasesFromStaticSources(staticAuthorityOptions, logger) {\n  let staticAliases;\n  const canonicalAuthority = staticAuthorityOptions.canonicalAuthority;\n  if (canonicalAuthority) {\n    const authorityHost = new UrlString(canonicalAuthority).getUrlComponents().HostNameAndPort;\n    staticAliases = getAliasesFromMetadata(authorityHost, staticAuthorityOptions.cloudDiscoveryMetadata?.metadata, AuthorityMetadataSource.CONFIG, logger) || getAliasesFromMetadata(authorityHost, InstanceDiscoveryMetadata.metadata, AuthorityMetadataSource.HARDCODED_VALUES, logger) || staticAuthorityOptions.knownAuthorities;\n  }\n  return staticAliases || [];\n}\n/**\r\n * Returns aliases for from the raw cloud discovery metadata passed in\r\n * @param authorityHost\r\n * @param rawCloudDiscoveryMetadata\r\n * @returns\r\n */\nfunction getAliasesFromMetadata(authorityHost, cloudDiscoveryMetadata, source, logger) {\n  logger?.trace(`getAliasesFromMetadata called with source: ${source}`);\n  if (authorityHost && cloudDiscoveryMetadata) {\n    const metadata = getCloudDiscoveryMetadataFromNetworkResponse(cloudDiscoveryMetadata, authorityHost);\n    if (metadata) {\n      logger?.trace(`getAliasesFromMetadata: found cloud discovery metadata in ${source}, returning aliases`);\n      return metadata.aliases;\n    } else {\n      logger?.trace(`getAliasesFromMetadata: did not find cloud discovery metadata in ${source}`);\n    }\n  }\n  return null;\n}\n/**\r\n * Get cloud discovery metadata for common authorities\r\n */\nfunction getCloudDiscoveryMetadataFromHardcodedValues(authorityHost) {\n  const metadata = getCloudDiscoveryMetadataFromNetworkResponse(InstanceDiscoveryMetadata.metadata, authorityHost);\n  return metadata;\n}\n/**\r\n * Searches instance discovery network response for the entry that contains the host in the aliases list\r\n * @param response\r\n * @param authority\r\n */\nfunction getCloudDiscoveryMetadataFromNetworkResponse(response, authorityHost) {\n  for (let i = 0; i < response.length; i++) {\n    const metadata = response[i];\n    if (metadata.aliases.includes(authorityHost)) {\n      return metadata;\n    }\n  }\n  return null;\n}\nexport { EndpointMetadata, InstanceDiscoveryMetadata, InstanceDiscoveryMetadataAliases, getAliasesFromMetadata, getAliasesFromStaticSources, getCloudDiscoveryMetadataFromHardcodedValues, getCloudDiscoveryMetadataFromNetworkResponse, rawMetdataJSON };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst cacheQuotaExceededErrorCode = \"cache_quota_exceeded\";\nconst cacheUnknownErrorCode = \"cache_error_unknown\";\nexport { cacheQuotaExceededErrorCode, cacheUnknownErrorCode };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\nimport { cacheUnknownErrorCode, cacheQuotaExceededErrorCode } from './CacheErrorCodes.mjs';\nimport * as CacheErrorCodes from './CacheErrorCodes.mjs';\nexport { CacheErrorCodes };\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst CacheErrorMessages = {\n  [cacheQuotaExceededErrorCode]: \"Exceeded cache storage capacity.\",\n  [cacheUnknownErrorCode]: \"Unexpected error occurred when using cache storage.\"\n};\n/**\r\n * Error thrown when there is an error with the cache\r\n */\nclass CacheError extends Error {\n  constructor(errorCode, errorMessage) {\n    const message = errorMessage || (CacheErrorMessages[errorCode] ? CacheErrorMessages[errorCode] : CacheErrorMessages[cacheUnknownErrorCode]);\n    super(`${errorCode}: ${message}`);\n    Object.setPrototypeOf(this, CacheError.prototype);\n    this.name = \"CacheError\";\n    this.errorCode = errorCode;\n    this.errorMessage = message;\n  }\n}\nexport { CacheError, CacheErrorMessages };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\nimport { DEFAULT_CRYPTO_IMPLEMENTATION } from '../crypto/ICrypto.mjs';\nimport { Logger, LogLevel } from '../logger/Logger.mjs';\nimport { DEFAULT_TOKEN_RENEWAL_OFFSET_SEC, Constants } from '../utils/Constants.mjs';\nimport { version } from '../packageMetadata.mjs';\nimport { AzureCloudInstance } from '../authority/AuthorityOptions.mjs';\nimport { DefaultStorageClass } from '../cache/CacheManager.mjs';\nimport { ProtocolMode } from '../authority/ProtocolMode.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { methodNotImplemented } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst DEFAULT_SYSTEM_OPTIONS = {\n  tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\n  preventCorsPreflight: false\n};\nconst DEFAULT_LOGGER_IMPLEMENTATION = {\n  loggerCallback: () => {\n    // allow users to not set loggerCallback\n  },\n  piiLoggingEnabled: false,\n  logLevel: LogLevel.Info,\n  correlationId: Constants.EMPTY_STRING\n};\nconst DEFAULT_CACHE_OPTIONS = {\n  claimsBasedCachingEnabled: false\n};\nconst DEFAULT_NETWORK_IMPLEMENTATION = {\n  async sendGetRequestAsync() {\n    throw createClientAuthError(methodNotImplemented);\n  },\n  async sendPostRequestAsync() {\n    throw createClientAuthError(methodNotImplemented);\n  }\n};\nconst DEFAULT_LIBRARY_INFO = {\n  sku: Constants.SKU,\n  version: version,\n  cpu: Constants.EMPTY_STRING,\n  os: Constants.EMPTY_STRING\n};\nconst DEFAULT_CLIENT_CREDENTIALS = {\n  clientSecret: Constants.EMPTY_STRING,\n  clientAssertion: undefined\n};\nconst DEFAULT_AZURE_CLOUD_OPTIONS = {\n  azureCloudInstance: AzureCloudInstance.None,\n  tenant: `${Constants.DEFAULT_COMMON_TENANT}`\n};\nconst DEFAULT_TELEMETRY_OPTIONS = {\n  application: {\n    appName: \"\",\n    appVersion: \"\"\n  }\n};\n/**\r\n * Function that sets the default options when not explicitly configured from app developer\r\n *\r\n * @param Configuration\r\n *\r\n * @returns Configuration\r\n */\nfunction buildClientConfiguration({\n  authOptions: userAuthOptions,\n  systemOptions: userSystemOptions,\n  loggerOptions: userLoggerOption,\n  cacheOptions: userCacheOptions,\n  storageInterface: storageImplementation,\n  networkInterface: networkImplementation,\n  cryptoInterface: cryptoImplementation,\n  clientCredentials: clientCredentials,\n  libraryInfo: libraryInfo,\n  telemetry: telemetry,\n  serverTelemetryManager: serverTelemetryManager,\n  persistencePlugin: persistencePlugin,\n  serializableCache: serializableCache\n}) {\n  const loggerOptions = {\n    ...DEFAULT_LOGGER_IMPLEMENTATION,\n    ...userLoggerOption\n  };\n  return {\n    authOptions: buildAuthOptions(userAuthOptions),\n    systemOptions: {\n      ...DEFAULT_SYSTEM_OPTIONS,\n      ...userSystemOptions\n    },\n    loggerOptions: loggerOptions,\n    cacheOptions: {\n      ...DEFAULT_CACHE_OPTIONS,\n      ...userCacheOptions\n    },\n    storageInterface: storageImplementation || new DefaultStorageClass(userAuthOptions.clientId, DEFAULT_CRYPTO_IMPLEMENTATION, new Logger(loggerOptions)),\n    networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\n    cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,\n    clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\n    libraryInfo: {\n      ...DEFAULT_LIBRARY_INFO,\n      ...libraryInfo\n    },\n    telemetry: {\n      ...DEFAULT_TELEMETRY_OPTIONS,\n      ...telemetry\n    },\n    serverTelemetryManager: serverTelemetryManager || null,\n    persistencePlugin: persistencePlugin || null,\n    serializableCache: serializableCache || null\n  };\n}\n/**\r\n * Construct authoptions from the client and platform passed values\r\n * @param authOptions\r\n */\nfunction buildAuthOptions(authOptions) {\n  return {\n    clientCapabilities: [],\n    azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS,\n    skipAuthorityMetadataCache: false,\n    instanceAware: false,\n    ...authOptions\n  };\n}\n/**\r\n * Returns true if config has protocolMode set to ProtocolMode.OIDC, false otherwise\r\n * @param ClientConfiguration\r\n */\nfunction isOidcProtocolMode(config) {\n  return config.authOptions.authority.options.protocolMode === ProtocolMode.OIDC;\n}\nexport { DEFAULT_SYSTEM_OPTIONS, buildClientConfiguration, isOidcProtocolMode };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nfunction isOpenIdConfigResponse(response) {\n  return response.hasOwnProperty(\"authorization_endpoint\") && response.hasOwnProperty(\"token_endpoint\") && response.hasOwnProperty(\"issuer\") && response.hasOwnProperty(\"jwks_uri\");\n}\nexport { isOpenIdConfigResponse };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nfunction isCloudInstanceDiscoveryResponse(response) {\n  return response.hasOwnProperty(\"tenant_discovery_endpoint\") && response.hasOwnProperty(\"metadata\");\n}\nexport { isCloudInstanceDiscoveryResponse };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nfunction isCloudInstanceDiscoveryErrorResponse(response) {\n  return response.hasOwnProperty(\"error\") && response.hasOwnProperty(\"error_description\");\n}\nexport { isCloudInstanceDiscoveryErrorResponse };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Enumeration of operations that are instrumented by have their performance measured by the PerformanceClient.\r\n *\r\n * @export\r\n * @enum {number}\r\n */\nconst PerformanceEvents = {\n  /**\r\n   * acquireTokenByCode API (msal-browser and msal-node).\r\n   * Used to acquire tokens by trading an authorization code against the token endpoint.\r\n   */\n  AcquireTokenByCode: \"acquireTokenByCode\",\n  /**\r\n   * acquireTokenByRefreshToken API (msal-browser and msal-node).\r\n   * Used to renew an access token using a refresh token against the token endpoint.\r\n   */\n  AcquireTokenByRefreshToken: \"acquireTokenByRefreshToken\",\n  /**\r\n   * acquireTokenSilent API (msal-browser and msal-node).\r\n   * Used to silently acquire a new access token (from the cache or the network).\r\n   */\n  AcquireTokenSilent: \"acquireTokenSilent\",\n  /**\r\n   * acquireTokenSilentAsync (msal-browser).\r\n   * Internal API for acquireTokenSilent.\r\n   */\n  AcquireTokenSilentAsync: \"acquireTokenSilentAsync\",\n  /**\r\n   * acquireTokenPopup (msal-browser).\r\n   * Used to acquire a new access token interactively through pop ups\r\n   */\n  AcquireTokenPopup: \"acquireTokenPopup\",\n  /**\r\n   * acquireTokenPreRedirect (msal-browser).\r\n   * First part of the redirect flow.\r\n   * Used to acquire a new access token interactively through redirects.\r\n   */\n  AcquireTokenPreRedirect: \"acquireTokenPreRedirect\",\n  /**\r\n   * acquireTokenRedirect (msal-browser).\r\n   * Second part of the redirect flow.\r\n   * Used to acquire a new access token interactively through redirects.\r\n   */\n  AcquireTokenRedirect: \"acquireTokenRedirect\",\n  /**\r\n   * getPublicKeyThumbprint API in CryptoOpts class (msal-browser).\r\n   * Used to generate a public/private keypair and generate a public key thumbprint for pop requests.\r\n   */\n  CryptoOptsGetPublicKeyThumbprint: \"cryptoOptsGetPublicKeyThumbprint\",\n  /**\r\n   * signJwt API in CryptoOpts class (msal-browser).\r\n   * Used to signed a pop token.\r\n   */\n  CryptoOptsSignJwt: \"cryptoOptsSignJwt\",\n  /**\r\n   * acquireToken API in the SilentCacheClient class (msal-browser).\r\n   * Used to read access tokens from the cache.\r\n   */\n  SilentCacheClientAcquireToken: \"silentCacheClientAcquireToken\",\n  /**\r\n   * acquireToken API in the SilentIframeClient class (msal-browser).\r\n   * Used to acquire a new set of tokens from the authorize endpoint in a hidden iframe.\r\n   */\n  SilentIframeClientAcquireToken: \"silentIframeClientAcquireToken\",\n  AwaitConcurrentIframe: \"awaitConcurrentIframe\",\n  /**\r\n   * acquireToken API in SilentRereshClient (msal-browser).\r\n   * Used to acquire a new set of tokens from the token endpoint using a refresh token.\r\n   */\n  SilentRefreshClientAcquireToken: \"silentRefreshClientAcquireToken\",\n  /**\r\n   * ssoSilent API (msal-browser).\r\n   * Used to silently acquire an authorization code and set of tokens using a hidden iframe.\r\n   */\n  SsoSilent: \"ssoSilent\",\n  /**\r\n   * getDiscoveredAuthority API in StandardInteractionClient class (msal-browser).\r\n   * Used to load authority metadata for a request.\r\n   */\n  StandardInteractionClientGetDiscoveredAuthority: \"standardInteractionClientGetDiscoveredAuthority\",\n  /**\r\n   * acquireToken APIs in msal-browser.\r\n   * Used to make an /authorize endpoint call with native brokering enabled.\r\n   */\n  FetchAccountIdWithNativeBroker: \"fetchAccountIdWithNativeBroker\",\n  /**\r\n   * acquireToken API in NativeInteractionClient class (msal-browser).\r\n   * Used to acquire a token from Native component when native brokering is enabled.\r\n   */\n  NativeInteractionClientAcquireToken: \"nativeInteractionClientAcquireToken\",\n  /**\r\n   * Time spent creating default headers for requests to token endpoint\r\n   */\n  BaseClientCreateTokenRequestHeaders: \"baseClientCreateTokenRequestHeaders\",\n  /**\r\n   * Time spent sending/waiting for the response of a request to the token endpoint\r\n   */\n  NetworkClientSendPostRequestAsync: \"networkClientSendPostRequestAsync\",\n  RefreshTokenClientExecutePostToTokenEndpoint: \"refreshTokenClientExecutePostToTokenEndpoint\",\n  AuthorizationCodeClientExecutePostToTokenEndpoint: \"authorizationCodeClientExecutePostToTokenEndpoint\",\n  /**\r\n   * Used to measure the time taken for completing embedded-broker handshake (PW-Broker).\r\n   */\n  BrokerHandhshake: \"brokerHandshake\",\n  /**\r\n   * acquireTokenByRefreshToken API in BrokerClientApplication (PW-Broker) .\r\n   */\n  AcquireTokenByRefreshTokenInBroker: \"acquireTokenByRefreshTokenInBroker\",\n  /**\r\n   * Time taken for token acquisition by broker\r\n   */\n  AcquireTokenByBroker: \"acquireTokenByBroker\",\n  /**\r\n   * Time spent on the network for refresh token acquisition\r\n   */\n  RefreshTokenClientExecuteTokenRequest: \"refreshTokenClientExecuteTokenRequest\",\n  /**\r\n   * Time taken for acquiring refresh token , records RT size\r\n   */\n  RefreshTokenClientAcquireToken: \"refreshTokenClientAcquireToken\",\n  /**\r\n   * Time taken for acquiring cached refresh token\r\n   */\n  RefreshTokenClientAcquireTokenWithCachedRefreshToken: \"refreshTokenClientAcquireTokenWithCachedRefreshToken\",\n  /**\r\n   * acquireTokenByRefreshToken API in RefreshTokenClient (msal-common).\r\n   */\n  RefreshTokenClientAcquireTokenByRefreshToken: \"refreshTokenClientAcquireTokenByRefreshToken\",\n  /**\r\n   * Helper function to create token request body in RefreshTokenClient (msal-common).\r\n   */\n  RefreshTokenClientCreateTokenRequestBody: \"refreshTokenClientCreateTokenRequestBody\",\n  /**\r\n   * acquireTokenFromCache (msal-browser).\r\n   * Internal API for acquiring token from cache\r\n   */\n  AcquireTokenFromCache: \"acquireTokenFromCache\",\n  SilentFlowClientAcquireCachedToken: \"silentFlowClientAcquireCachedToken\",\n  SilentFlowClientGenerateResultFromCacheRecord: \"silentFlowClientGenerateResultFromCacheRecord\",\n  /**\r\n   * acquireTokenBySilentIframe (msal-browser).\r\n   * Internal API for acquiring token by silent Iframe\r\n   */\n  AcquireTokenBySilentIframe: \"acquireTokenBySilentIframe\",\n  /**\r\n   * Internal API for initializing base request in BaseInteractionClient (msal-browser)\r\n   */\n  InitializeBaseRequest: \"initializeBaseRequest\",\n  /**\r\n   * Internal API for initializing silent request in SilentCacheClient (msal-browser)\r\n   */\n  InitializeSilentRequest: \"initializeSilentRequest\",\n  InitializeClientApplication: \"initializeClientApplication\",\n  InitializeCache: \"initializeCache\",\n  /**\r\n   * Helper function in SilentIframeClient class (msal-browser).\r\n   */\n  SilentIframeClientTokenHelper: \"silentIframeClientTokenHelper\",\n  /**\r\n   * SilentHandler\r\n   */\n  SilentHandlerInitiateAuthRequest: \"silentHandlerInitiateAuthRequest\",\n  SilentHandlerMonitorIframeForHash: \"silentHandlerMonitorIframeForHash\",\n  SilentHandlerLoadFrame: \"silentHandlerLoadFrame\",\n  SilentHandlerLoadFrameSync: \"silentHandlerLoadFrameSync\",\n  /**\r\n   * Helper functions in StandardInteractionClient class (msal-browser)\r\n   */\n  StandardInteractionClientCreateAuthCodeClient: \"standardInteractionClientCreateAuthCodeClient\",\n  StandardInteractionClientGetClientConfiguration: \"standardInteractionClientGetClientConfiguration\",\n  StandardInteractionClientInitializeAuthorizationRequest: \"standardInteractionClientInitializeAuthorizationRequest\",\n  StandardInteractionClientInitializeAuthorizationCodeRequest: \"standardInteractionClientInitializeAuthorizationCodeRequest\",\n  /**\r\n   * getAuthCodeUrl API (msal-browser and msal-node).\r\n   */\n  GetAuthCodeUrl: \"getAuthCodeUrl\",\n  /**\r\n   * Functions from InteractionHandler (msal-browser)\r\n   */\n  HandleCodeResponseFromServer: \"handleCodeResponseFromServer\",\n  HandleCodeResponse: \"handleCodeResponse\",\n  UpdateTokenEndpointAuthority: \"updateTokenEndpointAuthority\",\n  /**\r\n   * APIs in Authorization Code Client (msal-common)\r\n   */\n  AuthClientAcquireToken: \"authClientAcquireToken\",\n  AuthClientExecuteTokenRequest: \"authClientExecuteTokenRequest\",\n  AuthClientCreateTokenRequestBody: \"authClientCreateTokenRequestBody\",\n  AuthClientCreateQueryString: \"authClientCreateQueryString\",\n  /**\r\n   * Generate functions in PopTokenGenerator (msal-common)\r\n   */\n  PopTokenGenerateCnf: \"popTokenGenerateCnf\",\n  PopTokenGenerateKid: \"popTokenGenerateKid\",\n  /**\r\n   * handleServerTokenResponse API in ResponseHandler (msal-common)\r\n   */\n  HandleServerTokenResponse: \"handleServerTokenResponse\",\n  DeserializeResponse: \"deserializeResponse\",\n  /**\r\n   * Authority functions\r\n   */\n  AuthorityFactoryCreateDiscoveredInstance: \"authorityFactoryCreateDiscoveredInstance\",\n  AuthorityResolveEndpointsAsync: \"authorityResolveEndpointsAsync\",\n  AuthorityResolveEndpointsFromLocalSources: \"authorityResolveEndpointsFromLocalSources\",\n  AuthorityGetCloudDiscoveryMetadataFromNetwork: \"authorityGetCloudDiscoveryMetadataFromNetwork\",\n  AuthorityUpdateCloudDiscoveryMetadata: \"authorityUpdateCloudDiscoveryMetadata\",\n  AuthorityGetEndpointMetadataFromNetwork: \"authorityGetEndpointMetadataFromNetwork\",\n  AuthorityUpdateEndpointMetadata: \"authorityUpdateEndpointMetadata\",\n  AuthorityUpdateMetadataWithRegionalInformation: \"authorityUpdateMetadataWithRegionalInformation\",\n  /**\r\n   * Region Discovery functions\r\n   */\n  RegionDiscoveryDetectRegion: \"regionDiscoveryDetectRegion\",\n  RegionDiscoveryGetRegionFromIMDS: \"regionDiscoveryGetRegionFromIMDS\",\n  RegionDiscoveryGetCurrentVersion: \"regionDiscoveryGetCurrentVersion\",\n  AcquireTokenByCodeAsync: \"acquireTokenByCodeAsync\",\n  GetEndpointMetadataFromNetwork: \"getEndpointMetadataFromNetwork\",\n  GetCloudDiscoveryMetadataFromNetworkMeasurement: \"getCloudDiscoveryMetadataFromNetworkMeasurement\",\n  HandleRedirectPromiseMeasurement: \"handleRedirectPromise\",\n  HandleNativeRedirectPromiseMeasurement: \"handleNativeRedirectPromise\",\n  UpdateCloudDiscoveryMetadataMeasurement: \"updateCloudDiscoveryMetadataMeasurement\",\n  UsernamePasswordClientAcquireToken: \"usernamePasswordClientAcquireToken\",\n  NativeMessageHandlerHandshake: \"nativeMessageHandlerHandshake\",\n  NativeGenerateAuthResult: \"nativeGenerateAuthResult\",\n  RemoveHiddenIframe: \"removeHiddenIframe\",\n  /**\r\n   * Cache operations\r\n   */\n  ClearTokensAndKeysWithClaims: \"clearTokensAndKeysWithClaims\",\n  CacheManagerGetRefreshToken: \"cacheManagerGetRefreshToken\",\n  ImportExistingCache: \"importExistingCache\",\n  SetUserData: \"setUserData\",\n  LocalStorageUpdated: \"localStorageUpdated\",\n  /**\r\n   * Crypto Operations\r\n   */\n  GeneratePkceCodes: \"generatePkceCodes\",\n  GenerateCodeVerifier: \"generateCodeVerifier\",\n  GenerateCodeChallengeFromVerifier: \"generateCodeChallengeFromVerifier\",\n  Sha256Digest: \"sha256Digest\",\n  GetRandomValues: \"getRandomValues\",\n  GenerateHKDF: \"generateHKDF\",\n  GenerateBaseKey: \"generateBaseKey\",\n  Base64Decode: \"base64Decode\",\n  UrlEncodeArr: \"urlEncodeArr\",\n  Encrypt: \"encrypt\",\n  Decrypt: \"decrypt\"\n};\nconst PerformanceEventAbbreviations = new Map([[PerformanceEvents.AcquireTokenByCode, \"ATByCode\"], [PerformanceEvents.AcquireTokenByRefreshToken, \"ATByRT\"], [PerformanceEvents.AcquireTokenSilent, \"ATS\"], [PerformanceEvents.AcquireTokenSilentAsync, \"ATSAsync\"], [PerformanceEvents.AcquireTokenPopup, \"ATPopup\"], [PerformanceEvents.AcquireTokenRedirect, \"ATRedirect\"], [PerformanceEvents.CryptoOptsGetPublicKeyThumbprint, \"CryptoGetPKThumb\"], [PerformanceEvents.CryptoOptsSignJwt, \"CryptoSignJwt\"], [PerformanceEvents.SilentCacheClientAcquireToken, \"SltCacheClientAT\"], [PerformanceEvents.SilentIframeClientAcquireToken, \"SltIframeClientAT\"], [PerformanceEvents.SilentRefreshClientAcquireToken, \"SltRClientAT\"], [PerformanceEvents.SsoSilent, \"SsoSlt\"], [PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, \"StdIntClientGetDiscAuth\"], [PerformanceEvents.FetchAccountIdWithNativeBroker, \"FetchAccIdWithNtvBroker\"], [PerformanceEvents.NativeInteractionClientAcquireToken, \"NtvIntClientAT\"], [PerformanceEvents.BaseClientCreateTokenRequestHeaders, \"BaseClientCreateTReqHead\"], [PerformanceEvents.NetworkClientSendPostRequestAsync, \"NetClientSendPost\"], [PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint, \"RTClientExecPost\"], [PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint, \"AuthCodeClientExecPost\"], [PerformanceEvents.BrokerHandhshake, \"BrokerHandshake\"], [PerformanceEvents.AcquireTokenByRefreshTokenInBroker, \"ATByRTInBroker\"], [PerformanceEvents.AcquireTokenByBroker, \"ATByBroker\"], [PerformanceEvents.RefreshTokenClientExecuteTokenRequest, \"RTClientExecTReq\"], [PerformanceEvents.RefreshTokenClientAcquireToken, \"RTClientAT\"], [PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, \"RTClientATWithCachedRT\"], [PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, \"RTClientATByRT\"], [PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, \"RTClientCreateTReqBody\"], [PerformanceEvents.AcquireTokenFromCache, \"ATFromCache\"], [PerformanceEvents.SilentFlowClientAcquireCachedToken, \"SltFlowClientATCached\"], [PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord, \"SltFlowClientGenResFromCache\"], [PerformanceEvents.AcquireTokenBySilentIframe, \"ATBySltIframe\"], [PerformanceEvents.InitializeBaseRequest, \"InitBaseReq\"], [PerformanceEvents.InitializeSilentRequest, \"InitSltReq\"], [PerformanceEvents.InitializeClientApplication, \"InitClientApplication\"], [PerformanceEvents.InitializeCache, \"InitCache\"], [PerformanceEvents.ImportExistingCache, \"importCache\"], [PerformanceEvents.SetUserData, \"setUserData\"], [PerformanceEvents.LocalStorageUpdated, \"localStorageUpdated\"], [PerformanceEvents.SilentIframeClientTokenHelper, \"SIClientTHelper\"], [PerformanceEvents.SilentHandlerInitiateAuthRequest, \"SHandlerInitAuthReq\"], [PerformanceEvents.SilentHandlerMonitorIframeForHash, \"SltHandlerMonitorIframeForHash\"], [PerformanceEvents.SilentHandlerLoadFrame, \"SHandlerLoadFrame\"], [PerformanceEvents.SilentHandlerLoadFrameSync, \"SHandlerLoadFrameSync\"], [PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, \"StdIntClientCreateAuthCodeClient\"], [PerformanceEvents.StandardInteractionClientGetClientConfiguration, \"StdIntClientGetClientConf\"], [PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, \"StdIntClientInitAuthReq\"], [PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, \"StdIntClientInitAuthCodeReq\"], [PerformanceEvents.GetAuthCodeUrl, \"GetAuthCodeUrl\"], [PerformanceEvents.HandleCodeResponseFromServer, \"HandleCodeResFromServer\"], [PerformanceEvents.HandleCodeResponse, \"HandleCodeResp\"], [PerformanceEvents.UpdateTokenEndpointAuthority, \"UpdTEndpointAuth\"], [PerformanceEvents.AuthClientAcquireToken, \"AuthClientAT\"], [PerformanceEvents.AuthClientExecuteTokenRequest, \"AuthClientExecTReq\"], [PerformanceEvents.AuthClientCreateTokenRequestBody, \"AuthClientCreateTReqBody\"], [PerformanceEvents.AuthClientCreateQueryString, \"AuthClientCreateQueryStr\"], [PerformanceEvents.PopTokenGenerateCnf, \"PopTGenCnf\"], [PerformanceEvents.PopTokenGenerateKid, \"PopTGenKid\"], [PerformanceEvents.HandleServerTokenResponse, \"HandleServerTRes\"], [PerformanceEvents.DeserializeResponse, \"DeserializeRes\"], [PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, \"AuthFactCreateDiscInst\"], [PerformanceEvents.AuthorityResolveEndpointsAsync, \"AuthResolveEndpointsAsync\"], [PerformanceEvents.AuthorityResolveEndpointsFromLocalSources, \"AuthResolveEndpointsFromLocal\"], [PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, \"AuthGetCDMetaFromNet\"], [PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, \"AuthUpdCDMeta\"], [PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, \"AuthUpdCDMetaFromNet\"], [PerformanceEvents.AuthorityUpdateEndpointMetadata, \"AuthUpdEndpointMeta\"], [PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, \"AuthUpdMetaWithRegInfo\"], [PerformanceEvents.RegionDiscoveryDetectRegion, \"RegDiscDetectReg\"], [PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, \"RegDiscGetRegFromIMDS\"], [PerformanceEvents.RegionDiscoveryGetCurrentVersion, \"RegDiscGetCurrentVer\"], [PerformanceEvents.AcquireTokenByCodeAsync, \"ATByCodeAsync\"], [PerformanceEvents.GetEndpointMetadataFromNetwork, \"GetEndpointMetaFromNet\"], [PerformanceEvents.GetCloudDiscoveryMetadataFromNetworkMeasurement, \"GetCDMetaFromNet\"], [PerformanceEvents.HandleRedirectPromiseMeasurement, \"HandleRedirectPromise\"], [PerformanceEvents.HandleNativeRedirectPromiseMeasurement, \"HandleNtvRedirectPromise\"], [PerformanceEvents.UpdateCloudDiscoveryMetadataMeasurement, \"UpdateCDMeta\"], [PerformanceEvents.UsernamePasswordClientAcquireToken, \"UserPassClientAT\"], [PerformanceEvents.NativeMessageHandlerHandshake, \"NtvMsgHandlerHandshake\"], [PerformanceEvents.NativeGenerateAuthResult, \"NtvGenAuthRes\"], [PerformanceEvents.RemoveHiddenIframe, \"RemoveHiddenIframe\"], [PerformanceEvents.ClearTokensAndKeysWithClaims, \"ClearTAndKeysWithClaims\"], [PerformanceEvents.CacheManagerGetRefreshToken, \"CacheManagerGetRT\"], [PerformanceEvents.GeneratePkceCodes, \"GenPkceCodes\"], [PerformanceEvents.GenerateCodeVerifier, \"GenCodeVerifier\"], [PerformanceEvents.GenerateCodeChallengeFromVerifier, \"GenCodeChallengeFromVerifier\"], [PerformanceEvents.Sha256Digest, \"Sha256Digest\"], [PerformanceEvents.GetRandomValues, \"GetRandomValues\"], [PerformanceEvents.GenerateHKDF, \"genHKDF\"], [PerformanceEvents.GenerateBaseKey, \"genBaseKey\"], [PerformanceEvents.Base64Decode, \"b64Decode\"], [PerformanceEvents.UrlEncodeArr, \"urlEncArr\"], [PerformanceEvents.Encrypt, \"encrypt\"], [PerformanceEvents.Decrypt, \"decrypt\"]]);\n/**\r\n * State of the performance event.\r\n *\r\n * @export\r\n * @enum {number}\r\n */\nconst PerformanceEventStatus = {\n  NotStarted: 0,\n  InProgress: 1,\n  Completed: 2\n};\nconst IntFields = new Set([\"accessTokenSize\", \"durationMs\", \"idTokenSize\", \"matsSilentStatus\", \"matsHttpStatus\", \"refreshTokenSize\", \"queuedTimeMs\", \"startTimeMs\", \"status\", \"multiMatchedAT\", \"multiMatchedID\", \"multiMatchedRT\", \"unencryptedCacheCount\", \"encryptedCacheExpiredCount\"]);\nexport { IntFields, PerformanceEventAbbreviations, PerformanceEventStatus, PerformanceEvents };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Wraps a function with a performance measurement.\r\n * Usage: invoke(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\r\n * @param callback\r\n * @param eventName\r\n * @param logger\r\n * @param telemetryClient\r\n * @param correlationId\r\n * @returns\r\n * @internal\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst invoke = (callback, eventName, logger, telemetryClient, correlationId) => {\n  return (...args) => {\n    logger.trace(`Executing function ${eventName}`);\n    const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\n    if (correlationId) {\n      // Track number of times this API is called in a single request\n      const eventCount = eventName + \"CallCount\";\n      telemetryClient?.incrementFields({\n        [eventCount]: 1\n      }, correlationId);\n    }\n    try {\n      const result = callback(...args);\n      inProgressEvent?.end({\n        success: true\n      });\n      logger.trace(`Returning result from ${eventName}`);\n      return result;\n    } catch (e) {\n      logger.trace(`Error occurred in ${eventName}`);\n      try {\n        logger.trace(JSON.stringify(e));\n      } catch (e) {\n        logger.trace(\"Unable to print error message.\");\n      }\n      inProgressEvent?.end({\n        success: false\n      }, e);\n      throw e;\n    }\n  };\n};\n/**\r\n * Wraps an async function with a performance measurement.\r\n * Usage: invokeAsync(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\r\n * @param callback\r\n * @param eventName\r\n * @param logger\r\n * @param telemetryClient\r\n * @param correlationId\r\n * @returns\r\n * @internal\r\n *\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst invokeAsync = (callback, eventName, logger, telemetryClient, correlationId) => {\n  return (...args) => {\n    logger.trace(`Executing function ${eventName}`);\n    const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\n    if (correlationId) {\n      // Track number of times this API is called in a single request\n      const eventCount = eventName + \"CallCount\";\n      telemetryClient?.incrementFields({\n        [eventCount]: 1\n      }, correlationId);\n    }\n    telemetryClient?.setPreQueueTime(eventName, correlationId);\n    return callback(...args).then(response => {\n      logger.trace(`Returning result from ${eventName}`);\n      inProgressEvent?.end({\n        success: true\n      });\n      return response;\n    }).catch(e => {\n      logger.trace(`Error occurred in ${eventName}`);\n      try {\n        logger.trace(JSON.stringify(e));\n      } catch (e) {\n        logger.trace(\"Unable to print error message.\");\n      }\n      inProgressEvent?.end({\n        success: false\n      }, e);\n      throw e;\n    });\n  };\n};\nexport { invoke, invokeAsync };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\nimport { Constants, ResponseCodes, RegionDiscoverySources } from '../utils/Constants.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass RegionDiscovery {\n  constructor(networkInterface, logger, performanceClient, correlationId) {\n    this.networkInterface = networkInterface;\n    this.logger = logger;\n    this.performanceClient = performanceClient;\n    this.correlationId = correlationId;\n  }\n  /**\r\n   * Detect the region from the application's environment.\r\n   *\r\n   * @returns Promise<string | null>\r\n   */\n  async detectRegion(environmentRegion, regionDiscoveryMetadata) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryDetectRegion, this.correlationId);\n    // Initialize auto detected region with the region from the envrionment\n    let autodetectedRegionName = environmentRegion;\n    // Check if a region was detected from the environment, if not, attempt to get the region from IMDS\n    if (!autodetectedRegionName) {\n      const options = RegionDiscovery.IMDS_OPTIONS;\n      try {\n        const localIMDSVersionResponse = await invokeAsync(this.getRegionFromIMDS.bind(this), PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.logger, this.performanceClient, this.correlationId)(Constants.IMDS_VERSION, options);\n        if (localIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n          autodetectedRegionName = localIMDSVersionResponse.body;\n          regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n        }\n        // If the response using the local IMDS version failed, try to fetch the current version of IMDS and retry.\n        if (localIMDSVersionResponse.status === ResponseCodes.httpBadRequest) {\n          const currentIMDSVersion = await invokeAsync(this.getCurrentVersion.bind(this), PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.logger, this.performanceClient, this.correlationId)(options);\n          if (!currentIMDSVersion) {\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n            return null;\n          }\n          const currentIMDSVersionResponse = await invokeAsync(this.getRegionFromIMDS.bind(this), PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.logger, this.performanceClient, this.correlationId)(currentIMDSVersion, options);\n          if (currentIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n            autodetectedRegionName = currentIMDSVersionResponse.body;\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n          }\n        }\n      } catch (e) {\n        regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n        return null;\n      }\n    } else {\n      regionDiscoveryMetadata.region_source = RegionDiscoverySources.ENVIRONMENT_VARIABLE;\n    }\n    // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\n    if (!autodetectedRegionName) {\n      regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n    }\n    return autodetectedRegionName || null;\n  }\n  /**\r\n   * Make the call to the IMDS endpoint\r\n   *\r\n   * @param imdsEndpointUrl\r\n   * @returns Promise<NetworkResponse<string>>\r\n   */\n  async getRegionFromIMDS(version, options) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n    return this.networkInterface.sendGetRequestAsync(`${Constants.IMDS_ENDPOINT}?api-version=${version}&format=text`, options, Constants.IMDS_TIMEOUT);\n  }\n  /**\r\n   * Get the most recent version of the IMDS endpoint available\r\n   *\r\n   * @returns Promise<string | null>\r\n   */\n  async getCurrentVersion(options) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\n    try {\n      const response = await this.networkInterface.sendGetRequestAsync(`${Constants.IMDS_ENDPOINT}?format=json`, options);\n      // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\n      if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\n        return response.body[\"newest-versions\"][0];\n      }\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n}\n// Options for the IMDS endpoint request\nRegionDiscovery.IMDS_OPTIONS = {\n  headers: {\n    Metadata: \"true\"\n  }\n};\nexport { RegionDiscovery };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\nimport { AuthorityType } from './AuthorityType.mjs';\nimport { isOpenIdConfigResponse } from './OpenIdConfigResponse.mjs';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { Constants, AuthorityMetadataSource, RegionDiscoveryOutcomes, AADAuthorityConstants } from '../utils/Constants.mjs';\nimport { EndpointMetadata, getCloudDiscoveryMetadataFromHardcodedValues, getCloudDiscoveryMetadataFromNetworkResponse, InstanceDiscoveryMetadataAliases } from './AuthorityMetadata.mjs';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { ProtocolMode } from './ProtocolMode.mjs';\nimport { AzureCloudInstance } from './AuthorityOptions.mjs';\nimport { isCloudInstanceDiscoveryResponse } from './CloudInstanceDiscoveryResponse.mjs';\nimport { isCloudInstanceDiscoveryErrorResponse } from './CloudInstanceDiscoveryErrorResponse.mjs';\nimport { RegionDiscovery } from './RegionDiscovery.mjs';\nimport { AuthError } from '../error/AuthError.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\nimport { generateAuthorityMetadataExpiresAt, updateAuthorityEndpointMetadata, isAuthorityMetadataExpired, updateCloudDiscoveryMetadata } from '../cache/utils/CacheHelpers.mjs';\nimport { endpointResolutionError, endSessionEndpointNotSupported, openIdConfigError } from '../error/ClientAuthErrorCodes.mjs';\nimport { invalidAuthorityMetadata, untrustedAuthority, invalidCloudDiscoveryMetadata } from '../error/ClientConfigurationErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\r\n * endpoint. It will store the pertinent config data in this object for use during token calls.\r\n * @internal\r\n */\nclass Authority {\n  constructor(authority, networkInterface, cacheManager, authorityOptions, logger, correlationId, performanceClient, managedIdentity) {\n    this.canonicalAuthority = authority;\n    this._canonicalAuthority.validateAsUri();\n    this.networkInterface = networkInterface;\n    this.cacheManager = cacheManager;\n    this.authorityOptions = authorityOptions;\n    this.regionDiscoveryMetadata = {\n      region_used: undefined,\n      region_source: undefined,\n      region_outcome: undefined\n    };\n    this.logger = logger;\n    this.performanceClient = performanceClient;\n    this.correlationId = correlationId;\n    this.managedIdentity = managedIdentity || false;\n    this.regionDiscovery = new RegionDiscovery(networkInterface, this.logger, this.performanceClient, this.correlationId);\n  }\n  /**\r\n   * Get {@link AuthorityType}\r\n   * @param authorityUri {@link IUri}\r\n   * @private\r\n   */\n  getAuthorityType(authorityUri) {\n    // CIAM auth url pattern is being standardized as: <tenant>.ciamlogin.com\n    if (authorityUri.HostNameAndPort.endsWith(Constants.CIAM_AUTH_URL)) {\n      return AuthorityType.Ciam;\n    }\n    const pathSegments = authorityUri.PathSegments;\n    if (pathSegments.length) {\n      switch (pathSegments[0].toLowerCase()) {\n        case Constants.ADFS:\n          return AuthorityType.Adfs;\n        case Constants.DSTS:\n          return AuthorityType.Dsts;\n      }\n    }\n    return AuthorityType.Default;\n  }\n  // See above for AuthorityType\n  get authorityType() {\n    return this.getAuthorityType(this.canonicalAuthorityUrlComponents);\n  }\n  /**\r\n   * ProtocolMode enum representing the way endpoints are constructed.\r\n   */\n  get protocolMode() {\n    return this.authorityOptions.protocolMode;\n  }\n  /**\r\n   * Returns authorityOptions which can be used to reinstantiate a new authority instance\r\n   */\n  get options() {\n    return this.authorityOptions;\n  }\n  /**\r\n   * A URL that is the authority set by the developer\r\n   */\n  get canonicalAuthority() {\n    return this._canonicalAuthority.urlString;\n  }\n  /**\r\n   * Sets canonical authority.\r\n   */\n  set canonicalAuthority(url) {\n    this._canonicalAuthority = new UrlString(url);\n    this._canonicalAuthority.validateAsUri();\n    this._canonicalAuthorityUrlComponents = null;\n  }\n  /**\r\n   * Get authority components.\r\n   */\n  get canonicalAuthorityUrlComponents() {\n    if (!this._canonicalAuthorityUrlComponents) {\n      this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();\n    }\n    return this._canonicalAuthorityUrlComponents;\n  }\n  /**\r\n   * Get hostname and port i.e. login.microsoftonline.com\r\n   */\n  get hostnameAndPort() {\n    return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\n  }\n  /**\r\n   * Get tenant for authority.\r\n   */\n  get tenant() {\n    return this.canonicalAuthorityUrlComponents.PathSegments[0];\n  }\n  /**\r\n   * OAuth /authorize endpoint for requests\r\n   */\n  get authorizationEndpoint() {\n    if (this.discoveryComplete()) {\n      return this.replacePath(this.metadata.authorization_endpoint);\n    } else {\n      throw createClientAuthError(endpointResolutionError);\n    }\n  }\n  /**\r\n   * OAuth /token endpoint for requests\r\n   */\n  get tokenEndpoint() {\n    if (this.discoveryComplete()) {\n      return this.replacePath(this.metadata.token_endpoint);\n    } else {\n      throw createClientAuthError(endpointResolutionError);\n    }\n  }\n  get deviceCodeEndpoint() {\n    if (this.discoveryComplete()) {\n      return this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\n    } else {\n      throw createClientAuthError(endpointResolutionError);\n    }\n  }\n  /**\r\n   * OAuth logout endpoint for requests\r\n   */\n  get endSessionEndpoint() {\n    if (this.discoveryComplete()) {\n      // ROPC policies may not have end_session_endpoint set\n      if (!this.metadata.end_session_endpoint) {\n        throw createClientAuthError(endSessionEndpointNotSupported);\n      }\n      return this.replacePath(this.metadata.end_session_endpoint);\n    } else {\n      throw createClientAuthError(endpointResolutionError);\n    }\n  }\n  /**\r\n   * OAuth issuer for requests\r\n   */\n  get selfSignedJwtAudience() {\n    if (this.discoveryComplete()) {\n      return this.replacePath(this.metadata.issuer);\n    } else {\n      throw createClientAuthError(endpointResolutionError);\n    }\n  }\n  /**\r\n   * Jwks_uri for token signing keys\r\n   */\n  get jwksUri() {\n    if (this.discoveryComplete()) {\n      return this.replacePath(this.metadata.jwks_uri);\n    } else {\n      throw createClientAuthError(endpointResolutionError);\n    }\n  }\n  /**\r\n   * Returns a flag indicating that tenant name can be replaced in authority {@link IUri}\r\n   * @param authorityUri {@link IUri}\r\n   * @private\r\n   */\n  canReplaceTenant(authorityUri) {\n    return authorityUri.PathSegments.length === 1 && !Authority.reservedTenantDomains.has(authorityUri.PathSegments[0]) && this.getAuthorityType(authorityUri) === AuthorityType.Default && this.protocolMode === ProtocolMode.AAD;\n  }\n  /**\r\n   * Replaces tenant in url path with current tenant. Defaults to common.\r\n   * @param urlString\r\n   */\n  replaceTenant(urlString) {\n    return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\n  }\n  /**\r\n   * Replaces path such as tenant or policy with the current tenant or policy.\r\n   * @param urlString\r\n   */\n  replacePath(urlString) {\n    let endpoint = urlString;\n    const cachedAuthorityUrl = new UrlString(this.metadata.canonical_authority);\n    const cachedAuthorityUrlComponents = cachedAuthorityUrl.getUrlComponents();\n    const cachedAuthorityParts = cachedAuthorityUrlComponents.PathSegments;\n    const currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\n    currentAuthorityParts.forEach((currentPart, index) => {\n      let cachedPart = cachedAuthorityParts[index];\n      if (index === 0 && this.canReplaceTenant(cachedAuthorityUrlComponents)) {\n        const tenantId = new UrlString(this.metadata.authorization_endpoint).getUrlComponents().PathSegments[0];\n        /**\r\n         * Check if AAD canonical authority contains tenant domain name, for example \"testdomain.onmicrosoft.com\",\r\n         * by comparing its first path segment to the corresponding authorization endpoint path segment, which is\r\n         * always resolved with tenant id by OIDC.\r\n         */\n        if (cachedPart !== tenantId) {\n          this.logger.verbose(`Replacing tenant domain name ${cachedPart} with id ${tenantId}`);\n          cachedPart = tenantId;\n        }\n      }\n      if (currentPart !== cachedPart) {\n        endpoint = endpoint.replace(`/${cachedPart}/`, `/${currentPart}/`);\n      }\n    });\n    return this.replaceTenant(endpoint);\n  }\n  /**\r\n   * The default open id configuration endpoint for any canonical authority.\r\n   */\n  get defaultOpenIdConfigurationEndpoint() {\n    const canonicalAuthorityHost = this.hostnameAndPort;\n    if (this.canonicalAuthority.endsWith(\"v2.0/\") || this.authorityType === AuthorityType.Adfs || this.protocolMode !== ProtocolMode.AAD && !this.isAliasOfKnownMicrosoftAuthority(canonicalAuthorityHost)) {\n      return `${this.canonicalAuthority}.well-known/openid-configuration`;\n    }\n    return `${this.canonicalAuthority}v2.0/.well-known/openid-configuration`;\n  }\n  /**\r\n   * Boolean that returns whether or not tenant discovery has been completed.\r\n   */\n  discoveryComplete() {\n    return !!this.metadata;\n  }\n  /**\r\n   * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\r\n   * and the /authorize, /token and logout endpoints.\r\n   */\n  async resolveEndpointsAsync() {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityResolveEndpointsAsync, this.correlationId);\n    const metadataEntity = this.getCurrentMetadataEntity();\n    const cloudDiscoverySource = await invokeAsync(this.updateCloudDiscoveryMetadata.bind(this), PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.logger, this.performanceClient, this.correlationId)(metadataEntity);\n    this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\n    const endpointSource = await invokeAsync(this.updateEndpointMetadata.bind(this), PerformanceEvents.AuthorityUpdateEndpointMetadata, this.logger, this.performanceClient, this.correlationId)(metadataEntity);\n    this.updateCachedMetadata(metadataEntity, cloudDiscoverySource, {\n      source: endpointSource\n    });\n    this.performanceClient?.addFields({\n      cloudDiscoverySource: cloudDiscoverySource,\n      authorityEndpointSource: endpointSource\n    }, this.correlationId);\n  }\n  /**\r\n   * Returns metadata entity from cache if it exists, otherwiser returns a new metadata entity built\r\n   * from the configured canonical authority\r\n   * @returns\r\n   */\n  getCurrentMetadataEntity() {\n    let metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\n    if (!metadataEntity) {\n      metadataEntity = {\n        aliases: [],\n        preferred_cache: this.hostnameAndPort,\n        preferred_network: this.hostnameAndPort,\n        canonical_authority: this.canonicalAuthority,\n        authorization_endpoint: \"\",\n        token_endpoint: \"\",\n        end_session_endpoint: \"\",\n        issuer: \"\",\n        aliasesFromNetwork: false,\n        endpointsFromNetwork: false,\n        expiresAt: generateAuthorityMetadataExpiresAt(),\n        jwks_uri: \"\"\n      };\n    }\n    return metadataEntity;\n  }\n  /**\r\n   * Updates cached metadata based on metadata source and sets the instance's metadata\r\n   * property to the same value\r\n   * @param metadataEntity\r\n   * @param cloudDiscoverySource\r\n   * @param endpointMetadataResult\r\n   */\n  updateCachedMetadata(metadataEntity, cloudDiscoverySource, endpointMetadataResult) {\n    if (cloudDiscoverySource !== AuthorityMetadataSource.CACHE && endpointMetadataResult?.source !== AuthorityMetadataSource.CACHE) {\n      // Reset the expiration time unless both values came from a successful cache lookup\n      metadataEntity.expiresAt = generateAuthorityMetadataExpiresAt();\n      metadataEntity.canonical_authority = this.canonicalAuthority;\n    }\n    const cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\n    this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\n    this.metadata = metadataEntity;\n  }\n  /**\r\n   * Update AuthorityMetadataEntity with new endpoints and return where the information came from\r\n   * @param metadataEntity\r\n   */\n  async updateEndpointMetadata(metadataEntity) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityUpdateEndpointMetadata, this.correlationId);\n    const localMetadata = this.updateEndpointMetadataFromLocalSources(metadataEntity);\n    // Further update may be required for hardcoded metadata if regional metadata is preferred\n    if (localMetadata) {\n      if (localMetadata.source === AuthorityMetadataSource.HARDCODED_VALUES) {\n        // If the user prefers to use an azure region replace the global endpoints with regional information.\n        if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {\n          if (localMetadata.metadata) {\n            const hardcodedMetadata = await invokeAsync(this.updateMetadataWithRegionalInformation.bind(this), PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.logger, this.performanceClient, this.correlationId)(localMetadata.metadata);\n            updateAuthorityEndpointMetadata(metadataEntity, hardcodedMetadata, false);\n            metadataEntity.canonical_authority = this.canonicalAuthority;\n          }\n        }\n      }\n      return localMetadata.source;\n    }\n    // Get metadata from network if local sources aren't available\n    let metadata = await invokeAsync(this.getEndpointMetadataFromNetwork.bind(this), PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.logger, this.performanceClient, this.correlationId)();\n    if (metadata) {\n      // If the user prefers to use an azure region replace the global endpoints with regional information.\n      if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {\n        metadata = await invokeAsync(this.updateMetadataWithRegionalInformation.bind(this), PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.logger, this.performanceClient, this.correlationId)(metadata);\n      }\n      updateAuthorityEndpointMetadata(metadataEntity, metadata, true);\n      return AuthorityMetadataSource.NETWORK;\n    } else {\n      // Metadata could not be obtained from the config, cache, network or hardcoded values\n      throw createClientAuthError(openIdConfigError, this.defaultOpenIdConfigurationEndpoint);\n    }\n  }\n  /**\r\n   * Updates endpoint metadata from local sources and returns where the information was retrieved from and the metadata config\r\n   * response if the source is hardcoded metadata\r\n   * @param metadataEntity\r\n   * @returns\r\n   */\n  updateEndpointMetadataFromLocalSources(metadataEntity) {\n    this.logger.verbose(\"Attempting to get endpoint metadata from authority configuration\");\n    const configMetadata = this.getEndpointMetadataFromConfig();\n    if (configMetadata) {\n      this.logger.verbose(\"Found endpoint metadata in authority configuration\");\n      updateAuthorityEndpointMetadata(metadataEntity, configMetadata, false);\n      return {\n        source: AuthorityMetadataSource.CONFIG\n      };\n    }\n    this.logger.verbose(\"Did not find endpoint metadata in the config... Attempting to get endpoint metadata from the hardcoded values.\");\n    // skipAuthorityMetadataCache is used to bypass hardcoded authority metadata and force a network metadata cache lookup and network metadata request if no cached response is available.\n    if (this.authorityOptions.skipAuthorityMetadataCache) {\n      this.logger.verbose(\"Skipping hardcoded metadata cache since skipAuthorityMetadataCache is set to true. Attempting to get endpoint metadata from the network metadata cache.\");\n    } else {\n      const hardcodedMetadata = this.getEndpointMetadataFromHardcodedValues();\n      if (hardcodedMetadata) {\n        updateAuthorityEndpointMetadata(metadataEntity, hardcodedMetadata, false);\n        return {\n          source: AuthorityMetadataSource.HARDCODED_VALUES,\n          metadata: hardcodedMetadata\n        };\n      } else {\n        this.logger.verbose(\"Did not find endpoint metadata in hardcoded values... Attempting to get endpoint metadata from the network metadata cache.\");\n      }\n    }\n    // Check cached metadata entity expiration status\n    const metadataEntityExpired = isAuthorityMetadataExpired(metadataEntity);\n    if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntityExpired) {\n      // No need to update\n      this.logger.verbose(\"Found endpoint metadata in the cache.\");\n      return {\n        source: AuthorityMetadataSource.CACHE\n      };\n    } else if (metadataEntityExpired) {\n      this.logger.verbose(\"The metadata entity is expired.\");\n    }\n    return null;\n  }\n  /**\r\n   * Compares the number of url components after the domain to determine if the cached\r\n   * authority metadata can be used for the requested authority. Protects against same domain different\r\n   * authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\r\n   * @param metadataEntity\r\n   */\n  isAuthoritySameType(metadataEntity) {\n    const cachedAuthorityUrl = new UrlString(metadataEntity.canonical_authority);\n    const cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n    return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;\n  }\n  /**\r\n   * Parse authorityMetadata config option\r\n   */\n  getEndpointMetadataFromConfig() {\n    if (this.authorityOptions.authorityMetadata) {\n      try {\n        return JSON.parse(this.authorityOptions.authorityMetadata);\n      } catch (e) {\n        throw createClientConfigurationError(invalidAuthorityMetadata);\n      }\n    }\n    return null;\n  }\n  /**\r\n   * Gets OAuth endpoints from the given OpenID configuration endpoint.\r\n   *\r\n   * @param hasHardcodedMetadata boolean\r\n   */\n  async getEndpointMetadataFromNetwork() {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.correlationId);\n    const options = {};\n    /*\r\n     * TODO: Add a timeout if the authority exists in our library's\r\n     * hardcoded list of metadata\r\n     */\n    const openIdConfigurationEndpoint = this.defaultOpenIdConfigurationEndpoint;\n    this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: attempting to retrieve OAuth endpoints from ${openIdConfigurationEndpoint}`);\n    try {\n      const response = await this.networkInterface.sendGetRequestAsync(openIdConfigurationEndpoint, options);\n      const isValidResponse = isOpenIdConfigResponse(response.body);\n      if (isValidResponse) {\n        return response.body;\n      } else {\n        this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: could not parse response as OpenID configuration`);\n        return null;\n      }\n    } catch (e) {\n      this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: ${e}`);\n      return null;\n    }\n  }\n  /**\r\n   * Get OAuth endpoints for common authorities.\r\n   */\n  getEndpointMetadataFromHardcodedValues() {\n    if (this.hostnameAndPort in EndpointMetadata) {\n      return EndpointMetadata[this.hostnameAndPort];\n    }\n    return null;\n  }\n  /**\r\n   * Update the retrieved metadata with regional information.\r\n   * User selected Azure region will be used if configured.\r\n   */\n  async updateMetadataWithRegionalInformation(metadata) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.correlationId);\n    const userConfiguredAzureRegion = this.authorityOptions.azureRegionConfiguration?.azureRegion;\n    if (userConfiguredAzureRegion) {\n      if (userConfiguredAzureRegion !== Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) {\n        this.regionDiscoveryMetadata.region_outcome = RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\n        this.regionDiscoveryMetadata.region_used = userConfiguredAzureRegion;\n        return Authority.replaceWithRegionalInformation(metadata, userConfiguredAzureRegion);\n      }\n      const autodetectedRegionName = await invokeAsync(this.regionDiscovery.detectRegion.bind(this.regionDiscovery), PerformanceEvents.RegionDiscoveryDetectRegion, this.logger, this.performanceClient, this.correlationId)(this.authorityOptions.azureRegionConfiguration?.environmentRegion, this.regionDiscoveryMetadata);\n      if (autodetectedRegionName) {\n        this.regionDiscoveryMetadata.region_outcome = RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL;\n        this.regionDiscoveryMetadata.region_used = autodetectedRegionName;\n        return Authority.replaceWithRegionalInformation(metadata, autodetectedRegionName);\n      }\n      this.regionDiscoveryMetadata.region_outcome = RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\n    }\n    return metadata;\n  }\n  /**\r\n   * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache\r\n   * and returns where the information was retrieved from\r\n   * @param metadataEntity\r\n   * @returns AuthorityMetadataSource\r\n   */\n  async updateCloudDiscoveryMetadata(metadataEntity) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.correlationId);\n    const localMetadataSource = this.updateCloudDiscoveryMetadataFromLocalSources(metadataEntity);\n    if (localMetadataSource) {\n      return localMetadataSource;\n    }\n    // Fallback to network as metadata source\n    const metadata = await invokeAsync(this.getCloudDiscoveryMetadataFromNetwork.bind(this), PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.logger, this.performanceClient, this.correlationId)();\n    if (metadata) {\n      updateCloudDiscoveryMetadata(metadataEntity, metadata, true);\n      return AuthorityMetadataSource.NETWORK;\n    }\n    // Metadata could not be obtained from the config, cache, network or hardcoded values\n    throw createClientConfigurationError(untrustedAuthority);\n  }\n  updateCloudDiscoveryMetadataFromLocalSources(metadataEntity) {\n    this.logger.verbose(\"Attempting to get cloud discovery metadata  from authority configuration\");\n    this.logger.verbosePii(`Known Authorities: ${this.authorityOptions.knownAuthorities || Constants.NOT_APPLICABLE}`);\n    this.logger.verbosePii(`Authority Metadata: ${this.authorityOptions.authorityMetadata || Constants.NOT_APPLICABLE}`);\n    this.logger.verbosePii(`Canonical Authority: ${metadataEntity.canonical_authority || Constants.NOT_APPLICABLE}`);\n    const metadata = this.getCloudDiscoveryMetadataFromConfig();\n    if (metadata) {\n      this.logger.verbose(\"Found cloud discovery metadata in authority configuration\");\n      updateCloudDiscoveryMetadata(metadataEntity, metadata, false);\n      return AuthorityMetadataSource.CONFIG;\n    }\n    // If the cached metadata came from config but that config was not passed to this instance, we must go to hardcoded values\n    this.logger.verbose(\"Did not find cloud discovery metadata in the config... Attempting to get cloud discovery metadata from the hardcoded values.\");\n    if (this.options.skipAuthorityMetadataCache) {\n      this.logger.verbose(\"Skipping hardcoded cloud discovery metadata cache since skipAuthorityMetadataCache is set to true. Attempting to get cloud discovery metadata from the network metadata cache.\");\n    } else {\n      const hardcodedMetadata = getCloudDiscoveryMetadataFromHardcodedValues(this.hostnameAndPort);\n      if (hardcodedMetadata) {\n        this.logger.verbose(\"Found cloud discovery metadata from hardcoded values.\");\n        updateCloudDiscoveryMetadata(metadataEntity, hardcodedMetadata, false);\n        return AuthorityMetadataSource.HARDCODED_VALUES;\n      }\n      this.logger.verbose(\"Did not find cloud discovery metadata in hardcoded values... Attempting to get cloud discovery metadata from the network metadata cache.\");\n    }\n    const metadataEntityExpired = isAuthorityMetadataExpired(metadataEntity);\n    if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntityExpired) {\n      this.logger.verbose(\"Found cloud discovery metadata in the cache.\");\n      // No need to update\n      return AuthorityMetadataSource.CACHE;\n    } else if (metadataEntityExpired) {\n      this.logger.verbose(\"The metadata entity is expired.\");\n    }\n    return null;\n  }\n  /**\r\n   * Parse cloudDiscoveryMetadata config or check knownAuthorities\r\n   */\n  getCloudDiscoveryMetadataFromConfig() {\n    // CIAM does not support cloud discovery metadata\n    if (this.authorityType === AuthorityType.Ciam) {\n      this.logger.verbose(\"CIAM authorities do not support cloud discovery metadata, generate the aliases from authority host.\");\n      return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n    }\n    // Check if network response was provided in config\n    if (this.authorityOptions.cloudDiscoveryMetadata) {\n      this.logger.verbose(\"The cloud discovery metadata has been provided as a network response, in the config.\");\n      try {\n        this.logger.verbose(\"Attempting to parse the cloud discovery metadata.\");\n        const parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata);\n        const metadata = getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);\n        this.logger.verbose(\"Parsed the cloud discovery metadata.\");\n        if (metadata) {\n          this.logger.verbose(\"There is returnable metadata attached to the parsed cloud discovery metadata.\");\n          return metadata;\n        } else {\n          this.logger.verbose(\"There is no metadata attached to the parsed cloud discovery metadata.\");\n        }\n      } catch (e) {\n        this.logger.verbose(\"Unable to parse the cloud discovery metadata. Throwing Invalid Cloud Discovery Metadata Error.\");\n        throw createClientConfigurationError(invalidCloudDiscoveryMetadata);\n      }\n    }\n    // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\n    if (this.isInKnownAuthorities()) {\n      this.logger.verbose(\"The host is included in knownAuthorities. Creating new cloud discovery metadata from the host.\");\n      return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n    }\n    return null;\n  }\n  /**\r\n   * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\r\n   *\r\n   * @param hasHardcodedMetadata boolean\r\n   */\n  async getCloudDiscoveryMetadataFromNetwork() {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.correlationId);\n    const instanceDiscoveryEndpoint = `${Constants.AAD_INSTANCE_DISCOVERY_ENDPT}${this.canonicalAuthority}oauth2/v2.0/authorize`;\n    const options = {};\n    /*\r\n     * TODO: Add a timeout if the authority exists in our library's\r\n     * hardcoded list of metadata\r\n     */\n    let match = null;\n    try {\n      const response = await this.networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint, options);\n      let typedResponseBody;\n      let metadata;\n      if (isCloudInstanceDiscoveryResponse(response.body)) {\n        typedResponseBody = response.body;\n        metadata = typedResponseBody.metadata;\n        this.logger.verbosePii(`tenant_discovery_endpoint is: ${typedResponseBody.tenant_discovery_endpoint}`);\n      } else if (isCloudInstanceDiscoveryErrorResponse(response.body)) {\n        this.logger.warning(`A CloudInstanceDiscoveryErrorResponse was returned. The cloud instance discovery network request's status code is: ${response.status}`);\n        typedResponseBody = response.body;\n        if (typedResponseBody.error === Constants.INVALID_INSTANCE) {\n          this.logger.error(\"The CloudInstanceDiscoveryErrorResponse error is invalid_instance.\");\n          return null;\n        }\n        this.logger.warning(`The CloudInstanceDiscoveryErrorResponse error is ${typedResponseBody.error}`);\n        this.logger.warning(`The CloudInstanceDiscoveryErrorResponse error description is ${typedResponseBody.error_description}`);\n        this.logger.warning(\"Setting the value of the CloudInstanceDiscoveryMetadata (returned from the network) to []\");\n        metadata = [];\n      } else {\n        this.logger.error(\"AAD did not return a CloudInstanceDiscoveryResponse or CloudInstanceDiscoveryErrorResponse\");\n        return null;\n      }\n      this.logger.verbose(\"Attempting to find a match between the developer's authority and the CloudInstanceDiscoveryMetadata returned from the network request.\");\n      match = getCloudDiscoveryMetadataFromNetworkResponse(metadata, this.hostnameAndPort);\n    } catch (error) {\n      if (error instanceof AuthError) {\n        this.logger.error(`There was a network error while attempting to get the cloud discovery instance metadata.\\nError: ${error.errorCode}\\nError Description: ${error.errorMessage}`);\n      } else {\n        const typedError = error;\n        this.logger.error(`A non-MSALJS error was thrown while attempting to get the cloud instance discovery metadata.\\nError: ${typedError.name}\\nError Description: ${typedError.message}`);\n      }\n      return null;\n    }\n    // Custom Domain scenario, host is trusted because Instance Discovery call succeeded\n    if (!match) {\n      this.logger.warning(\"The developer's authority was not found within the CloudInstanceDiscoveryMetadata returned from the network request.\");\n      this.logger.verbose(\"Creating custom Authority for custom domain scenario.\");\n      match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n    }\n    return match;\n  }\n  /**\r\n   * Helper function to determine if this host is included in the knownAuthorities config option\r\n   */\n  isInKnownAuthorities() {\n    const matches = this.authorityOptions.knownAuthorities.filter(authority => {\n      return authority && UrlString.getDomainFromUrl(authority).toLowerCase() === this.hostnameAndPort;\n    });\n    return matches.length > 0;\n  }\n  /**\r\n   * helper function to populate the authority based on azureCloudOptions\r\n   * @param authorityString\r\n   * @param azureCloudOptions\r\n   */\n  static generateAuthority(authorityString, azureCloudOptions) {\n    let authorityAzureCloudInstance;\n    if (azureCloudOptions && azureCloudOptions.azureCloudInstance !== AzureCloudInstance.None) {\n      const tenant = azureCloudOptions.tenant ? azureCloudOptions.tenant : Constants.DEFAULT_COMMON_TENANT;\n      authorityAzureCloudInstance = `${azureCloudOptions.azureCloudInstance}/${tenant}/`;\n    }\n    return authorityAzureCloudInstance ? authorityAzureCloudInstance : authorityString;\n  }\n  /**\r\n   * Creates cloud discovery metadata object from a given host\r\n   * @param host\r\n   */\n  static createCloudDiscoveryMetadataFromHost(host) {\n    return {\n      preferred_network: host,\n      preferred_cache: host,\n      aliases: [host]\n    };\n  }\n  /**\r\n   * helper function to generate environment from authority object\r\n   */\n  getPreferredCache() {\n    if (this.managedIdentity) {\n      return Constants.DEFAULT_AUTHORITY_HOST;\n    } else if (this.discoveryComplete()) {\n      return this.metadata.preferred_cache;\n    } else {\n      throw createClientAuthError(endpointResolutionError);\n    }\n  }\n  /**\r\n   * Returns whether or not the provided host is an alias of this authority instance\r\n   * @param host\r\n   */\n  isAlias(host) {\n    return this.metadata.aliases.indexOf(host) > -1;\n  }\n  /**\r\n   * Returns whether or not the provided host is an alias of a known Microsoft authority for purposes of endpoint discovery\r\n   * @param host\r\n   */\n  isAliasOfKnownMicrosoftAuthority(host) {\n    return InstanceDiscoveryMetadataAliases.has(host);\n  }\n  /**\r\n   * Checks whether the provided host is that of a public cloud authority\r\n   *\r\n   * @param authority string\r\n   * @returns bool\r\n   */\n  static isPublicCloudAuthority(host) {\n    return Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\n  }\n  /**\r\n   * Rebuild the authority string with the region\r\n   *\r\n   * @param host string\r\n   * @param region string\r\n   */\n  static buildRegionalAuthorityString(host, region, queryString) {\n    // Create and validate a Url string object with the initial authority string\n    const authorityUrlInstance = new UrlString(host);\n    authorityUrlInstance.validateAsUri();\n    const authorityUrlParts = authorityUrlInstance.getUrlComponents();\n    let hostNameAndPort = `${region}.${authorityUrlParts.HostNameAndPort}`;\n    if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\n      hostNameAndPort = `${region}.${Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX}`;\n    }\n    // Include the query string portion of the url\n    const url = UrlString.constructAuthorityUriFromObject({\n      ...authorityUrlInstance.getUrlComponents(),\n      HostNameAndPort: hostNameAndPort\n    }).urlString;\n    // Add the query string if a query string was provided\n    if (queryString) return `${url}?${queryString}`;\n    return url;\n  }\n  /**\r\n   * Replace the endpoints in the metadata object with their regional equivalents.\r\n   *\r\n   * @param metadata OpenIdConfigResponse\r\n   * @param azureRegion string\r\n   */\n  static replaceWithRegionalInformation(metadata, azureRegion) {\n    const regionalMetadata = {\n      ...metadata\n    };\n    regionalMetadata.authorization_endpoint = Authority.buildRegionalAuthorityString(regionalMetadata.authorization_endpoint, azureRegion);\n    regionalMetadata.token_endpoint = Authority.buildRegionalAuthorityString(regionalMetadata.token_endpoint, azureRegion);\n    if (regionalMetadata.end_session_endpoint) {\n      regionalMetadata.end_session_endpoint = Authority.buildRegionalAuthorityString(regionalMetadata.end_session_endpoint, azureRegion);\n    }\n    return regionalMetadata;\n  }\n  /**\r\n   * Transform CIAM_AUTHORIY as per the below rules:\r\n   * If no path segments found and it is a CIAM authority (hostname ends with .ciamlogin.com), then transform it\r\n   *\r\n   * NOTE: The transformation path should go away once STS supports CIAM with the format: `tenantIdorDomain.ciamlogin.com`\r\n   * `ciamlogin.com` can also change in the future and we should accommodate the same\r\n   *\r\n   * @param authority\r\n   */\n  static transformCIAMAuthority(authority) {\n    let ciamAuthority = authority;\n    const authorityUrl = new UrlString(authority);\n    const authorityUrlComponents = authorityUrl.getUrlComponents();\n    // check if transformation is needed\n    if (authorityUrlComponents.PathSegments.length === 0 && authorityUrlComponents.HostNameAndPort.endsWith(Constants.CIAM_AUTH_URL)) {\n      const tenantIdOrDomain = authorityUrlComponents.HostNameAndPort.split(\".\")[0];\n      ciamAuthority = `${ciamAuthority}${tenantIdOrDomain}${Constants.AAD_TENANT_DOMAIN_SUFFIX}`;\n    }\n    return ciamAuthority;\n  }\n}\n// Reserved tenant domain names that will not be replaced with tenant id\nAuthority.reservedTenantDomains = new Set([\"{tenant}\", \"{tenantid}\", AADAuthorityConstants.COMMON, AADAuthorityConstants.CONSUMERS, AADAuthorityConstants.ORGANIZATIONS]);\n/**\r\n * Extract tenantId from authority\r\n */\nfunction getTenantFromAuthorityString(authority) {\n  const authorityUrl = new UrlString(authority);\n  const authorityUrlComponents = authorityUrl.getUrlComponents();\n  /**\r\n   * For credential matching purposes, tenantId is the last path segment of the authority URL:\r\n   *  AAD Authority - domain/tenantId -> Credentials are cached with realm = tenantId\r\n   *  B2C Authority - domain/{tenantId}?/.../policy -> Credentials are cached with realm = policy\r\n   *  tenantId is downcased because B2C policies can have mixed case but tfp claim is downcased\r\n   *\r\n   * Note that we may not have any path segments in certain OIDC scenarios.\r\n   */\n  const tenantId = authorityUrlComponents.PathSegments.slice(-1)[0]?.toLowerCase();\n  switch (tenantId) {\n    case AADAuthorityConstants.COMMON:\n    case AADAuthorityConstants.ORGANIZATIONS:\n    case AADAuthorityConstants.CONSUMERS:\n      return undefined;\n    default:\n      return tenantId;\n  }\n}\nfunction formatAuthorityUri(authorityUri) {\n  return authorityUri.endsWith(Constants.FORWARD_SLASH) ? authorityUri : `${authorityUri}${Constants.FORWARD_SLASH}`;\n}\nfunction buildStaticAuthorityOptions(authOptions) {\n  const rawCloudDiscoveryMetadata = authOptions.cloudDiscoveryMetadata;\n  let cloudDiscoveryMetadata = undefined;\n  if (rawCloudDiscoveryMetadata) {\n    try {\n      cloudDiscoveryMetadata = JSON.parse(rawCloudDiscoveryMetadata);\n    } catch (e) {\n      throw createClientConfigurationError(invalidCloudDiscoveryMetadata);\n    }\n  }\n  return {\n    canonicalAuthority: authOptions.authority ? formatAuthorityUri(authOptions.authority) : undefined,\n    knownAuthorities: authOptions.knownAuthorities,\n    cloudDiscoveryMetadata: cloudDiscoveryMetadata\n  };\n}\nexport { Authority, buildStaticAuthorityOptions, formatAuthorityUri, getTenantFromAuthorityString };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\nimport { AuthError } from './AuthError.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Represents network related errors\r\n */\nclass NetworkError extends AuthError {\n  constructor(error, httpStatus, responseHeaders) {\n    super(error.errorCode, error.errorMessage, error.subError);\n    Object.setPrototypeOf(this, NetworkError.prototype);\n    this.name = \"NetworkError\";\n    this.error = error;\n    this.httpStatus = httpStatus;\n    this.responseHeaders = responseHeaders;\n  }\n}\n/**\r\n * Creates NetworkError object for a failed network request\r\n * @param error - Error to be thrown back to the caller\r\n * @param httpStatus - Status code of the network request\r\n * @param responseHeaders - Response headers of the network request, when available\r\n * @returns NetworkError object\r\n */\nfunction createNetworkError(error, httpStatus, responseHeaders) {\n  return new NetworkError(error, httpStatus, responseHeaders);\n}\nexport { NetworkError, createNetworkError };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n// Codes defined by MSAL\nconst noTokensFound = \"no_tokens_found\";\nconst nativeAccountUnavailable = \"native_account_unavailable\";\nconst refreshTokenExpired = \"refresh_token_expired\";\n// Codes potentially returned by server\nconst interactionRequired = \"interaction_required\";\nconst consentRequired = \"consent_required\";\nconst loginRequired = \"login_required\";\nconst badToken = \"bad_token\";\nexport { badToken, consentRequired, interactionRequired, loginRequired, nativeAccountUnavailable, noTokensFound, refreshTokenExpired };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\nimport { Constants } from '../utils/Constants.mjs';\nimport { AuthError } from './AuthError.mjs';\nimport { noTokensFound, nativeAccountUnavailable, badToken, refreshTokenExpired, interactionRequired, consentRequired, loginRequired } from './InteractionRequiredAuthErrorCodes.mjs';\nimport * as InteractionRequiredAuthErrorCodes from './InteractionRequiredAuthErrorCodes.mjs';\nexport { InteractionRequiredAuthErrorCodes };\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * InteractionRequiredServerErrorMessage contains string constants used by error codes and messages returned by the server indicating interaction is required\r\n */\nconst InteractionRequiredServerErrorMessage = [interactionRequired, consentRequired, loginRequired, badToken];\nconst InteractionRequiredAuthSubErrorMessage = [\"message_only\", \"additional_action\", \"basic_action\", \"user_password_expired\", \"consent_required\", \"bad_token\"];\nconst InteractionRequiredAuthErrorMessages = {\n  [noTokensFound]: \"No refresh token found in the cache. Please sign-in.\",\n  [nativeAccountUnavailable]: \"The requested account is not available in the native broker. It may have been deleted or logged out. Please sign-in again using an interactive API.\",\n  [refreshTokenExpired]: \"Refresh token has expired.\",\n  [badToken]: \"Identity provider returned bad_token due to an expired or invalid refresh token. Please invoke an interactive API to resolve.\"\n};\n/**\r\n * Interaction required errors defined by the SDK\r\n * @deprecated Use InteractionRequiredAuthErrorCodes instead\r\n */\nconst InteractionRequiredAuthErrorMessage = {\n  noTokensFoundError: {\n    code: noTokensFound,\n    desc: InteractionRequiredAuthErrorMessages[noTokensFound]\n  },\n  native_account_unavailable: {\n    code: nativeAccountUnavailable,\n    desc: InteractionRequiredAuthErrorMessages[nativeAccountUnavailable]\n  },\n  bad_token: {\n    code: badToken,\n    desc: InteractionRequiredAuthErrorMessages[badToken]\n  }\n};\n/**\r\n * Error thrown when user interaction is required.\r\n */\nclass InteractionRequiredAuthError extends AuthError {\n  constructor(errorCode, errorMessage, subError, timestamp, traceId, correlationId, claims, errorNo) {\n    super(errorCode, errorMessage, subError);\n    Object.setPrototypeOf(this, InteractionRequiredAuthError.prototype);\n    this.timestamp = timestamp || Constants.EMPTY_STRING;\n    this.traceId = traceId || Constants.EMPTY_STRING;\n    this.correlationId = correlationId || Constants.EMPTY_STRING;\n    this.claims = claims || Constants.EMPTY_STRING;\n    this.name = \"InteractionRequiredAuthError\";\n    this.errorNo = errorNo;\n  }\n}\n/**\r\n * Helper function used to determine if an error thrown by the server requires interaction to resolve\r\n * @param errorCode\r\n * @param errorString\r\n * @param subError\r\n */\nfunction isInteractionRequiredError(errorCode, errorString, subError) {\n  const isInteractionRequiredErrorCode = !!errorCode && InteractionRequiredServerErrorMessage.indexOf(errorCode) > -1;\n  const isInteractionRequiredSubError = !!subError && InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;\n  const isInteractionRequiredErrorDesc = !!errorString && InteractionRequiredServerErrorMessage.some(irErrorCode => {\n    return errorString.indexOf(irErrorCode) > -1;\n  });\n  return isInteractionRequiredErrorCode || isInteractionRequiredErrorDesc || isInteractionRequiredSubError;\n}\n/**\r\n * Creates an InteractionRequiredAuthError\r\n */\nfunction createInteractionRequiredAuthError(errorCode) {\n  return new InteractionRequiredAuthError(errorCode, InteractionRequiredAuthErrorMessages[errorCode]);\n}\nexport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage, InteractionRequiredAuthSubErrorMessage, InteractionRequiredServerErrorMessage, createInteractionRequiredAuthError, isInteractionRequiredError };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { methodNotImplemented } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst StubbedNetworkModule = {\n  sendGetRequestAsync: () => {\n    return Promise.reject(createClientAuthError(methodNotImplemented));\n  },\n  sendPostRequestAsync: () => {\n    return Promise.reject(createClientAuthError(methodNotImplemented));\n  }\n};\nexport { StubbedNetworkModule };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst missingKidError = \"missing_kid_error\";\nconst missingAlgError = \"missing_alg_error\";\nexport { missingAlgError, missingKidError };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\nimport { AuthError } from './AuthError.mjs';\nimport { missingKidError, missingAlgError } from './JoseHeaderErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst JoseHeaderErrorMessages = {\n  [missingKidError]: \"The JOSE Header for the requested JWT, JWS or JWK object requires a keyId to be configured as the 'kid' header claim. No 'kid' value was provided.\",\n  [missingAlgError]: \"The JOSE Header for the requested JWT, JWS or JWK object requires an algorithm to be specified as the 'alg' header claim. No 'alg' value was provided.\"\n};\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */\nclass JoseHeaderError extends AuthError {\n  constructor(errorCode, errorMessage) {\n    super(errorCode, errorMessage);\n    this.name = \"JoseHeaderError\";\n    Object.setPrototypeOf(this, JoseHeaderError.prototype);\n  }\n}\n/** Returns JoseHeaderError object */\nfunction createJoseHeaderError(code) {\n  return new JoseHeaderError(code, JoseHeaderErrorMessages[code]);\n}\nexport { JoseHeaderError, JoseHeaderErrorMessages, createJoseHeaderError };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\nimport { createJoseHeaderError } from '../error/JoseHeaderError.mjs';\nimport { JsonWebTokenTypes } from '../utils/Constants.mjs';\nimport { missingKidError, missingAlgError } from '../error/JoseHeaderErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/** @internal */\nclass JoseHeader {\n  constructor(options) {\n    this.typ = options.typ;\n    this.alg = options.alg;\n    this.kid = options.kid;\n  }\n  /**\r\n   * Builds SignedHttpRequest formatted JOSE Header from the\r\n   * JOSE Header options provided or previously set on the object and returns\r\n   * the stringified header object.\r\n   * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.\r\n   * @param shrHeaderOptions\r\n   * @returns\r\n   */\n  static getShrHeaderString(shrHeaderOptions) {\n    // KeyID is required on the SHR header\n    if (!shrHeaderOptions.kid) {\n      throw createJoseHeaderError(missingKidError);\n    }\n    // Alg is required on the SHR header\n    if (!shrHeaderOptions.alg) {\n      throw createJoseHeaderError(missingAlgError);\n    }\n    const shrHeader = new JoseHeader({\n      // Access Token PoP headers must have type pop, but the type header can be overriden for special cases\n      typ: shrHeaderOptions.typ || JsonWebTokenTypes.Pop,\n      kid: shrHeaderOptions.kid,\n      alg: shrHeaderOptions.alg\n    });\n    return JSON.stringify(shrHeader);\n  }\n}\nexport { JoseHeader };\n", "/*! @azure/msal-common v15.2.0 2025-02-18 */\n'use strict';\n\nimport { PerformanceEventStatus } from './PerformanceEvent.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass StubPerformanceMeasurement {\n  startMeasurement() {\n    return;\n  }\n  endMeasurement() {\n    return;\n  }\n  flushMeasurement() {\n    return null;\n  }\n}\nclass StubPerformanceClient {\n  generateId() {\n    return \"callback-id\";\n  }\n  startMeasurement(measureName, correlationId) {\n    return {\n      end: () => null,\n      discard: () => {},\n      add: () => {},\n      increment: () => {},\n      event: {\n        eventId: this.generateId(),\n        status: PerformanceEventStatus.InProgress,\n        authority: \"\",\n        libraryName: \"\",\n        libraryVersion: \"\",\n        clientId: \"\",\n        name: measureName,\n        startTimeMs: Date.now(),\n        correlationId: correlationId || \"\"\n      },\n      measurement: new StubPerformanceMeasurement()\n    };\n  }\n  startPerformanceMeasurement() {\n    return new StubPerformanceMeasurement();\n  }\n  calculateQueuedTime() {\n    return 0;\n  }\n  addQueueMeasurement() {\n    return;\n  }\n  setPreQueueTime() {\n    return;\n  }\n  endMeasurement() {\n    return null;\n  }\n  discardMeasurements() {\n    return;\n  }\n  removePerformanceCallback() {\n    return true;\n  }\n  addPerformanceCallback() {\n    return \"\";\n  }\n  emitEvents() {\n    return;\n  }\n  addFields() {\n    return;\n  }\n  incrementFields() {\n    return;\n  }\n  cacheEventByCorrelationId() {\n    return;\n  }\n}\nexport { StubPerformanceClient, StubPerformanceMeasurement };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst pkceNotCreated = \"pkce_not_created\";\nconst cryptoNonExistent = \"crypto_nonexistent\";\nconst emptyNavigateUri = \"empty_navigate_uri\";\nconst hashEmptyError = \"hash_empty_error\";\nconst noStateInHash = \"no_state_in_hash\";\nconst hashDoesNotContainKnownProperties = \"hash_does_not_contain_known_properties\";\nconst unableToParseState = \"unable_to_parse_state\";\nconst stateInteractionTypeMismatch = \"state_interaction_type_mismatch\";\nconst interactionInProgress = \"interaction_in_progress\";\nconst popupWindowError = \"popup_window_error\";\nconst emptyWindowError = \"empty_window_error\";\nconst userCancelled = \"user_cancelled\";\nconst monitorPopupTimeout = \"monitor_popup_timeout\";\nconst monitorWindowTimeout = \"monitor_window_timeout\";\nconst redirectInIframe = \"redirect_in_iframe\";\nconst blockIframeReload = \"block_iframe_reload\";\nconst blockNestedPopups = \"block_nested_popups\";\nconst iframeClosedPrematurely = \"iframe_closed_prematurely\";\nconst silentLogoutUnsupported = \"silent_logout_unsupported\";\nconst noAccountError = \"no_account_error\";\nconst silentPromptValueError = \"silent_prompt_value_error\";\nconst noTokenRequestCacheError = \"no_token_request_cache_error\";\nconst unableToParseTokenRequestCacheError = \"unable_to_parse_token_request_cache_error\";\nconst noCachedAuthorityError = \"no_cached_authority_error\";\nconst authRequestNotSetError = \"auth_request_not_set_error\";\nconst invalidCacheType = \"invalid_cache_type\";\nconst nonBrowserEnvironment = \"non_browser_environment\";\nconst databaseNotOpen = \"database_not_open\";\nconst noNetworkConnectivity = \"no_network_connectivity\";\nconst postRequestFailed = \"post_request_failed\";\nconst getRequestFailed = \"get_request_failed\";\nconst failedToParseResponse = \"failed_to_parse_response\";\nconst unableToLoadToken = \"unable_to_load_token\";\nconst cryptoKeyNotFound = \"crypto_key_not_found\";\nconst authCodeRequired = \"auth_code_required\";\nconst authCodeOrNativeAccountIdRequired = \"auth_code_or_nativeAccountId_required\";\nconst spaCodeAndNativeAccountIdPresent = \"spa_code_and_nativeAccountId_present\";\nconst databaseUnavailable = \"database_unavailable\";\nconst unableToAcquireTokenFromNativePlatform = \"unable_to_acquire_token_from_native_platform\";\nconst nativeHandshakeTimeout = \"native_handshake_timeout\";\nconst nativeExtensionNotInstalled = \"native_extension_not_installed\";\nconst nativeConnectionNotEstablished = \"native_connection_not_established\";\nconst uninitializedPublicClientApplication = \"uninitialized_public_client_application\";\nconst nativePromptNotSupported = \"native_prompt_not_supported\";\nconst invalidBase64String = \"invalid_base64_string\";\nconst invalidPopTokenRequest = \"invalid_pop_token_request\";\nconst failedToBuildHeaders = \"failed_to_build_headers\";\nconst failedToParseHeaders = \"failed_to_parse_headers\";\nexport { authCodeOrNativeAccountIdRequired, authCodeRequired, authRequestNotSetError, blockIframeReload, blockNestedPopups, cryptoKeyNotFound, cryptoNonExistent, databaseNotOpen, databaseUnavailable, emptyNavigateUri, emptyWindowError, failedToBuildHeaders, failedToParseHeaders, failedToParseResponse, getRequestFailed, hashDoesNotContainKnownProperties, hashEmptyError, iframeClosedPrematurely, interactionInProgress, invalidBase64String, invalidCacheType, invalidPopTokenRequest, monitorPopupTimeout, monitorWindowTimeout, nativeConnectionNotEstablished, nativeExtensionNotInstalled, nativeHandshakeTimeout, nativePromptNotSupported, noAccountError, noCachedAuthorityError, noNetworkConnectivity, noStateInHash, noTokenRequestCacheError, nonBrowserEnvironment, pkceNotCreated, popupWindowError, postRequestFailed, redirectInIframe, silentLogoutUnsupported, silentPromptValueError, spaCodeAndNativeAccountIdPresent, stateInteractionTypeMismatch, unableToAcquireTokenFromNativePlatform, unableToLoadToken, unableToParseState, unableToParseTokenRequestCacheError, uninitializedPublicClientApplication, userCancelled };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\nimport { AuthError } from '@azure/msal-common/browser';\nimport { pkceNotCreated, cryptoNonExistent, emptyNavigateUri, hashEmptyError, noStateInHash, hashDoesNotContainKnownProperties, unableToParseState, stateInteractionTypeMismatch, interactionInProgress, popupWindowError, emptyWindowError, userCancelled, monitorPopupTimeout, monitorWindowTimeout, redirectInIframe, blockIframeReload, blockNestedPopups, iframeClosedPrematurely, silentLogoutUnsupported, noAccountError, silentPromptValueError, noTokenRequestCacheError, unableToParseTokenRequestCacheError, noCachedAuthorityError, authRequestNotSetError, invalidCacheType, nonBrowserEnvironment, databaseNotOpen, noNetworkConnectivity, postRequestFailed, getRequestFailed, failedToParseResponse, unableToLoadToken, cryptoKeyNotFound, authCodeRequired, authCodeOrNativeAccountIdRequired, spaCodeAndNativeAccountIdPresent, databaseUnavailable, unableToAcquireTokenFromNativePlatform, nativeHandshakeTimeout, nativeExtensionNotInstalled, nativeConnectionNotEstablished, uninitializedPublicClientApplication, nativePromptNotSupported, invalidBase64String, invalidPopTokenRequest, failedToBuildHeaders, failedToParseHeaders } from './BrowserAuthErrorCodes.mjs';\nimport * as BrowserAuthErrorCodes from './BrowserAuthErrorCodes.mjs';\nexport { BrowserAuthErrorCodes };\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst ErrorLink = \"For more visit: aka.ms/msaljs/browser-errors\";\n/**\r\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\nconst BrowserAuthErrorMessages = {\n  [pkceNotCreated]: \"The PKCE code challenge and verifier could not be generated.\",\n  [cryptoNonExistent]: \"The crypto object or function is not available.\",\n  [emptyNavigateUri]: \"Navigation URI is empty. Please check stack trace for more info.\",\n  [hashEmptyError]: `Hash value cannot be processed because it is empty. Please verify that your redirectUri is not clearing the hash. ${ErrorLink}`,\n  [noStateInHash]: \"Hash does not contain state. Please verify that the request originated from msal.\",\n  [hashDoesNotContainKnownProperties]: `Hash does not contain known properites. Please verify that your redirectUri is not changing the hash.  ${ErrorLink}`,\n  [unableToParseState]: \"Unable to parse state. Please verify that the request originated from msal.\",\n  [stateInteractionTypeMismatch]: \"Hash contains state but the interaction type does not match the caller.\",\n  [interactionInProgress]: `Interaction is currently in progress. Please ensure that this interaction has been completed before calling an interactive API.   ${ErrorLink}`,\n  [popupWindowError]: \"Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser.\",\n  [emptyWindowError]: \"window.open returned null or undefined window object.\",\n  [userCancelled]: \"User cancelled the flow.\",\n  [monitorPopupTimeout]: `Token acquisition in popup failed due to timeout.  ${ErrorLink}`,\n  [monitorWindowTimeout]: `Token acquisition in iframe failed due to timeout.  ${ErrorLink}`,\n  [redirectInIframe]: \"Redirects are not supported for iframed or brokered applications. Please ensure you are using MSAL.js in a top frame of the window if using the redirect APIs, or use the popup APIs.\",\n  [blockIframeReload]: `Request was blocked inside an iframe because MSAL detected an authentication response.  ${ErrorLink}`,\n  [blockNestedPopups]: \"Request was blocked inside a popup because MSAL detected it was running in a popup.\",\n  [iframeClosedPrematurely]: \"The iframe being monitored was closed prematurely.\",\n  [silentLogoutUnsupported]: \"Silent logout not supported. Please call logoutRedirect or logoutPopup instead.\",\n  [noAccountError]: \"No account object provided to acquireTokenSilent and no active account has been set. Please call setActiveAccount or provide an account on the request.\",\n  [silentPromptValueError]: \"The value given for the prompt value is not valid for silent requests - must be set to 'none' or 'no_session'.\",\n  [noTokenRequestCacheError]: \"No token request found in cache.\",\n  [unableToParseTokenRequestCacheError]: \"The cached token request could not be parsed.\",\n  [noCachedAuthorityError]: \"No cached authority found.\",\n  [authRequestNotSetError]: \"Auth Request not set. Please ensure initiateAuthRequest was called from the InteractionHandler\",\n  [invalidCacheType]: \"Invalid cache type\",\n  [nonBrowserEnvironment]: \"Login and token requests are not supported in non-browser environments.\",\n  [databaseNotOpen]: \"Database is not open!\",\n  [noNetworkConnectivity]: \"No network connectivity. Check your internet connection.\",\n  [postRequestFailed]: \"Network request failed: If the browser threw a CORS error, check that the redirectUri is registered in the Azure App Portal as type 'SPA'\",\n  [getRequestFailed]: \"Network request failed. Please check the network trace to determine root cause.\",\n  [failedToParseResponse]: \"Failed to parse network response. Check network trace.\",\n  [unableToLoadToken]: \"Error loading token to cache.\",\n  [cryptoKeyNotFound]: \"Cryptographic Key or Keypair not found in browser storage.\",\n  [authCodeRequired]: \"An authorization code must be provided (as the `code` property on the request) to this flow.\",\n  [authCodeOrNativeAccountIdRequired]: \"An authorization code or nativeAccountId must be provided to this flow.\",\n  [spaCodeAndNativeAccountIdPresent]: \"Request cannot contain both spa code and native account id.\",\n  [databaseUnavailable]: \"IndexedDB, which is required for persistent cryptographic key storage, is unavailable. This may be caused by browser privacy features which block persistent storage in third-party contexts.\",\n  [unableToAcquireTokenFromNativePlatform]: `Unable to acquire token from native platform.  ${ErrorLink}`,\n  [nativeHandshakeTimeout]: \"Timed out while attempting to establish connection to browser extension\",\n  [nativeExtensionNotInstalled]: \"Native extension is not installed. If you think this is a mistake call the initialize function.\",\n  [nativeConnectionNotEstablished]: `Connection to native platform has not been established. Please install a compatible browser extension and run initialize().  ${ErrorLink}`,\n  [uninitializedPublicClientApplication]: `You must call and await the initialize function before attempting to call any other MSAL API.  ${ErrorLink}`,\n  [nativePromptNotSupported]: \"The provided prompt is not supported by the native platform. This request should be routed to the web based flow.\",\n  [invalidBase64String]: \"Invalid base64 encoded string.\",\n  [invalidPopTokenRequest]: \"Invalid PoP token request. The request should not have both a popKid value and signPopToken set to true.\",\n  [failedToBuildHeaders]: \"Failed to build request headers object.\",\n  [failedToParseHeaders]: \"Failed to parse response headers\"\n};\n/**\r\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use exported BrowserAuthErrorCodes instead.\r\n * In your app you can do :\r\n * ```\r\n * import { BrowserAuthErrorCodes } from \"@azure/msal-browser\";\r\n * ```\r\n */\nconst BrowserAuthErrorMessage = {\n  pkceNotGenerated: {\n    code: pkceNotCreated,\n    desc: BrowserAuthErrorMessages[pkceNotCreated]\n  },\n  cryptoDoesNotExist: {\n    code: cryptoNonExistent,\n    desc: BrowserAuthErrorMessages[cryptoNonExistent]\n  },\n  emptyNavigateUriError: {\n    code: emptyNavigateUri,\n    desc: BrowserAuthErrorMessages[emptyNavigateUri]\n  },\n  hashEmptyError: {\n    code: hashEmptyError,\n    desc: BrowserAuthErrorMessages[hashEmptyError]\n  },\n  hashDoesNotContainStateError: {\n    code: noStateInHash,\n    desc: BrowserAuthErrorMessages[noStateInHash]\n  },\n  hashDoesNotContainKnownPropertiesError: {\n    code: hashDoesNotContainKnownProperties,\n    desc: BrowserAuthErrorMessages[hashDoesNotContainKnownProperties]\n  },\n  unableToParseStateError: {\n    code: unableToParseState,\n    desc: BrowserAuthErrorMessages[unableToParseState]\n  },\n  stateInteractionTypeMismatchError: {\n    code: stateInteractionTypeMismatch,\n    desc: BrowserAuthErrorMessages[stateInteractionTypeMismatch]\n  },\n  interactionInProgress: {\n    code: interactionInProgress,\n    desc: BrowserAuthErrorMessages[interactionInProgress]\n  },\n  popupWindowError: {\n    code: popupWindowError,\n    desc: BrowserAuthErrorMessages[popupWindowError]\n  },\n  emptyWindowError: {\n    code: emptyWindowError,\n    desc: BrowserAuthErrorMessages[emptyWindowError]\n  },\n  userCancelledError: {\n    code: userCancelled,\n    desc: BrowserAuthErrorMessages[userCancelled]\n  },\n  monitorPopupTimeoutError: {\n    code: monitorPopupTimeout,\n    desc: BrowserAuthErrorMessages[monitorPopupTimeout]\n  },\n  monitorIframeTimeoutError: {\n    code: monitorWindowTimeout,\n    desc: BrowserAuthErrorMessages[monitorWindowTimeout]\n  },\n  redirectInIframeError: {\n    code: redirectInIframe,\n    desc: BrowserAuthErrorMessages[redirectInIframe]\n  },\n  blockTokenRequestsInHiddenIframeError: {\n    code: blockIframeReload,\n    desc: BrowserAuthErrorMessages[blockIframeReload]\n  },\n  blockAcquireTokenInPopupsError: {\n    code: blockNestedPopups,\n    desc: BrowserAuthErrorMessages[blockNestedPopups]\n  },\n  iframeClosedPrematurelyError: {\n    code: iframeClosedPrematurely,\n    desc: BrowserAuthErrorMessages[iframeClosedPrematurely]\n  },\n  silentLogoutUnsupportedError: {\n    code: silentLogoutUnsupported,\n    desc: BrowserAuthErrorMessages[silentLogoutUnsupported]\n  },\n  noAccountError: {\n    code: noAccountError,\n    desc: BrowserAuthErrorMessages[noAccountError]\n  },\n  silentPromptValueError: {\n    code: silentPromptValueError,\n    desc: BrowserAuthErrorMessages[silentPromptValueError]\n  },\n  noTokenRequestCacheError: {\n    code: noTokenRequestCacheError,\n    desc: BrowserAuthErrorMessages[noTokenRequestCacheError]\n  },\n  unableToParseTokenRequestCacheError: {\n    code: unableToParseTokenRequestCacheError,\n    desc: BrowserAuthErrorMessages[unableToParseTokenRequestCacheError]\n  },\n  noCachedAuthorityError: {\n    code: noCachedAuthorityError,\n    desc: BrowserAuthErrorMessages[noCachedAuthorityError]\n  },\n  authRequestNotSet: {\n    code: authRequestNotSetError,\n    desc: BrowserAuthErrorMessages[authRequestNotSetError]\n  },\n  invalidCacheType: {\n    code: invalidCacheType,\n    desc: BrowserAuthErrorMessages[invalidCacheType]\n  },\n  notInBrowserEnvironment: {\n    code: nonBrowserEnvironment,\n    desc: BrowserAuthErrorMessages[nonBrowserEnvironment]\n  },\n  databaseNotOpen: {\n    code: databaseNotOpen,\n    desc: BrowserAuthErrorMessages[databaseNotOpen]\n  },\n  noNetworkConnectivity: {\n    code: noNetworkConnectivity,\n    desc: BrowserAuthErrorMessages[noNetworkConnectivity]\n  },\n  postRequestFailed: {\n    code: postRequestFailed,\n    desc: BrowserAuthErrorMessages[postRequestFailed]\n  },\n  getRequestFailed: {\n    code: getRequestFailed,\n    desc: BrowserAuthErrorMessages[getRequestFailed]\n  },\n  failedToParseNetworkResponse: {\n    code: failedToParseResponse,\n    desc: BrowserAuthErrorMessages[failedToParseResponse]\n  },\n  unableToLoadTokenError: {\n    code: unableToLoadToken,\n    desc: BrowserAuthErrorMessages[unableToLoadToken]\n  },\n  signingKeyNotFoundInStorage: {\n    code: cryptoKeyNotFound,\n    desc: BrowserAuthErrorMessages[cryptoKeyNotFound]\n  },\n  authCodeRequired: {\n    code: authCodeRequired,\n    desc: BrowserAuthErrorMessages[authCodeRequired]\n  },\n  authCodeOrNativeAccountRequired: {\n    code: authCodeOrNativeAccountIdRequired,\n    desc: BrowserAuthErrorMessages[authCodeOrNativeAccountIdRequired]\n  },\n  spaCodeAndNativeAccountPresent: {\n    code: spaCodeAndNativeAccountIdPresent,\n    desc: BrowserAuthErrorMessages[spaCodeAndNativeAccountIdPresent]\n  },\n  databaseUnavailable: {\n    code: databaseUnavailable,\n    desc: BrowserAuthErrorMessages[databaseUnavailable]\n  },\n  unableToAcquireTokenFromNativePlatform: {\n    code: unableToAcquireTokenFromNativePlatform,\n    desc: BrowserAuthErrorMessages[unableToAcquireTokenFromNativePlatform]\n  },\n  nativeHandshakeTimeout: {\n    code: nativeHandshakeTimeout,\n    desc: BrowserAuthErrorMessages[nativeHandshakeTimeout]\n  },\n  nativeExtensionNotInstalled: {\n    code: nativeExtensionNotInstalled,\n    desc: BrowserAuthErrorMessages[nativeExtensionNotInstalled]\n  },\n  nativeConnectionNotEstablished: {\n    code: nativeConnectionNotEstablished,\n    desc: BrowserAuthErrorMessages[nativeConnectionNotEstablished]\n  },\n  uninitializedPublicClientApplication: {\n    code: uninitializedPublicClientApplication,\n    desc: BrowserAuthErrorMessages[uninitializedPublicClientApplication]\n  },\n  nativePromptNotSupported: {\n    code: nativePromptNotSupported,\n    desc: BrowserAuthErrorMessages[nativePromptNotSupported]\n  },\n  invalidBase64StringError: {\n    code: invalidBase64String,\n    desc: BrowserAuthErrorMessages[invalidBase64String]\n  },\n  invalidPopTokenRequest: {\n    code: invalidPopTokenRequest,\n    desc: BrowserAuthErrorMessages[invalidPopTokenRequest]\n  }\n};\n/**\r\n * Browser library error class thrown by the MSAL.js library for SPAs\r\n */\nclass BrowserAuthError extends AuthError {\n  constructor(errorCode, subError) {\n    super(errorCode, BrowserAuthErrorMessages[errorCode], subError);\n    Object.setPrototypeOf(this, BrowserAuthError.prototype);\n    this.name = \"BrowserAuthError\";\n  }\n}\nfunction createBrowserAuthError(errorCode, subError) {\n  return new BrowserAuthError(errorCode, subError);\n}\nexport { BrowserAuthError, BrowserAuthErrorMessage, BrowserAuthErrorMessages, createBrowserAuthError };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\nimport { OIDC_DEFAULT_SCOPES } from '@azure/msal-common/browser';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Constants\r\n */\nconst BrowserConstants = {\n  /**\r\n   * Interaction in progress cache value\r\n   */\n  INTERACTION_IN_PROGRESS_VALUE: \"interaction_in_progress\",\n  /**\r\n   * Invalid grant error code\r\n   */\n  INVALID_GRANT_ERROR: \"invalid_grant\",\n  /**\r\n   * Default popup window width\r\n   */\n  POPUP_WIDTH: 483,\n  /**\r\n   * Default popup window height\r\n   */\n  POPUP_HEIGHT: 600,\n  /**\r\n   * Name of the popup window starts with\r\n   */\n  POPUP_NAME_PREFIX: \"msal\",\n  /**\r\n   * Default popup monitor poll interval in milliseconds\r\n   */\n  DEFAULT_POLL_INTERVAL_MS: 30,\n  /**\r\n   * Msal-browser SKU\r\n   */\n  MSAL_SKU: \"msal.js.browser\"\n};\nconst NativeConstants = {\n  CHANNEL_ID: \"53ee284d-920a-4b59-9d30-a60315b26836\",\n  PREFERRED_EXTENSION_ID: \"ppnbnpeolgkicgegkbkbjmhlideopiji\",\n  MATS_TELEMETRY: \"MATS\"\n};\nconst NativeExtensionMethod = {\n  HandshakeRequest: \"Handshake\",\n  HandshakeResponse: \"HandshakeResponse\",\n  GetToken: \"GetToken\",\n  Response: \"Response\"\n};\nconst BrowserCacheLocation = {\n  LocalStorage: \"localStorage\",\n  SessionStorage: \"sessionStorage\",\n  MemoryStorage: \"memoryStorage\"\n};\n/**\r\n * HTTP Request types supported by MSAL.\r\n */\nconst HTTP_REQUEST_TYPE = {\n  GET: \"GET\",\n  POST: \"POST\"\n};\n/**\r\n * Temporary cache keys for MSAL, deleted after any request.\r\n */\nconst TemporaryCacheKeys = {\n  AUTHORITY: \"authority\",\n  ACQUIRE_TOKEN_ACCOUNT: \"acquireToken.account\",\n  SESSION_STATE: \"session.state\",\n  REQUEST_STATE: \"request.state\",\n  NONCE_IDTOKEN: \"nonce.id_token\",\n  ORIGIN_URI: \"request.origin\",\n  RENEW_STATUS: \"token.renew.status\",\n  URL_HASH: \"urlHash\",\n  REQUEST_PARAMS: \"request.params\",\n  SCOPES: \"scopes\",\n  INTERACTION_STATUS_KEY: \"interaction.status\",\n  CCS_CREDENTIAL: \"ccs.credential\",\n  CORRELATION_ID: \"request.correlationId\",\n  NATIVE_REQUEST: \"request.native\",\n  REDIRECT_CONTEXT: \"request.redirect.context\"\n};\nconst StaticCacheKeys = {\n  ACCOUNT_KEYS: \"msal.account.keys\",\n  TOKEN_KEYS: \"msal.token.keys\"\n};\n/**\r\n * Cache keys stored in-memory\r\n */\nconst InMemoryCacheKeys = {\n  WRAPPER_SKU: \"wrapper.sku\",\n  WRAPPER_VER: \"wrapper.version\"\n};\n/**\r\n * API Codes for Telemetry purposes.\r\n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\r\n * 0-99 Silent Flow\r\n * 800-899 Auth Code Flow\r\n */\nconst ApiId = {\n  acquireTokenRedirect: 861,\n  acquireTokenPopup: 862,\n  ssoSilent: 863,\n  acquireTokenSilent_authCode: 864,\n  handleRedirectPromise: 865,\n  acquireTokenByCode: 866,\n  acquireTokenSilent_silentFlow: 61,\n  logout: 961,\n  logoutPopup: 962\n};\n/*\r\n * Interaction type of the API - used for state and telemetry\r\n */\nvar InteractionType;\n(function (InteractionType) {\n  InteractionType[\"Redirect\"] = \"redirect\";\n  InteractionType[\"Popup\"] = \"popup\";\n  InteractionType[\"Silent\"] = \"silent\";\n  InteractionType[\"None\"] = \"none\";\n})(InteractionType || (InteractionType = {}));\n/**\r\n * Types of interaction currently in progress.\r\n * Used in events in wrapper libraries to invoke functions when certain interaction is in progress or all interactions are complete.\r\n */\nconst InteractionStatus = {\n  /**\r\n   * Initial status before interaction occurs\r\n   */\n  Startup: \"startup\",\n  /**\r\n   * Status set when all login calls occuring\r\n   */\n  Login: \"login\",\n  /**\r\n   * Status set when logout call occuring\r\n   */\n  Logout: \"logout\",\n  /**\r\n   * Status set for acquireToken calls\r\n   */\n  AcquireToken: \"acquireToken\",\n  /**\r\n   * Status set for ssoSilent calls\r\n   */\n  SsoSilent: \"ssoSilent\",\n  /**\r\n   * Status set when handleRedirect in progress\r\n   */\n  HandleRedirect: \"handleRedirect\",\n  /**\r\n   * Status set when interaction is complete\r\n   */\n  None: \"none\"\n};\nconst DEFAULT_REQUEST = {\n  scopes: OIDC_DEFAULT_SCOPES\n};\n/**\r\n * JWK Key Format string (Type MUST be defined for window crypto APIs)\r\n */\nconst KEY_FORMAT_JWK = \"jwk\";\n// Supported wrapper SKUs\nconst WrapperSKU = {\n  React: \"@azure/msal-react\",\n  Angular: \"@azure/msal-angular\"\n};\n// DatabaseStorage Constants\nconst DB_NAME = \"msal.db\";\nconst DB_VERSION = 1;\nconst DB_TABLE_NAME = `${DB_NAME}.keys`;\nconst CacheLookupPolicy = {\n  /*\r\n   * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired\r\n   * or cannot be found the refresh token will be used to acquire a new one. Finally, if the refresh token\r\n   * is expired acquireTokenSilent will attempt to acquire new access and refresh tokens.\r\n   */\n  Default: 0,\n  /*\r\n   * acquireTokenSilent will only look for access tokens in the cache. It will not attempt to renew access or\r\n   * refresh tokens.\r\n   */\n  AccessToken: 1,\n  /*\r\n   * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired or\r\n   * cannot be found, the refresh token will be used to acquire a new one. If the refresh token is expired, it\r\n   * will not be renewed and acquireTokenSilent will fail.\r\n   */\n  AccessTokenAndRefreshToken: 2,\n  /*\r\n   * acquireTokenSilent will not attempt to retrieve access tokens from the cache and will instead attempt to\r\n   * exchange the cached refresh token for a new access token. If the refresh token is expired, it will not be\r\n   * renewed and acquireTokenSilent will fail.\r\n   */\n  RefreshToken: 3,\n  /*\r\n   * acquireTokenSilent will not look in the cache for the access token. It will go directly to network with the\r\n   * cached refresh token. If the refresh token is expired an attempt will be made to renew it. This is equivalent to\r\n   * setting \"forceRefresh: true\".\r\n   */\n  RefreshTokenAndNetwork: 4,\n  /*\r\n   * acquireTokenSilent will attempt to renew both access and refresh tokens. It will not look in the cache. This will\r\n   * always fail if 3rd party cookies are blocked by the browser.\r\n   */\n  Skip: 5\n};\nconst iFrameRenewalPolicies = [CacheLookupPolicy.Default, CacheLookupPolicy.Skip, CacheLookupPolicy.RefreshTokenAndNetwork];\nconst LOG_LEVEL_CACHE_KEY = \"msal.browser.log.level\";\nconst LOG_PII_CACHE_KEY = \"msal.browser.log.pii\";\nconst BROWSER_PERF_ENABLED_KEY = \"msal.browser.performance.enabled\";\nexport { ApiId, BROWSER_PERF_ENABLED_KEY, BrowserCacheLocation, BrowserConstants, CacheLookupPolicy, DB_NAME, DB_TABLE_NAME, DB_VERSION, DEFAULT_REQUEST, HTTP_REQUEST_TYPE, InMemoryCacheKeys, InteractionStatus, InteractionType, KEY_FORMAT_JWK, LOG_LEVEL_CACHE_KEY, LOG_PII_CACHE_KEY, NativeConstants, NativeExtensionMethod, StaticCacheKeys, TemporaryCacheKeys, WrapperSKU, iFrameRenewalPolicies };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Class which exposes APIs to encode plaintext to base64 encoded string. See here for implementation details:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\r\n */\n/**\r\n * Returns URL Safe b64 encoded string from a plaintext string.\r\n * @param input\r\n */\nfunction urlEncode(input) {\n  return encodeURIComponent(base64Encode(input).replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\"));\n}\n/**\r\n * Returns URL Safe b64 encoded string from an int8Array.\r\n * @param inputArr\r\n */\nfunction urlEncodeArr(inputArr) {\n  return base64EncArr(inputArr).replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\n/**\r\n * Returns b64 encoded string from plaintext string.\r\n * @param input\r\n */\nfunction base64Encode(input) {\n  return base64EncArr(new TextEncoder().encode(input));\n}\n/**\r\n * Base64 encode byte array\r\n * @param aBytes\r\n */\nfunction base64EncArr(aBytes) {\n  const binString = Array.from(aBytes, x => String.fromCodePoint(x)).join(\"\");\n  return btoa(binString);\n}\nexport { base64Encode, urlEncode, urlEncodeArr };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { invalidBase64String } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Class which exposes APIs to decode base64 strings to plaintext. See here for implementation details:\r\n * https://developer.mozilla.org/en-US/docs/Glossary/Base64#the_unicode_problem\r\n */\n/**\r\n * Returns a URL-safe plaintext decoded string from b64 encoded input.\r\n * @param input\r\n */\nfunction base64Decode(input) {\n  return new TextDecoder().decode(base64DecToArr(input));\n}\n/**\r\n * Decodes base64 into Uint8Array\r\n * @param base64String\r\n */\nfunction base64DecToArr(base64String) {\n  let encodedString = base64String.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  switch (encodedString.length % 4) {\n    case 0:\n      break;\n    case 2:\n      encodedString += \"==\";\n      break;\n    case 3:\n      encodedString += \"=\";\n      break;\n    default:\n      throw createBrowserAuthError(invalidBase64String);\n  }\n  const binString = atob(encodedString);\n  return Uint8Array.from(binString, m => m.codePointAt(0) || 0);\n}\nexport { base64DecToArr, base64Decode };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { PerformanceEvents } from '@azure/msal-common/browser';\nimport { KEY_FORMAT_JWK } from '../utils/BrowserConstants.mjs';\nimport { urlEncodeArr } from '../encode/Base64Encode.mjs';\nimport { base64DecToArr } from '../encode/Base64Decode.mjs';\nimport { nonBrowserEnvironment, cryptoNonExistent } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This file defines functions used by the browser library to perform cryptography operations such as\r\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\r\n */\n/**\r\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\r\n */\n// Algorithms\nconst PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\nconst AES_GCM = \"AES-GCM\";\nconst HKDF = \"HKDF\";\n// SHA-256 hashing algorithm\nconst S256_HASH_ALG = \"SHA-256\";\n// MOD length for PoP tokens\nconst MODULUS_LENGTH = 2048;\n// Public Exponent\nconst PUBLIC_EXPONENT = new Uint8Array([0x01, 0x00, 0x01]);\n// UUID hex digits\nconst UUID_CHARS = \"0123456789abcdef\";\n// Array to store UINT32 random value\nconst UINT32_ARR = new Uint32Array(1);\n// Key Format\nconst RAW = \"raw\";\n// Key Usages\nconst ENCRYPT = \"encrypt\";\nconst DECRYPT = \"decrypt\";\nconst DERIVE_KEY = \"deriveKey\";\n// Suberror\nconst SUBTLE_SUBERROR = \"crypto_subtle_undefined\";\nconst keygenAlgorithmOptions = {\n  name: PKCS1_V15_KEYGEN_ALG,\n  hash: S256_HASH_ALG,\n  modulusLength: MODULUS_LENGTH,\n  publicExponent: PUBLIC_EXPONENT\n};\n/**\r\n * Check whether browser crypto is available.\r\n */\nfunction validateCryptoAvailable(skipValidateSubtleCrypto) {\n  if (!window) {\n    throw createBrowserAuthError(nonBrowserEnvironment);\n  }\n  if (!window.crypto) {\n    throw createBrowserAuthError(cryptoNonExistent);\n  }\n  if (!skipValidateSubtleCrypto && !window.crypto.subtle) {\n    throw createBrowserAuthError(cryptoNonExistent, SUBTLE_SUBERROR);\n  }\n}\n/**\r\n * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\r\n * @param dataString {string} data string\r\n * @param performanceClient {?IPerformanceClient}\r\n * @param correlationId {?string} correlation id\r\n */\nasync function sha256Digest(dataString, performanceClient, correlationId) {\n  performanceClient?.addQueueMeasurement(PerformanceEvents.Sha256Digest, correlationId);\n  const encoder = new TextEncoder();\n  const data = encoder.encode(dataString);\n  return window.crypto.subtle.digest(S256_HASH_ALG, data);\n}\n/**\r\n * Populates buffer with cryptographically random values.\r\n * @param dataBuffer\r\n */\nfunction getRandomValues(dataBuffer) {\n  return window.crypto.getRandomValues(dataBuffer);\n}\n/**\r\n * Returns random Uint32 value.\r\n * @returns {number}\r\n */\nfunction getRandomUint32() {\n  window.crypto.getRandomValues(UINT32_ARR);\n  return UINT32_ARR[0];\n}\n/**\r\n * Creates a UUID v7 from the current timestamp.\r\n * Implementation relies on the system clock to guarantee increasing order of generated identifiers.\r\n * @returns {number}\r\n */\nfunction createNewGuid() {\n  const currentTimestamp = Date.now();\n  const baseRand = getRandomUint32() * 0x400 + (getRandomUint32() & 0x3ff);\n  // Result byte array\n  const bytes = new Uint8Array(16);\n  // A 12-bit `rand_a` field value\n  const randA = Math.trunc(baseRand / 2 ** 30);\n  // The higher 30 bits of 62-bit `rand_b` field value\n  const randBHi = baseRand & 2 ** 30 - 1;\n  // The lower 32 bits of 62-bit `rand_b` field value\n  const randBLo = getRandomUint32();\n  bytes[0] = currentTimestamp / 2 ** 40;\n  bytes[1] = currentTimestamp / 2 ** 32;\n  bytes[2] = currentTimestamp / 2 ** 24;\n  bytes[3] = currentTimestamp / 2 ** 16;\n  bytes[4] = currentTimestamp / 2 ** 8;\n  bytes[5] = currentTimestamp;\n  bytes[6] = 0x70 | randA >>> 8;\n  bytes[7] = randA;\n  bytes[8] = 0x80 | randBHi >>> 24;\n  bytes[9] = randBHi >>> 16;\n  bytes[10] = randBHi >>> 8;\n  bytes[11] = randBHi;\n  bytes[12] = randBLo >>> 24;\n  bytes[13] = randBLo >>> 16;\n  bytes[14] = randBLo >>> 8;\n  bytes[15] = randBLo;\n  let text = \"\";\n  for (let i = 0; i < bytes.length; i++) {\n    text += UUID_CHARS.charAt(bytes[i] >>> 4);\n    text += UUID_CHARS.charAt(bytes[i] & 0xf);\n    if (i === 3 || i === 5 || i === 7 || i === 9) {\n      text += \"-\";\n    }\n  }\n  return text;\n}\n/**\r\n * Generates a keypair based on current keygen algorithm config.\r\n * @param extractable\r\n * @param usages\r\n */\nasync function generateKeyPair(extractable, usages) {\n  return window.crypto.subtle.generateKey(keygenAlgorithmOptions, extractable, usages);\n}\n/**\r\n * Export key as Json Web Key (JWK)\r\n * @param key\r\n */\nasync function exportJwk(key) {\n  return window.crypto.subtle.exportKey(KEY_FORMAT_JWK, key);\n}\n/**\r\n * Imports key as Json Web Key (JWK), can set extractable and usages.\r\n * @param key\r\n * @param extractable\r\n * @param usages\r\n */\nasync function importJwk(key, extractable, usages) {\n  return window.crypto.subtle.importKey(KEY_FORMAT_JWK, key, keygenAlgorithmOptions, extractable, usages);\n}\n/**\r\n * Signs given data with given key\r\n * @param key\r\n * @param data\r\n */\nasync function sign(key, data) {\n  return window.crypto.subtle.sign(keygenAlgorithmOptions, key, data);\n}\n/**\r\n * Generates symmetric base encryption key. This may be stored as all encryption/decryption keys will be derived from this one.\r\n */\nasync function generateBaseKey() {\n  const key = await window.crypto.subtle.generateKey({\n    name: AES_GCM,\n    length: 256\n  }, true, [ENCRYPT, DECRYPT]);\n  return window.crypto.subtle.exportKey(RAW, key);\n}\n/**\r\n * Returns the raw key to be passed into the key derivation function\r\n * @param baseKey\r\n * @returns\r\n */\nasync function generateHKDF(baseKey) {\n  return window.crypto.subtle.importKey(RAW, baseKey, HKDF, false, [DERIVE_KEY]);\n}\n/**\r\n * Given a base key and a nonce generates a derived key to be used in encryption and decryption.\r\n * Note: every time we encrypt a new key is derived\r\n * @param baseKey\r\n * @param nonce\r\n * @returns\r\n */\nasync function deriveKey(baseKey, nonce, context) {\n  return window.crypto.subtle.deriveKey({\n    name: HKDF,\n    salt: nonce,\n    hash: S256_HASH_ALG,\n    info: new TextEncoder().encode(context)\n  }, baseKey, {\n    name: AES_GCM,\n    length: 256\n  }, false, [ENCRYPT, DECRYPT]);\n}\n/**\r\n * Encrypt the given data given a base key. Returns encrypted data and a nonce that must be provided during decryption\r\n * @param key\r\n * @param rawData\r\n */\nasync function encrypt(baseKey, rawData, context) {\n  const encodedData = new TextEncoder().encode(rawData);\n  // The nonce must never be reused with a given key.\n  const nonce = window.crypto.getRandomValues(new Uint8Array(16));\n  const derivedKey = await deriveKey(baseKey, nonce, context);\n  const encryptedData = await window.crypto.subtle.encrypt({\n    name: AES_GCM,\n    iv: new Uint8Array(12) // New key is derived for every encrypt so we don't need a new nonce\n  }, derivedKey, encodedData);\n  return {\n    data: urlEncodeArr(new Uint8Array(encryptedData)),\n    nonce: urlEncodeArr(nonce)\n  };\n}\n/**\r\n * Decrypt data with the given key and nonce\r\n * @param key\r\n * @param nonce\r\n * @param encryptedData\r\n * @returns\r\n */\nasync function decrypt(baseKey, nonce, context, encryptedData) {\n  const encodedData = base64DecToArr(encryptedData);\n  const derivedKey = await deriveKey(baseKey, base64DecToArr(nonce), context);\n  const decryptedData = await window.crypto.subtle.decrypt({\n    name: AES_GCM,\n    iv: new Uint8Array(12) // New key is derived for every encrypt so we don't need a new nonce\n  }, derivedKey, encodedData);\n  return new TextDecoder().decode(decryptedData);\n}\n/**\r\n * Returns the SHA-256 hash of an input string\r\n * @param plainText\r\n */\nasync function hashString(plainText) {\n  const hashBuffer = await sha256Digest(plainText);\n  const hashBytes = new Uint8Array(hashBuffer);\n  return urlEncodeArr(hashBytes);\n}\nexport { createNewGuid, decrypt, encrypt, exportJwk, generateBaseKey, generateHKDF, generateKeyPair, getRandomValues, hashString, importJwk, sha256Digest, sign, validateCryptoAvailable };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst storageNotSupported = \"storage_not_supported\";\nconst stubbedPublicClientApplicationCalled = \"stubbed_public_client_application_called\";\nconst inMemRedirectUnavailable = \"in_mem_redirect_unavailable\";\nexport { inMemRedirectUnavailable, storageNotSupported, stubbedPublicClientApplicationCalled };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\nimport { AuthError } from '@azure/msal-common/browser';\nimport { storageNotSupported, stubbedPublicClientApplicationCalled, inMemRedirectUnavailable } from './BrowserConfigurationAuthErrorCodes.mjs';\nimport * as BrowserConfigurationAuthErrorCodes from './BrowserConfigurationAuthErrorCodes.mjs';\nexport { BrowserConfigurationAuthErrorCodes };\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst BrowserConfigurationAuthErrorMessages = {\n  [storageNotSupported]: \"Given storage configuration option was not supported.\",\n  [stubbedPublicClientApplicationCalled]: \"Stub instance of Public Client Application was called. If using msal-react, please ensure context is not used without a provider. For more visit: aka.ms/msaljs/browser-errors\",\n  [inMemRedirectUnavailable]: \"Redirect cannot be supported. In-memory storage was selected and storeAuthStateInCookie=false, which would cause the library to be unable to handle the incoming hash. If you would like to use the redirect API, please use session/localStorage or set storeAuthStateInCookie=true.\"\n};\n/**\r\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use BrowserAuthErrorCodes instead\r\n */\nconst BrowserConfigurationAuthErrorMessage = {\n  storageNotSupportedError: {\n    code: storageNotSupported,\n    desc: BrowserConfigurationAuthErrorMessages[storageNotSupported]\n  },\n  stubPcaInstanceCalled: {\n    code: stubbedPublicClientApplicationCalled,\n    desc: BrowserConfigurationAuthErrorMessages[stubbedPublicClientApplicationCalled]\n  },\n  inMemRedirectUnavailable: {\n    code: inMemRedirectUnavailable,\n    desc: BrowserConfigurationAuthErrorMessages[inMemRedirectUnavailable]\n  }\n};\n/**\r\n * Browser library error class thrown by the MSAL.js library for SPAs\r\n */\nclass BrowserConfigurationAuthError extends AuthError {\n  constructor(errorCode, errorMessage) {\n    super(errorCode, errorMessage);\n    this.name = \"BrowserConfigurationAuthError\";\n    Object.setPrototypeOf(this, BrowserConfigurationAuthError.prototype);\n  }\n}\nfunction createBrowserConfigurationAuthError(errorCode) {\n  return new BrowserConfigurationAuthError(errorCode, BrowserConfigurationAuthErrorMessages[errorCode]);\n}\nexport { BrowserConfigurationAuthError, BrowserConfigurationAuthErrorMessage, BrowserConfigurationAuthErrorMessages, createBrowserConfigurationAuthError };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass NavigationClient {\n  /**\r\n   * Navigates to other pages within the same web application\r\n   * @param url\r\n   * @param options\r\n   */\n  navigateInternal(url, options) {\n    return NavigationClient.defaultNavigateWindow(url, options);\n  }\n  /**\r\n   * Navigates to other pages outside the web application i.e. the Identity Provider\r\n   * @param url\r\n   * @param options\r\n   */\n  navigateExternal(url, options) {\n    return NavigationClient.defaultNavigateWindow(url, options);\n  }\n  /**\r\n   * Default navigation implementation invoked by the internal and external functions\r\n   * @param url\r\n   * @param options\r\n   */\n  static defaultNavigateWindow(url, options) {\n    if (options.noHistory) {\n      window.location.replace(url);\n    } else {\n      window.location.assign(url);\n    }\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(true);\n      }, options.timeout);\n    });\n  }\n}\nexport { NavigationClient };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\nimport { createNetworkError } from '@azure/msal-common/browser';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { HTTP_REQUEST_TYPE } from '../utils/BrowserConstants.mjs';\nimport { getRequestFailed, noNetworkConnectivity, failedToParseResponse, postRequestFailed, failedToBuildHeaders, failedToParseHeaders } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\r\n */\nclass FetchClient {\n  /**\r\n   * Fetch Client for REST endpoints - Get request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n  async sendGetRequestAsync(url, options) {\n    let response;\n    let responseHeaders = {};\n    let responseStatus = 0;\n    const reqHeaders = getFetchHeaders(options);\n    try {\n      response = await fetch(url, {\n        method: HTTP_REQUEST_TYPE.GET,\n        headers: reqHeaders\n      });\n    } catch (e) {\n      throw createBrowserAuthError(window.navigator.onLine ? getRequestFailed : noNetworkConnectivity);\n    }\n    responseHeaders = getHeaderDict(response.headers);\n    try {\n      responseStatus = response.status;\n      return {\n        headers: responseHeaders,\n        body: await response.json(),\n        status: responseStatus\n      };\n    } catch (e) {\n      throw createNetworkError(createBrowserAuthError(failedToParseResponse), responseStatus, responseHeaders);\n    }\n  }\n  /**\r\n   * Fetch Client for REST endpoints - Post request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n  async sendPostRequestAsync(url, options) {\n    const reqBody = options && options.body || \"\";\n    const reqHeaders = getFetchHeaders(options);\n    let response;\n    let responseStatus = 0;\n    let responseHeaders = {};\n    try {\n      response = await fetch(url, {\n        method: HTTP_REQUEST_TYPE.POST,\n        headers: reqHeaders,\n        body: reqBody\n      });\n    } catch (e) {\n      throw createBrowserAuthError(window.navigator.onLine ? postRequestFailed : noNetworkConnectivity);\n    }\n    responseHeaders = getHeaderDict(response.headers);\n    try {\n      responseStatus = response.status;\n      return {\n        headers: responseHeaders,\n        body: await response.json(),\n        status: responseStatus\n      };\n    } catch (e) {\n      throw createNetworkError(createBrowserAuthError(failedToParseResponse), responseStatus, responseHeaders);\n    }\n  }\n}\n/**\r\n * Get Fetch API Headers object from string map\r\n * @param inputHeaders\r\n */\nfunction getFetchHeaders(options) {\n  try {\n    const headers = new Headers();\n    if (!(options && options.headers)) {\n      return headers;\n    }\n    const optionsHeaders = options.headers;\n    Object.entries(optionsHeaders).forEach(([key, value]) => {\n      headers.append(key, value);\n    });\n    return headers;\n  } catch (e) {\n    throw createBrowserAuthError(failedToBuildHeaders);\n  }\n}\n/**\r\n * Returns object representing response headers\r\n * @param headers\r\n * @returns\r\n */\nfunction getHeaderDict(headers) {\n  try {\n    const headerDict = {};\n    headers.forEach((value, key) => {\n      headerDict[key] = value;\n    });\n    return headerDict;\n  } catch (e) {\n    throw createBrowserAuthError(failedToParseHeaders);\n  }\n}\nexport { FetchClient };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\nimport { Constants, ProtocolMode, ServerResponseType, AzureCloudInstance, StubPerformanceClient, Logger, createClientConfigurationError, ClientConfigurationErrorCodes, LogLevel, DEFAULT_SYSTEM_OPTIONS, StubbedNetworkModule } from '@azure/msal-common/browser';\nimport { BrowserCacheLocation, BrowserConstants } from '../utils/BrowserConstants.mjs';\nimport { NavigationClient } from '../navigation/NavigationClient.mjs';\nimport { FetchClient } from '../network/FetchClient.mjs';\nimport { getCurrentUri } from '../utils/BrowserUtils.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n// Default timeout for popup windows and iframes in milliseconds\nconst DEFAULT_POPUP_TIMEOUT_MS = 60000;\nconst DEFAULT_IFRAME_TIMEOUT_MS = 10000;\nconst DEFAULT_REDIRECT_TIMEOUT_MS = 30000;\nconst DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS = 2000;\n/**\r\n * MSAL function that sets the default options when not explicitly configured from app developer\r\n *\r\n * @param auth\r\n * @param cache\r\n * @param system\r\n *\r\n * @returns Configuration object\r\n */\nfunction buildConfiguration({\n  auth: userInputAuth,\n  cache: userInputCache,\n  system: userInputSystem,\n  telemetry: userInputTelemetry\n}, isBrowserEnvironment) {\n  // Default auth options for browser\n  const DEFAULT_AUTH_OPTIONS = {\n    clientId: Constants.EMPTY_STRING,\n    authority: `${Constants.DEFAULT_AUTHORITY}`,\n    knownAuthorities: [],\n    cloudDiscoveryMetadata: Constants.EMPTY_STRING,\n    authorityMetadata: Constants.EMPTY_STRING,\n    redirectUri: typeof window !== \"undefined\" ? getCurrentUri() : \"\",\n    postLogoutRedirectUri: Constants.EMPTY_STRING,\n    navigateToLoginRequestUrl: true,\n    clientCapabilities: [],\n    protocolMode: ProtocolMode.AAD,\n    OIDCOptions: {\n      serverResponseType: ServerResponseType.FRAGMENT,\n      defaultScopes: [Constants.OPENID_SCOPE, Constants.PROFILE_SCOPE, Constants.OFFLINE_ACCESS_SCOPE]\n    },\n    azureCloudOptions: {\n      azureCloudInstance: AzureCloudInstance.None,\n      tenant: Constants.EMPTY_STRING\n    },\n    skipAuthorityMetadataCache: false,\n    supportsNestedAppAuth: false,\n    instanceAware: false\n  };\n  // Default cache options for browser\n  const DEFAULT_CACHE_OPTIONS = {\n    cacheLocation: BrowserCacheLocation.SessionStorage,\n    temporaryCacheLocation: BrowserCacheLocation.SessionStorage,\n    storeAuthStateInCookie: false,\n    secureCookies: false,\n    // Default cache migration to true if cache location is localStorage since entries are preserved across tabs/windows. Migration has little to no benefit in sessionStorage and memoryStorage\n    cacheMigrationEnabled: userInputCache && userInputCache.cacheLocation === BrowserCacheLocation.LocalStorage ? true : false,\n    claimsBasedCachingEnabled: false\n  };\n  // Default logger options for browser\n  const DEFAULT_LOGGER_OPTIONS = {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    loggerCallback: () => {\n      // allow users to not set logger call back\n    },\n    logLevel: LogLevel.Info,\n    piiLoggingEnabled: false\n  };\n  // Default system options for browser\n  const DEFAULT_BROWSER_SYSTEM_OPTIONS = {\n    ...DEFAULT_SYSTEM_OPTIONS,\n    loggerOptions: DEFAULT_LOGGER_OPTIONS,\n    networkClient: isBrowserEnvironment ? new FetchClient() : StubbedNetworkModule,\n    navigationClient: new NavigationClient(),\n    loadFrameTimeout: 0,\n    // If loadFrameTimeout is provided, use that as default.\n    windowHashTimeout: userInputSystem?.loadFrameTimeout || DEFAULT_POPUP_TIMEOUT_MS,\n    iframeHashTimeout: userInputSystem?.loadFrameTimeout || DEFAULT_IFRAME_TIMEOUT_MS,\n    navigateFrameWait: 0,\n    redirectNavigationTimeout: DEFAULT_REDIRECT_TIMEOUT_MS,\n    asyncPopups: false,\n    allowRedirectInIframe: false,\n    allowPlatformBroker: false,\n    nativeBrokerHandshakeTimeout: userInputSystem?.nativeBrokerHandshakeTimeout || DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS,\n    pollIntervalMilliseconds: BrowserConstants.DEFAULT_POLL_INTERVAL_MS\n  };\n  const providedSystemOptions = {\n    ...DEFAULT_BROWSER_SYSTEM_OPTIONS,\n    ...userInputSystem,\n    loggerOptions: userInputSystem?.loggerOptions || DEFAULT_LOGGER_OPTIONS\n  };\n  const DEFAULT_TELEMETRY_OPTIONS = {\n    application: {\n      appName: Constants.EMPTY_STRING,\n      appVersion: Constants.EMPTY_STRING\n    },\n    client: new StubPerformanceClient()\n  };\n  // Throw an error if user has set OIDCOptions without being in OIDC protocol mode\n  if (userInputAuth?.protocolMode !== ProtocolMode.OIDC && userInputAuth?.OIDCOptions) {\n    const logger = new Logger(providedSystemOptions.loggerOptions);\n    logger.warning(JSON.stringify(createClientConfigurationError(ClientConfigurationErrorCodes.cannotSetOIDCOptions)));\n  }\n  // Throw an error if user has set allowPlatformBroker to true without being in AAD protocol mode\n  if (userInputAuth?.protocolMode && userInputAuth.protocolMode !== ProtocolMode.AAD && providedSystemOptions?.allowPlatformBroker) {\n    throw createClientConfigurationError(ClientConfigurationErrorCodes.cannotAllowPlatformBroker);\n  }\n  const overlayedConfig = {\n    auth: {\n      ...DEFAULT_AUTH_OPTIONS,\n      ...userInputAuth,\n      OIDCOptions: {\n        ...DEFAULT_AUTH_OPTIONS.OIDCOptions,\n        ...userInputAuth?.OIDCOptions\n      }\n    },\n    cache: {\n      ...DEFAULT_CACHE_OPTIONS,\n      ...userInputCache\n    },\n    system: providedSystemOptions,\n    telemetry: {\n      ...DEFAULT_TELEMETRY_OPTIONS,\n      ...userInputTelemetry\n    }\n  };\n  return overlayedConfig;\n}\nexport { DEFAULT_IFRAME_TIMEOUT_MS, DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS, DEFAULT_POPUP_TIMEOUT_MS, DEFAULT_REDIRECT_TIMEOUT_MS, buildConfiguration };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\n/* eslint-disable header/header */\nconst name = \"@azure/msal-browser\";\nconst version = \"4.5.0\";\nexport { name, version };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\nimport { LogLevel, Logger } from '@azure/msal-common/browser';\nimport { buildConfiguration } from '../config/Configuration.mjs';\nimport { name, version } from '../packageMetadata.mjs';\nimport { BrowserCacheLocation, LOG_LEVEL_CACHE_KEY, LOG_PII_CACHE_KEY } from '../utils/BrowserConstants.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Base class for operating context\r\n * Operating contexts are contexts in which MSAL.js is being run\r\n * More than one operating context may be available at a time\r\n * It's important from a logging and telemetry point of view for us to be able to identify the operating context.\r\n * For example: Some operating contexts will pre-cache tokens impacting performance telemetry\r\n */\nclass BaseOperatingContext {\n  static loggerCallback(level, message) {\n    switch (level) {\n      case LogLevel.Error:\n        // eslint-disable-next-line no-console\n        console.error(message);\n        return;\n      case LogLevel.Info:\n        // eslint-disable-next-line no-console\n        console.info(message);\n        return;\n      case LogLevel.Verbose:\n        // eslint-disable-next-line no-console\n        console.debug(message);\n        return;\n      case LogLevel.Warning:\n        // eslint-disable-next-line no-console\n        console.warn(message);\n        return;\n      default:\n        // eslint-disable-next-line no-console\n        console.log(message);\n        return;\n    }\n  }\n  constructor(config) {\n    /*\r\n     * If loaded in an environment where window is not available,\r\n     * set internal flag to false so that further requests fail.\r\n     * This is to support server-side rendering environments.\r\n     */\n    this.browserEnvironment = typeof window !== \"undefined\";\n    this.config = buildConfiguration(config, this.browserEnvironment);\n    let sessionStorage;\n    try {\n      sessionStorage = window[BrowserCacheLocation.SessionStorage];\n      // Mute errors if it's a non-browser environment or cookies are blocked.\n    } catch (e) {}\n    const logLevelKey = sessionStorage?.getItem(LOG_LEVEL_CACHE_KEY);\n    const piiLoggingKey = sessionStorage?.getItem(LOG_PII_CACHE_KEY)?.toLowerCase();\n    const piiLoggingEnabled = piiLoggingKey === \"true\" ? true : piiLoggingKey === \"false\" ? false : undefined;\n    const loggerOptions = {\n      ...this.config.system.loggerOptions\n    };\n    const logLevel = logLevelKey && Object.keys(LogLevel).includes(logLevelKey) ? LogLevel[logLevelKey] : undefined;\n    if (logLevel) {\n      loggerOptions.loggerCallback = BaseOperatingContext.loggerCallback;\n      loggerOptions.logLevel = logLevel;\n    }\n    if (piiLoggingEnabled !== undefined) {\n      loggerOptions.piiLoggingEnabled = piiLoggingEnabled;\n    }\n    this.logger = new Logger(loggerOptions, name, version);\n    this.available = false;\n  }\n  /**\r\n   * Return the MSAL config\r\n   * @returns BrowserConfiguration\r\n   */\n  getConfig() {\n    return this.config;\n  }\n  /**\r\n   * Returns the MSAL Logger\r\n   * @returns Logger\r\n   */\n  getLogger() {\n    return this.logger;\n  }\n  isAvailable() {\n    return this.available;\n  }\n  isBrowserEnvironment() {\n    return this.browserEnvironment;\n  }\n}\nexport { BaseOperatingContext };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst BridgeStatusCode = {\n  UserInteractionRequired: \"USER_INTERACTION_REQUIRED\",\n  UserCancel: \"USER_CANCEL\",\n  NoNetwork: \"NO_NETWORK\",\n  TransientError: \"TRANSIENT_ERROR\",\n  PersistentError: \"PERSISTENT_ERROR\",\n  Disabled: \"DISABLED\",\n  AccountUnavailable: \"ACCOUNT_UNAVAILABLE\",\n  NestedAppAuthUnavailable: \"NESTED_APP_AUTH_UNAVAILABLE\" // NAA is unavailable in the current context, can retry with standard browser based auth\n};\nexport { BridgeStatusCode };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\nimport { BridgeStatusCode } from './BridgeStatusCode.mjs';\nimport { createNewGuid } from '../crypto/BrowserCrypto.mjs';\nimport { BrowserConstants } from '../utils/BrowserConstants.mjs';\nimport { version } from '../packageMetadata.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * BridgeProxy\r\n * Provides a proxy for accessing a bridge to a host app and/or\r\n * platform broker\r\n */\nclass BridgeProxy {\n  /**\r\n   * initializeNestedAppAuthBridge - Initializes the bridge to the host app\r\n   * @returns a promise that resolves to an InitializeBridgeResponse or rejects with an Error\r\n   * @remarks This method will be called by the create factory method\r\n   * @remarks If the bridge is not available, this method will throw an error\r\n   */\n  static async initializeNestedAppAuthBridge() {\n    if (window === undefined) {\n      throw new Error(\"window is undefined\");\n    }\n    if (window.nestedAppAuthBridge === undefined) {\n      throw new Error(\"window.nestedAppAuthBridge is undefined\");\n    }\n    try {\n      window.nestedAppAuthBridge.addEventListener(\"message\", response => {\n        const responsePayload = typeof response === \"string\" ? response : response.data;\n        const responseEnvelope = JSON.parse(responsePayload);\n        const request = BridgeProxy.bridgeRequests.find(element => element.requestId === responseEnvelope.requestId);\n        if (request !== undefined) {\n          BridgeProxy.bridgeRequests.splice(BridgeProxy.bridgeRequests.indexOf(request), 1);\n          if (responseEnvelope.success) {\n            request.resolve(responseEnvelope);\n          } else {\n            request.reject(responseEnvelope.error);\n          }\n        }\n      });\n      const bridgeResponse = await new Promise((resolve, reject) => {\n        const message = BridgeProxy.buildRequest(\"GetInitContext\");\n        const request = {\n          requestId: message.requestId,\n          method: message.method,\n          resolve: resolve,\n          reject: reject\n        };\n        BridgeProxy.bridgeRequests.push(request);\n        window.nestedAppAuthBridge.postMessage(JSON.stringify(message));\n      });\n      return BridgeProxy.validateBridgeResultOrThrow(bridgeResponse.initContext);\n    } catch (error) {\n      window.console.log(error);\n      throw error;\n    }\n  }\n  /**\r\n   * getTokenInteractive - Attempts to get a token interactively from the bridge\r\n   * @param request A token request\r\n   * @returns a promise that resolves to an auth result or rejects with a BridgeError\r\n   */\n  getTokenInteractive(request) {\n    return this.getToken(\"GetTokenPopup\", request);\n  }\n  /**\r\n   * getTokenSilent Attempts to get a token silently from the bridge\r\n   * @param request A token request\r\n   * @returns a promise that resolves to an auth result or rejects with a BridgeError\r\n   */\n  getTokenSilent(request) {\n    return this.getToken(\"GetToken\", request);\n  }\n  async getToken(requestType, request) {\n    const result = await this.sendRequest(requestType, {\n      tokenParams: request\n    });\n    return {\n      token: BridgeProxy.validateBridgeResultOrThrow(result.token),\n      account: BridgeProxy.validateBridgeResultOrThrow(result.account)\n    };\n  }\n  getHostCapabilities() {\n    return this.capabilities ?? null;\n  }\n  getAccountContext() {\n    return this.accountContext ? this.accountContext : null;\n  }\n  static buildRequest(method, requestParams) {\n    return {\n      messageType: \"NestedAppAuthRequest\",\n      method: method,\n      requestId: createNewGuid(),\n      sendTime: Date.now(),\n      clientLibrary: BrowserConstants.MSAL_SKU,\n      clientLibraryVersion: version,\n      ...requestParams\n    };\n  }\n  /**\r\n   * A method used to send a request to the bridge\r\n   * @param request A token request\r\n   * @returns a promise that resolves to a response of provided type or rejects with a BridgeError\r\n   */\n  sendRequest(method, requestParams) {\n    const message = BridgeProxy.buildRequest(method, requestParams);\n    const promise = new Promise((resolve, reject) => {\n      const request = {\n        requestId: message.requestId,\n        method: message.method,\n        resolve: resolve,\n        reject: reject\n      };\n      BridgeProxy.bridgeRequests.push(request);\n      window.nestedAppAuthBridge.postMessage(JSON.stringify(message));\n    });\n    return promise;\n  }\n  static validateBridgeResultOrThrow(input) {\n    if (input === undefined) {\n      const bridgeError = {\n        status: BridgeStatusCode.NestedAppAuthUnavailable\n      };\n      throw bridgeError;\n    }\n    return input;\n  }\n  /**\r\n   * Private constructor for BridgeProxy\r\n   * @param sdkName The name of the SDK being used to make requests on behalf of the app\r\n   * @param sdkVersion The version of the SDK being used to make requests on behalf of the app\r\n   * @param capabilities The capabilities of the bridge / SDK / platform broker\r\n   */\n  constructor(sdkName, sdkVersion, accountContext, capabilities) {\n    this.sdkName = sdkName;\n    this.sdkVersion = sdkVersion;\n    this.accountContext = accountContext;\n    this.capabilities = capabilities;\n  }\n  /**\r\n   * Factory method for creating an implementation of IBridgeProxy\r\n   * @returns A promise that resolves to a BridgeProxy implementation\r\n   */\n  static async create() {\n    const response = await BridgeProxy.initializeNestedAppAuthBridge();\n    return new BridgeProxy(response.sdkName, response.sdkVersion, response.accountContext, response.capabilities);\n  }\n}\nBridgeProxy.bridgeRequests = [];\nexport { BridgeProxy, BridgeProxy as default };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\nimport { BaseOperatingContext } from './BaseOperatingContext.mjs';\nimport { BridgeProxy } from '../naa/BridgeProxy.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass NestedAppOperatingContext extends BaseOperatingContext {\n  constructor() {\n    super(...arguments);\n    this.bridgeProxy = undefined;\n    this.accountContext = null;\n  }\n  /**\r\n   * Return the module name.  Intended for use with import() to enable dynamic import\r\n   * of the implementation associated with this operating context\r\n   * @returns\r\n   */\n  getModuleName() {\n    return NestedAppOperatingContext.MODULE_NAME;\n  }\n  /**\r\n   * Returns the unique identifier for this operating context\r\n   * @returns string\r\n   */\n  getId() {\n    return NestedAppOperatingContext.ID;\n  }\n  /**\r\n   * Returns the current BridgeProxy\r\n   * @returns IBridgeProxy | undefined\r\n   */\n  getBridgeProxy() {\n    return this.bridgeProxy;\n  }\n  /**\r\n   * Checks whether the operating context is available.\r\n   * Confirms that the code is running a browser rather.  This is required.\r\n   * @returns Promise<boolean> indicating whether this operating context is currently available.\r\n   */\n  async initialize() {\n    try {\n      if (typeof window !== \"undefined\") {\n        if (typeof window.__initializeNestedAppAuth === \"function\") {\n          await window.__initializeNestedAppAuth();\n        }\n        const bridgeProxy = await BridgeProxy.create();\n        /*\r\n         * Because we want single sign on we expect the host app to provide the account context\r\n         * with a min set of params that can be used to identify the account\r\n         * this.account = nestedApp.getAccountByFilter(bridgeProxy.getAccountContext());\r\n         */\n        this.accountContext = bridgeProxy.getAccountContext();\n        this.bridgeProxy = bridgeProxy;\n        this.available = bridgeProxy !== undefined;\n      }\n    } catch (ex) {\n      this.logger.infoPii(`Could not initialize Nested App Auth bridge (${ex})`);\n    }\n    this.logger.info(`Nested App Auth Bridge available: ${this.available}`);\n    return this.available;\n  }\n}\n/*\r\n * TODO: Once we have determine the bundling code return here to specify the name of the bundle\r\n * containing the implementation for this operating context\r\n */\nNestedAppOperatingContext.MODULE_NAME = \"\";\n/**\r\n * Unique identifier for the operating context\r\n */\nNestedAppOperatingContext.ID = \"NestedAppOperatingContext\";\nexport { NestedAppOperatingContext };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\nimport { BaseOperatingContext } from './BaseOperatingContext.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass StandardOperatingContext extends BaseOperatingContext {\n  /**\r\n   * Return the module name.  Intended for use with import() to enable dynamic import\r\n   * of the implementation associated with this operating context\r\n   * @returns\r\n   */\n  getModuleName() {\n    return StandardOperatingContext.MODULE_NAME;\n  }\n  /**\r\n   * Returns the unique identifier for this operating context\r\n   * @returns string\r\n   */\n  getId() {\n    return StandardOperatingContext.ID;\n  }\n  /**\r\n   * Checks whether the operating context is available.\r\n   * Confirms that the code is running a browser rather.  This is required.\r\n   * @returns Promise<boolean> indicating whether this operating context is currently available.\r\n   */\n  async initialize() {\n    this.available = typeof window !== \"undefined\";\n    return this.available;\n    /*\r\n     * NOTE: The standard context is available as long as there is a window.  If/when we split out WAM from Browser\r\n     * We can move the current contents of the initialize method to here and verify that the WAM extension is available\r\n     */\n  }\n}\n/*\r\n * TODO: Once we have determine the bundling code return here to specify the name of the bundle\r\n * containing the implementation for this operating context\r\n */\nStandardOperatingContext.MODULE_NAME = \"\";\n/**\r\n * Unique identifier for the operating context\r\n */\nStandardOperatingContext.ID = \"StandardOperatingContext\";\nexport { StandardOperatingContext };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { DB_NAME, DB_VERSION, DB_TABLE_NAME } from '../utils/BrowserConstants.mjs';\nimport { databaseUnavailable, databaseNotOpen } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\r\n */\nclass DatabaseStorage {\n  constructor() {\n    this.dbName = DB_NAME;\n    this.version = DB_VERSION;\n    this.tableName = DB_TABLE_NAME;\n    this.dbOpen = false;\n  }\n  /**\r\n   * Opens IndexedDB instance.\r\n   */\n  async open() {\n    return new Promise((resolve, reject) => {\n      const openDB = window.indexedDB.open(this.dbName, this.version);\n      openDB.addEventListener(\"upgradeneeded\", e => {\n        const event = e;\n        event.target.result.createObjectStore(this.tableName);\n      });\n      openDB.addEventListener(\"success\", e => {\n        const event = e;\n        this.db = event.target.result;\n        this.dbOpen = true;\n        resolve();\n      });\n      openDB.addEventListener(\"error\", () => reject(createBrowserAuthError(databaseUnavailable)));\n    });\n  }\n  /**\r\n   * Closes the connection to IndexedDB database when all pending transactions\r\n   * complete.\r\n   */\n  closeConnection() {\n    const db = this.db;\n    if (db && this.dbOpen) {\n      db.close();\n      this.dbOpen = false;\n    }\n  }\n  /**\r\n   * Opens database if it's not already open\r\n   */\n  async validateDbIsOpen() {\n    if (!this.dbOpen) {\n      return this.open();\n    }\n  }\n  /**\r\n   * Retrieves item from IndexedDB instance.\r\n   * @param key\r\n   */\n  async getItem(key) {\n    await this.validateDbIsOpen();\n    return new Promise((resolve, reject) => {\n      // TODO: Add timeouts?\n      if (!this.db) {\n        return reject(createBrowserAuthError(databaseNotOpen));\n      }\n      const transaction = this.db.transaction([this.tableName], \"readonly\");\n      const objectStore = transaction.objectStore(this.tableName);\n      const dbGet = objectStore.get(key);\n      dbGet.addEventListener(\"success\", e => {\n        const event = e;\n        this.closeConnection();\n        resolve(event.target.result);\n      });\n      dbGet.addEventListener(\"error\", e => {\n        this.closeConnection();\n        reject(e);\n      });\n    });\n  }\n  /**\r\n   * Adds item to IndexedDB under given key\r\n   * @param key\r\n   * @param payload\r\n   */\n  async setItem(key, payload) {\n    await this.validateDbIsOpen();\n    return new Promise((resolve, reject) => {\n      // TODO: Add timeouts?\n      if (!this.db) {\n        return reject(createBrowserAuthError(databaseNotOpen));\n      }\n      const transaction = this.db.transaction([this.tableName], \"readwrite\");\n      const objectStore = transaction.objectStore(this.tableName);\n      const dbPut = objectStore.put(payload, key);\n      dbPut.addEventListener(\"success\", () => {\n        this.closeConnection();\n        resolve();\n      });\n      dbPut.addEventListener(\"error\", e => {\n        this.closeConnection();\n        reject(e);\n      });\n    });\n  }\n  /**\r\n   * Removes item from IndexedDB under given key\r\n   * @param key\r\n   */\n  async removeItem(key) {\n    await this.validateDbIsOpen();\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        return reject(createBrowserAuthError(databaseNotOpen));\n      }\n      const transaction = this.db.transaction([this.tableName], \"readwrite\");\n      const objectStore = transaction.objectStore(this.tableName);\n      const dbDelete = objectStore.delete(key);\n      dbDelete.addEventListener(\"success\", () => {\n        this.closeConnection();\n        resolve();\n      });\n      dbDelete.addEventListener(\"error\", e => {\n        this.closeConnection();\n        reject(e);\n      });\n    });\n  }\n  /**\r\n   * Get all the keys from the storage object as an iterable array of strings.\r\n   */\n  async getKeys() {\n    await this.validateDbIsOpen();\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        return reject(createBrowserAuthError(databaseNotOpen));\n      }\n      const transaction = this.db.transaction([this.tableName], \"readonly\");\n      const objectStore = transaction.objectStore(this.tableName);\n      const dbGetKeys = objectStore.getAllKeys();\n      dbGetKeys.addEventListener(\"success\", e => {\n        const event = e;\n        this.closeConnection();\n        resolve(event.target.result);\n      });\n      dbGetKeys.addEventListener(\"error\", e => {\n        this.closeConnection();\n        reject(e);\n      });\n    });\n  }\n  /**\r\n   *\r\n   * Checks whether there is an object under the search key in the object store\r\n   */\n  async containsKey(key) {\n    await this.validateDbIsOpen();\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        return reject(createBrowserAuthError(databaseNotOpen));\n      }\n      const transaction = this.db.transaction([this.tableName], \"readonly\");\n      const objectStore = transaction.objectStore(this.tableName);\n      const dbContainsKey = objectStore.count(key);\n      dbContainsKey.addEventListener(\"success\", e => {\n        const event = e;\n        this.closeConnection();\n        resolve(event.target.result === 1);\n      });\n      dbContainsKey.addEventListener(\"error\", e => {\n        this.closeConnection();\n        reject(e);\n      });\n    });\n  }\n  /**\r\n   * Deletes the MSAL database. The database is deleted rather than cleared to make it possible\r\n   * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues\r\n   * with IndexedDB database versions.\r\n   */\n  async deleteDatabase() {\n    // Check if database being deleted exists\n    if (this.db && this.dbOpen) {\n      this.closeConnection();\n    }\n    return new Promise((resolve, reject) => {\n      const deleteDbRequest = window.indexedDB.deleteDatabase(DB_NAME);\n      const id = setTimeout(() => reject(false), 200); // Reject if events aren't raised within 200ms\n      deleteDbRequest.addEventListener(\"success\", () => {\n        clearTimeout(id);\n        return resolve(true);\n      });\n      deleteDbRequest.addEventListener(\"blocked\", () => {\n        clearTimeout(id);\n        return resolve(true);\n      });\n      deleteDbRequest.addEventListener(\"error\", () => {\n        clearTimeout(id);\n        return reject(false);\n      });\n    });\n  }\n}\nexport { DatabaseStorage };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass MemoryStorage {\n  constructor() {\n    this.cache = new Map();\n  }\n  async initialize() {\n    // Memory storage does not require initialization\n  }\n  getItem(key) {\n    return this.cache.get(key) || null;\n  }\n  getUserData(key) {\n    return this.getItem(key);\n  }\n  setItem(key, value) {\n    this.cache.set(key, value);\n  }\n  async setUserData(key, value) {\n    this.setItem(key, value);\n  }\n  removeItem(key) {\n    this.cache.delete(key);\n  }\n  getKeys() {\n    const cacheKeys = [];\n    this.cache.forEach((value, key) => {\n      cacheKeys.push(key);\n    });\n    return cacheKeys;\n  }\n  containsKey(key) {\n    return this.cache.has(key);\n  }\n  clear() {\n    this.cache.clear();\n  }\n}\nexport { MemoryStorage };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\nimport { BrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { DatabaseStorage } from './DatabaseStorage.mjs';\nimport { MemoryStorage } from './MemoryStorage.mjs';\nimport { databaseUnavailable } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This class allows MSAL to store artifacts asynchronously using the DatabaseStorage IndexedDB wrapper,\r\n * backed up with the more volatile MemoryStorage object for cases in which IndexedDB may be unavailable.\r\n */\nclass AsyncMemoryStorage {\n  constructor(logger) {\n    this.inMemoryCache = new MemoryStorage();\n    this.indexedDBCache = new DatabaseStorage();\n    this.logger = logger;\n  }\n  handleDatabaseAccessError(error) {\n    if (error instanceof BrowserAuthError && error.errorCode === databaseUnavailable) {\n      this.logger.error(\"Could not access persistent storage. This may be caused by browser privacy features which block persistent storage in third-party contexts.\");\n    } else {\n      throw error;\n    }\n  }\n  /**\r\n   * Get the item matching the given key. Tries in-memory cache first, then in the asynchronous\r\n   * storage object if item isn't found in-memory.\r\n   * @param key\r\n   */\n  async getItem(key) {\n    const item = this.inMemoryCache.getItem(key);\n    if (!item) {\n      try {\n        this.logger.verbose(\"Queried item not found in in-memory cache, now querying persistent storage.\");\n        return await this.indexedDBCache.getItem(key);\n      } catch (e) {\n        this.handleDatabaseAccessError(e);\n      }\n    }\n    return item;\n  }\n  /**\r\n   * Sets the item in the in-memory cache and then tries to set it in the asynchronous\r\n   * storage object with the given key.\r\n   * @param key\r\n   * @param value\r\n   */\n  async setItem(key, value) {\n    this.inMemoryCache.setItem(key, value);\n    try {\n      await this.indexedDBCache.setItem(key, value);\n    } catch (e) {\n      this.handleDatabaseAccessError(e);\n    }\n  }\n  /**\r\n   * Removes the item matching the key from the in-memory cache, then tries to remove it from the asynchronous storage object.\r\n   * @param key\r\n   */\n  async removeItem(key) {\n    this.inMemoryCache.removeItem(key);\n    try {\n      await this.indexedDBCache.removeItem(key);\n    } catch (e) {\n      this.handleDatabaseAccessError(e);\n    }\n  }\n  /**\r\n   * Get all the keys from the in-memory cache as an iterable array of strings. If no keys are found, query the keys in the\r\n   * asynchronous storage object.\r\n   */\n  async getKeys() {\n    const cacheKeys = this.inMemoryCache.getKeys();\n    if (cacheKeys.length === 0) {\n      try {\n        this.logger.verbose(\"In-memory cache is empty, now querying persistent storage.\");\n        return await this.indexedDBCache.getKeys();\n      } catch (e) {\n        this.handleDatabaseAccessError(e);\n      }\n    }\n    return cacheKeys;\n  }\n  /**\r\n   * Returns true or false if the given key is present in the cache.\r\n   * @param key\r\n   */\n  async containsKey(key) {\n    const containsKey = this.inMemoryCache.containsKey(key);\n    if (!containsKey) {\n      try {\n        this.logger.verbose(\"Key not found in in-memory cache, now querying persistent storage.\");\n        return await this.indexedDBCache.containsKey(key);\n      } catch (e) {\n        this.handleDatabaseAccessError(e);\n      }\n    }\n    return containsKey;\n  }\n  /**\r\n   * Clears in-memory Map\r\n   */\n  clearInMemory() {\n    // InMemory cache is a Map instance, clear is straightforward\n    this.logger.verbose(`Deleting in-memory keystore`);\n    this.inMemoryCache.clear();\n    this.logger.verbose(`In-memory keystore deleted`);\n  }\n  /**\r\n   * Tries to delete the IndexedDB database\r\n   * @returns\r\n   */\n  async clearPersistent() {\n    try {\n      this.logger.verbose(\"Deleting persistent keystore\");\n      const dbDeleted = await this.indexedDBCache.deleteDatabase();\n      if (dbDeleted) {\n        this.logger.verbose(\"Persistent keystore deleted\");\n      }\n      return dbDeleted;\n    } catch (e) {\n      this.handleDatabaseAccessError(e);\n      return false;\n    }\n  }\n}\nexport { AsyncMemoryStorage };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\nimport { PerformanceEvents, JoseHeader } from '@azure/msal-common/browser';\nimport { base64Encode, urlEncode, urlEncodeArr } from '../encode/Base64Encode.mjs';\nimport { base64Decode } from '../encode/Base64Decode.mjs';\nimport { validateCryptoAvailable, createNewGuid, generateKeyPair, exportJwk, importJwk, sign, hashString } from './BrowserCrypto.mjs';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { AsyncMemoryStorage } from '../cache/AsyncMemoryStorage.mjs';\nimport { cryptoKeyNotFound } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n */\nclass CryptoOps {\n  constructor(logger, performanceClient, skipValidateSubtleCrypto) {\n    this.logger = logger;\n    // Browser crypto needs to be validated first before any other classes can be set.\n    validateCryptoAvailable(skipValidateSubtleCrypto ?? false);\n    this.cache = new AsyncMemoryStorage(this.logger);\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Creates a new random GUID - used to populate state and nonce.\r\n   * @returns string (GUID)\r\n   */\n  createNewGuid() {\n    return createNewGuid();\n  }\n  /**\r\n   * Encodes input string to base64.\r\n   * @param input\r\n   */\n  base64Encode(input) {\n    return base64Encode(input);\n  }\n  /**\r\n   * Decodes input string from base64.\r\n   * @param input\r\n   */\n  base64Decode(input) {\n    return base64Decode(input);\n  }\n  /**\r\n   * Encodes input string to base64 URL safe string.\r\n   * @param input\r\n   */\n  base64UrlEncode(input) {\n    return urlEncode(input);\n  }\n  /**\r\n   * Stringifies and base64Url encodes input public key\r\n   * @param inputKid\r\n   * @returns Base64Url encoded public key\r\n   */\n  encodeKid(inputKid) {\n    return this.base64UrlEncode(JSON.stringify({\n      kid: inputKid\n    }));\n  }\n  /**\r\n   * Generates a keypair, stores it and returns a thumbprint\r\n   * @param request\r\n   */\n  async getPublicKeyThumbprint(request) {\n    const publicKeyThumbMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.CryptoOptsGetPublicKeyThumbprint, request.correlationId);\n    // Generate Keypair\n    const keyPair = await generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES);\n    // Generate Thumbprint for Public Key\n    const publicKeyJwk = await exportJwk(keyPair.publicKey);\n    const pubKeyThumprintObj = {\n      e: publicKeyJwk.e,\n      kty: publicKeyJwk.kty,\n      n: publicKeyJwk.n\n    };\n    const publicJwkString = getSortedObjectString(pubKeyThumprintObj);\n    const publicJwkHash = await this.hashString(publicJwkString);\n    // Generate Thumbprint for Private Key\n    const privateKeyJwk = await exportJwk(keyPair.privateKey);\n    // Re-import private key to make it unextractable\n    const unextractablePrivateKey = await importJwk(privateKeyJwk, false, [\"sign\"]);\n    // Store Keypair data in keystore\n    await this.cache.setItem(publicJwkHash, {\n      privateKey: unextractablePrivateKey,\n      publicKey: keyPair.publicKey,\n      requestMethod: request.resourceRequestMethod,\n      requestUri: request.resourceRequestUri\n    });\n    if (publicKeyThumbMeasurement) {\n      publicKeyThumbMeasurement.end({\n        success: true\n      });\n    }\n    return publicJwkHash;\n  }\n  /**\r\n   * Removes cryptographic keypair from key store matching the keyId passed in\r\n   * @param kid\r\n   */\n  async removeTokenBindingKey(kid) {\n    await this.cache.removeItem(kid);\n    const keyFound = await this.cache.containsKey(kid);\n    return !keyFound;\n  }\n  /**\r\n   * Removes all cryptographic keys from IndexedDB storage\r\n   */\n  async clearKeystore() {\n    // Delete in-memory keystores\n    this.cache.clearInMemory();\n    /**\r\n     * There is only one database, so calling clearPersistent on asymmetric keystore takes care of\r\n     * every persistent keystore\r\n     */\n    try {\n      await this.cache.clearPersistent();\n      return true;\n    } catch (e) {\n      if (e instanceof Error) {\n        this.logger.error(`Clearing keystore failed with error: ${e.message}`);\n      } else {\n        this.logger.error(\"Clearing keystore failed with unknown error\");\n      }\n      return false;\n    }\n  }\n  /**\r\n   * Signs the given object as a jwt payload with private key retrieved by given kid.\r\n   * @param payload\r\n   * @param kid\r\n   */\n  async signJwt(payload, kid, shrOptions, correlationId) {\n    const signJwtMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.CryptoOptsSignJwt, correlationId);\n    const cachedKeyPair = await this.cache.getItem(kid);\n    if (!cachedKeyPair) {\n      throw createBrowserAuthError(cryptoKeyNotFound);\n    }\n    // Get public key as JWK\n    const publicKeyJwk = await exportJwk(cachedKeyPair.publicKey);\n    const publicKeyJwkString = getSortedObjectString(publicKeyJwk);\n    // Base64URL encode public key thumbprint with keyId only: BASE64URL({ kid: \"FULL_PUBLIC_KEY_HASH\" })\n    const encodedKeyIdThumbprint = urlEncode(JSON.stringify({\n      kid: kid\n    }));\n    // Generate header\n    const shrHeader = JoseHeader.getShrHeaderString({\n      ...shrOptions?.header,\n      alg: publicKeyJwk.alg,\n      kid: encodedKeyIdThumbprint\n    });\n    const encodedShrHeader = urlEncode(shrHeader);\n    // Generate payload\n    payload.cnf = {\n      jwk: JSON.parse(publicKeyJwkString)\n    };\n    const encodedPayload = urlEncode(JSON.stringify(payload));\n    // Form token string\n    const tokenString = `${encodedShrHeader}.${encodedPayload}`;\n    // Sign token\n    const encoder = new TextEncoder();\n    const tokenBuffer = encoder.encode(tokenString);\n    const signatureBuffer = await sign(cachedKeyPair.privateKey, tokenBuffer);\n    const encodedSignature = urlEncodeArr(new Uint8Array(signatureBuffer));\n    const signedJwt = `${tokenString}.${encodedSignature}`;\n    if (signJwtMeasurement) {\n      signJwtMeasurement.end({\n        success: true\n      });\n    }\n    return signedJwt;\n  }\n  /**\r\n   * Returns the SHA-256 hash of an input string\r\n   * @param plainText\r\n   */\n  async hashString(plainText) {\n    return hashString(plainText);\n  }\n}\nCryptoOps.POP_KEY_USAGES = [\"sign\", \"verify\"];\nCryptoOps.EXTRACTABLE = true;\nfunction getSortedObjectString(obj) {\n  return JSON.stringify(obj, Object.keys(obj).sort());\n}\nexport { CryptoOps };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\nimport { createClientAuthError, ClientAuthErrorCodes } from '@azure/msal-common/browser';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n// Cookie life calculation (hours * minutes * seconds * ms)\nconst COOKIE_LIFE_MULTIPLIER = 24 * 60 * 60 * 1000;\nconst SameSiteOptions = {\n  Lax: \"Lax\",\n  None: \"None\"\n};\nclass CookieStorage {\n  initialize() {\n    return Promise.resolve();\n  }\n  getItem(key) {\n    const name = `${encodeURIComponent(key)}`;\n    const cookieList = document.cookie.split(\";\");\n    for (let i = 0; i < cookieList.length; i++) {\n      const cookie = cookieList[i];\n      const [key, ...rest] = decodeURIComponent(cookie).trim().split(\"=\");\n      const value = rest.join(\"=\");\n      if (key === name) {\n        return value;\n      }\n    }\n    return \"\";\n  }\n  getUserData() {\n    throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n  }\n  setItem(key, value, cookieLifeDays, secure = true, sameSite = SameSiteOptions.Lax) {\n    let cookieStr = `${encodeURIComponent(key)}=${encodeURIComponent(value)};path=/;SameSite=${sameSite};`;\n    if (cookieLifeDays) {\n      const expireTime = getCookieExpirationTime(cookieLifeDays);\n      cookieStr += `expires=${expireTime};`;\n    }\n    if (secure || sameSite === SameSiteOptions.None) {\n      // SameSite None requires Secure flag\n      cookieStr += \"Secure;\";\n    }\n    document.cookie = cookieStr;\n  }\n  async setUserData() {\n    return Promise.reject(createClientAuthError(ClientAuthErrorCodes.methodNotImplemented));\n  }\n  removeItem(key) {\n    // Setting expiration to -1 removes it\n    this.setItem(key, \"\", -1);\n  }\n  getKeys() {\n    const cookieList = document.cookie.split(\";\");\n    const keys = [];\n    cookieList.forEach(cookie => {\n      const cookieParts = decodeURIComponent(cookie).trim().split(\"=\");\n      keys.push(cookieParts[0]);\n    });\n    return keys;\n  }\n  containsKey(key) {\n    return this.getKeys().includes(key);\n  }\n}\n/**\r\n * Get cookie expiration time\r\n * @param cookieLifeDays\r\n */\nfunction getCookieExpirationTime(cookieLifeDays) {\n  const today = new Date();\n  const expr = new Date(today.getTime() + cookieLifeDays * COOKIE_LIFE_MULTIPLIER);\n  return expr.toUTCString();\n}\nexport { CookieStorage, SameSiteOptions, getCookieExpirationTime };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst EventType = {\n  INITIALIZE_START: \"msal:initializeStart\",\n  INITIALIZE_END: \"msal:initializeEnd\",\n  ACCOUNT_ADDED: \"msal:accountAdded\",\n  ACCOUNT_REMOVED: \"msal:accountRemoved\",\n  ACTIVE_ACCOUNT_CHANGED: \"msal:activeAccountChanged\",\n  LOGIN_START: \"msal:loginStart\",\n  LOGIN_SUCCESS: \"msal:loginSuccess\",\n  LOGIN_FAILURE: \"msal:loginFailure\",\n  ACQUIRE_TOKEN_START: \"msal:acquireTokenStart\",\n  ACQUIRE_TOKEN_SUCCESS: \"msal:acquireTokenSuccess\",\n  ACQUIRE_TOKEN_FAILURE: \"msal:acquireTokenFailure\",\n  ACQUIRE_TOKEN_NETWORK_START: \"msal:acquireTokenFromNetworkStart\",\n  SSO_SILENT_START: \"msal:ssoSilentStart\",\n  SSO_SILENT_SUCCESS: \"msal:ssoSilentSuccess\",\n  SSO_SILENT_FAILURE: \"msal:ssoSilentFailure\",\n  ACQUIRE_TOKEN_BY_CODE_START: \"msal:acquireTokenByCodeStart\",\n  ACQUIRE_TOKEN_BY_CODE_SUCCESS: \"msal:acquireTokenByCodeSuccess\",\n  ACQUIRE_TOKEN_BY_CODE_FAILURE: \"msal:acquireTokenByCodeFailure\",\n  HANDLE_REDIRECT_START: \"msal:handleRedirectStart\",\n  HANDLE_REDIRECT_END: \"msal:handleRedirectEnd\",\n  POPUP_OPENED: \"msal:popupOpened\",\n  LOGOUT_START: \"msal:logoutStart\",\n  LOGOUT_SUCCESS: \"msal:logoutSuccess\",\n  LOGOUT_FAILURE: \"msal:logoutFailure\",\n  LOGOUT_END: \"msal:logoutEnd\",\n  RESTORE_FROM_BFCACHE: \"msal:restoreFromBFCache\"\n};\nexport { EventType };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst contentError = \"ContentError\";\nconst userSwitch = \"user_switch\";\nexport { contentError, userSwitch };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\nimport { AuthError, InteractionRequiredAuthError, createInteractionRequiredAuthError, InteractionRequiredAuthErrorCodes } from '@azure/msal-common/browser';\nimport { createBrowserAuthError } from './BrowserAuthError.mjs';\nimport { contentError, userSwitch } from './NativeAuthErrorCodes.mjs';\nimport { PERSISTENT_ERROR, DISABLED, NO_NETWORK, USER_CANCEL, USER_INTERACTION_REQUIRED, ACCOUNT_UNAVAILABLE } from '../broker/nativeBroker/NativeStatusCodes.mjs';\nimport { noNetworkConnectivity, userCancelled } from './BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst INVALID_METHOD_ERROR = -2147186943;\nconst NativeAuthErrorMessages = {\n  [userSwitch]: \"User attempted to switch accounts in the native broker, which is not allowed. All new accounts must sign-in through the standard web flow first, please try again.\"\n};\nclass NativeAuthError extends AuthError {\n  constructor(errorCode, description, ext) {\n    super(errorCode, description);\n    Object.setPrototypeOf(this, NativeAuthError.prototype);\n    this.name = \"NativeAuthError\";\n    this.ext = ext;\n  }\n}\n/**\r\n * These errors should result in a fallback to the 'standard' browser based auth flow.\r\n */\nfunction isFatalNativeAuthError(error) {\n  if (error.ext && error.ext.status && (error.ext.status === PERSISTENT_ERROR || error.ext.status === DISABLED)) {\n    return true;\n  }\n  if (error.ext && error.ext.error && error.ext.error === INVALID_METHOD_ERROR) {\n    return true;\n  }\n  switch (error.errorCode) {\n    case contentError:\n      return true;\n    default:\n      return false;\n  }\n}\n/**\r\n * Create the appropriate error object based on the WAM status code.\r\n * @param code\r\n * @param description\r\n * @param ext\r\n * @returns\r\n */\nfunction createNativeAuthError(code, description, ext) {\n  if (ext && ext.status) {\n    switch (ext.status) {\n      case ACCOUNT_UNAVAILABLE:\n        return createInteractionRequiredAuthError(InteractionRequiredAuthErrorCodes.nativeAccountUnavailable);\n      case USER_INTERACTION_REQUIRED:\n        return new InteractionRequiredAuthError(code, description);\n      case USER_CANCEL:\n        return createBrowserAuthError(userCancelled);\n      case NO_NETWORK:\n        return createBrowserAuthError(noNetworkConnectivity);\n    }\n  }\n  return new NativeAuthError(code, NativeAuthErrorMessages[code] || description, ext);\n}\nexport { NativeAuthError, NativeAuthErrorMessages, createNativeAuthError, isFatalNativeAuthError };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\nimport { BaseOperatingContext } from './BaseOperatingContext.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass UnknownOperatingContext extends BaseOperatingContext {\n  /**\r\n   * Returns the unique identifier for this operating context\r\n   * @returns string\r\n   */\n  getId() {\n    return UnknownOperatingContext.ID;\n  }\n  /**\r\n   * Return the module name.  Intended for use with import() to enable dynamic import\r\n   * of the implementation associated with this operating context\r\n   * @returns\r\n   */\n  getModuleName() {\n    return UnknownOperatingContext.MODULE_NAME;\n  }\n  /**\r\n   * Checks whether the operating context is available.\r\n   * Confirms that the code is running a browser rather.  This is required.\r\n   * @returns Promise<boolean> indicating whether this operating context is currently available.\r\n   */\n  async initialize() {\n    /**\r\n     * This operating context is in use when we have not checked for what the operating context is.\r\n     * The context is unknown until we check it.\r\n     */\n    return true;\n  }\n}\n/*\r\n * TODO: Once we have determine the bundling code return here to specify the name of the bundle\r\n * containing the implementation for this operating context\r\n */\nUnknownOperatingContext.MODULE_NAME = \"\";\n/**\r\n * Unique identifier for the operating context\r\n */\nUnknownOperatingContext.ID = \"UnknownOperatingContext\";\nexport { UnknownOperatingContext };\n", "/*! @azure/msal-browser v4.5.0 2025-02-26 */\n'use strict';\n\nimport { EventType } from './EventType.mjs';\nimport { InteractionType, InteractionStatus } from '../utils/BrowserConstants.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass EventMessageUtils {\n  /**\r\n   * Gets interaction status from event message\r\n   * @param message\r\n   * @param currentStatus\r\n   */\n  static getInteractionStatusFromEvent(message, currentStatus) {\n    switch (message.eventType) {\n      case EventType.LOGIN_START:\n        return InteractionStatus.Login;\n      case EventType.SSO_SILENT_START:\n        return InteractionStatus.SsoSilent;\n      case EventType.ACQUIRE_TOKEN_START:\n        if (message.interactionType === InteractionType.Redirect || message.interactionType === InteractionType.Popup) {\n          return InteractionStatus.AcquireToken;\n        }\n        break;\n      case EventType.HANDLE_REDIRECT_START:\n        return InteractionStatus.HandleRedirect;\n      case EventType.LOGOUT_START:\n        return InteractionStatus.Logout;\n      case EventType.SSO_SILENT_SUCCESS:\n      case EventType.SSO_SILENT_FAILURE:\n        if (currentStatus && currentStatus !== InteractionStatus.SsoSilent) {\n          // Prevent this event from clearing any status other than ssoSilent\n          break;\n        }\n        return InteractionStatus.None;\n      case EventType.LOGOUT_END:\n        if (currentStatus && currentStatus !== InteractionStatus.Logout) {\n          // Prevent this event from clearing any status other than logout\n          break;\n        }\n        return InteractionStatus.None;\n      case EventType.HANDLE_REDIRECT_END:\n        if (currentStatus && currentStatus !== InteractionStatus.HandleRedirect) {\n          // Prevent this event from clearing any status other than handleRedirect\n          break;\n        }\n        return InteractionStatus.None;\n      case EventType.LOGIN_SUCCESS:\n      case EventType.LOGIN_FAILURE:\n      case EventType.ACQUIRE_TOKEN_SUCCESS:\n      case EventType.ACQUIRE_TOKEN_FAILURE:\n      case EventType.RESTORE_FROM_BFCACHE:\n        if (message.interactionType === InteractionType.Redirect || message.interactionType === InteractionType.Popup) {\n          if (currentStatus && currentStatus !== InteractionStatus.Login && currentStatus !== InteractionStatus.AcquireToken) {\n            // Prevent this event from clearing any status other than login or acquireToken\n            break;\n          }\n          return InteractionStatus.None;\n        }\n        break;\n    }\n    return null;\n  }\n}\nexport { EventMessageUtils };\n", "import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, Optional, Component, NgModule } from '@angular/core';\nimport { WrapperSKU, InteractionStatus, EventMessageUtils, InteractionType, BrowserConfigurationAuthError, UrlString, BrowserUtils, StringUtils, NavigationClient } from '@azure/msal-browser';\nimport { from, ReplaySubject, Subject, BehaviorSubject, of, EMPTY } from 'rxjs';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { map, concatMap, catchError, switchMap, take, filter } from 'rxjs/operators';\nimport * as i4 from '@angular/router';\nimport { __awaiter } from 'tslib';\n\n/* eslint-disable header/header */\nconst name = \"@azure/msal-angular\";\nconst version = \"4.0.5\";\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst MSAL_INSTANCE = new InjectionToken(\"MSAL_INSTANCE\");\nconst MSAL_GUARD_CONFIG = new InjectionToken(\"MSAL_GUARD_CONFIG\");\nconst MSAL_INTERCEPTOR_CONFIG = new InjectionToken(\"MSAL_INTERCEPTOR_CONFIG\");\nconst MSAL_BROADCAST_CONFIG = new InjectionToken(\"MSAL_BROADCAST_CONFIG\");\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass MsalService {\n  constructor(instance, location) {\n    this.instance = instance;\n    this.location = location;\n    const hash = this.location.path(true).split(\"#\").pop();\n    if (hash) {\n      this.redirectHash = `#${hash}`;\n    }\n    this.instance.initializeWrapperLibrary(WrapperSKU.Angular, version);\n  }\n  initialize() {\n    return from(this.instance.initialize());\n  }\n  acquireTokenPopup(request) {\n    return from(this.instance.acquireTokenPopup(request));\n  }\n  acquireTokenRedirect(request) {\n    return from(this.instance.acquireTokenRedirect(request));\n  }\n  acquireTokenSilent(silentRequest) {\n    return from(this.instance.acquireTokenSilent(silentRequest));\n  }\n  handleRedirectObservable(hash) {\n    return from(this.instance.initialize().then(() => this.instance.handleRedirectPromise(hash || this.redirectHash)));\n  }\n  loginPopup(request) {\n    return from(this.instance.loginPopup(request));\n  }\n  loginRedirect(request) {\n    return from(this.instance.loginRedirect(request));\n  }\n  logout(logoutRequest) {\n    return from(this.instance.logout(logoutRequest));\n  }\n  logoutRedirect(logoutRequest) {\n    return from(this.instance.logoutRedirect(logoutRequest));\n  }\n  logoutPopup(logoutRequest) {\n    return from(this.instance.logoutPopup(logoutRequest));\n  }\n  ssoSilent(request) {\n    return from(this.instance.ssoSilent(request));\n  }\n  /**\r\n   * Gets logger for msal-angular.\r\n   * If no logger set, returns logger instance created with same options as msal-browser\r\n   */\n  getLogger() {\n    if (!this.logger) {\n      this.logger = this.instance.getLogger().clone(name, version);\n    }\n    return this.logger;\n  }\n  // Create a logger instance for msal-angular with the same options as msal-browser\n  setLogger(logger) {\n    this.logger = logger.clone(name, version);\n    this.instance.setLogger(logger);\n  }\n}\nMsalService.ɵfac = function MsalService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || MsalService)(i0.ɵɵinject(MSAL_INSTANCE), i0.ɵɵinject(i3.Location));\n};\nMsalService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MsalService,\n  factory: MsalService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MsalService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MSAL_INSTANCE]\n      }]\n    }, {\n      type: i3.Location\n    }];\n  }, null);\n})();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass MsalBroadcastService {\n  constructor(msalInstance, authService, msalBroadcastConfig) {\n    this.msalInstance = msalInstance;\n    this.authService = authService;\n    this.msalBroadcastConfig = msalBroadcastConfig;\n    // Make _msalSubject a ReplaySubject if configured to replay past events\n    if (this.msalBroadcastConfig && this.msalBroadcastConfig.eventsToReplay > 0) {\n      this.authService.getLogger().verbose(`BroadcastService - eventsToReplay set on BroadcastConfig, replaying the last ${this.msalBroadcastConfig.eventsToReplay} events`);\n      this._msalSubject = new ReplaySubject(this.msalBroadcastConfig.eventsToReplay);\n    } else {\n      // Defaults to _msalSubject being a Subject\n      this._msalSubject = new Subject();\n    }\n    this.msalSubject$ = this._msalSubject.asObservable();\n    // InProgress as BehaviorSubject so most recent inProgress state will be available upon subscription\n    this._inProgress = new BehaviorSubject(InteractionStatus.Startup);\n    this.inProgress$ = this._inProgress.asObservable();\n    this.msalInstance.addEventCallback(message => {\n      this._msalSubject.next(message);\n      const status = EventMessageUtils.getInteractionStatusFromEvent(message, this._inProgress.value);\n      if (status !== null) {\n        this.authService.getLogger().verbose(`BroadcastService - ${message.eventType} results in setting inProgress from ${this._inProgress.value} to ${status}`);\n        this._inProgress.next(status);\n      }\n    });\n  }\n}\nMsalBroadcastService.ɵfac = function MsalBroadcastService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || MsalBroadcastService)(i0.ɵɵinject(MSAL_INSTANCE), i0.ɵɵinject(MsalService), i0.ɵɵinject(MSAL_BROADCAST_CONFIG, 8));\n};\nMsalBroadcastService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MsalBroadcastService,\n  factory: MsalBroadcastService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MsalBroadcastService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MSAL_INSTANCE]\n      }]\n    }, {\n      type: MsalService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MSAL_BROADCAST_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass MsalGuard {\n  constructor(msalGuardConfig, msalBroadcastService, authService, location, router) {\n    this.msalGuardConfig = msalGuardConfig;\n    this.msalBroadcastService = msalBroadcastService;\n    this.authService = authService;\n    this.location = location;\n    this.router = router;\n    // Subscribing so events in MsalGuard will set inProgress$ observable\n    this.msalBroadcastService.inProgress$.subscribe();\n  }\n  /**\r\n   * Parses url string to UrlTree\r\n   * @param url\r\n   */\n  parseUrl(url) {\n    return this.router.parseUrl(url);\n  }\n  /**\r\n   * Builds the absolute url for the destination page\r\n   * @param path Relative path of requested page\r\n   * @returns Full destination url\r\n   */\n  getDestinationUrl(path) {\n    this.authService.getLogger().verbose(\"Guard - getting destination url\");\n    // Absolute base url for the application (default to origin if base element not present)\n    const baseElements = document.getElementsByTagName(\"base\");\n    const baseUrl = this.location.normalize(baseElements.length ? baseElements[0].href : window.location.origin);\n    // Path of page (including hash, if using hash routing)\n    const pathUrl = this.location.prepareExternalUrl(path);\n    // Hash location strategy\n    if (pathUrl.startsWith(\"#\")) {\n      this.authService.getLogger().verbose(\"Guard - destination by hash routing\");\n      return `${baseUrl}/${pathUrl}`;\n    }\n    /*\r\n     * If using path location strategy, pathUrl will include the relative portion of the base path (e.g. /base/page).\r\n     * Since baseUrl also includes /base, can just concatentate baseUrl + path\r\n     */\n    return `${baseUrl}${path}`;\n  }\n  /**\r\n   * Interactively prompt the user to login\r\n   * @param url Path of the requested page\r\n   */\n  loginInteractively(state) {\n    const authRequest = typeof this.msalGuardConfig.authRequest === \"function\" ? this.msalGuardConfig.authRequest(this.authService, state) : Object.assign({}, this.msalGuardConfig.authRequest);\n    if (this.msalGuardConfig.interactionType === InteractionType.Popup) {\n      this.authService.getLogger().verbose(\"Guard - logging in by popup\");\n      return this.authService.loginPopup(authRequest).pipe(map(response => {\n        this.authService.getLogger().verbose(\"Guard - login by popup successful, can activate, setting active account\");\n        this.authService.instance.setActiveAccount(response.account);\n        return true;\n      }));\n    }\n    this.authService.getLogger().verbose(\"Guard - logging in by redirect\");\n    const redirectStartPage = this.getDestinationUrl(state.url);\n    return this.authService.loginRedirect(Object.assign({\n      redirectStartPage\n    }, authRequest)).pipe(map(() => false));\n  }\n  /**\r\n   * Helper which checks for the correct interaction type, prevents page with Guard to be set as redirect, and calls handleRedirectObservable\r\n   * @param state\r\n   */\n  activateHelper(state) {\n    if (this.msalGuardConfig.interactionType !== InteractionType.Popup && this.msalGuardConfig.interactionType !== InteractionType.Redirect) {\n      throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Guard. InteractionType.Popup or InteractionType.Redirect must be provided in the MsalGuardConfiguration\");\n    }\n    this.authService.getLogger().verbose(\"MSAL Guard activated\");\n    /*\r\n     * If a page with MSAL Guard is set as the redirect for acquireTokenSilent,\r\n     * short-circuit to prevent redirecting or popups.\r\n     */\n    if (typeof window !== \"undefined\") {\n      if (UrlString.hashContainsKnownProperties(window.location.hash) && BrowserUtils.isInIframe() && !this.authService.instance.getConfiguration().system.allowRedirectInIframe) {\n        this.authService.getLogger().warning(\"Guard - redirectUri set to page with MSAL Guard. It is recommended to not set redirectUri to a page that requires authentication.\");\n        return of(false);\n      }\n    } else {\n      this.authService.getLogger().info(\"Guard - window is undefined, MSAL does not support server-side token acquisition\");\n      return of(true);\n    }\n    /**\r\n     * If a loginFailedRoute is set in the config, set this as the loginFailedRoute\r\n     */\n    if (this.msalGuardConfig.loginFailedRoute) {\n      this.loginFailedRoute = this.parseUrl(this.msalGuardConfig.loginFailedRoute);\n    }\n    // Capture current path before it gets changed by handleRedirectObservable\n    const currentPath = this.location.path(true);\n    return this.authService.initialize().pipe(concatMap(() => {\n      return this.authService.handleRedirectObservable();\n    }), concatMap(() => {\n      if (!this.authService.instance.getAllAccounts().length) {\n        if (state) {\n          this.authService.getLogger().verbose(\"Guard - no accounts retrieved, log in required to activate\");\n          return this.loginInteractively(state);\n        }\n        this.authService.getLogger().verbose(\"Guard - no accounts retrieved, no state, cannot load\");\n        return of(false);\n      }\n      this.authService.getLogger().verbose(\"Guard - at least 1 account exists, can activate or load\");\n      // Prevent navigating the app to /#code= or /code=\n      if (state) {\n        /*\r\n         * Path routing:\r\n         * state.url: /#code=...\r\n         * state.root.fragment: code=...\r\n         */\n        /*\r\n         * Hash routing:\r\n         * state.url: /code\r\n         * state.root.fragment: null\r\n         */\n        const urlContainsCode = this.includesCode(state.url);\n        const fragmentContainsCode = !!state.root && !!state.root.fragment && this.includesCode(`#${state.root.fragment}`);\n        const hashRouting = this.location.prepareExternalUrl(state.url).indexOf(\"#\") === 0;\n        // Ensure code parameter is in fragment (and not in query parameter), or that hash hash routing is used\n        if (urlContainsCode && (fragmentContainsCode || hashRouting)) {\n          this.authService.getLogger().info(\"Guard - Hash contains known code response, stopping navigation.\");\n          // Path routing (navigate to current path without hash)\n          if (currentPath.indexOf(\"#\") > -1) {\n            return of(this.parseUrl(this.location.path()));\n          }\n          // Hash routing (navigate to root path)\n          return of(this.parseUrl(\"\"));\n        }\n      }\n      return of(true);\n    }), catchError(error => {\n      this.authService.getLogger().error(\"Guard - error while logging in, unable to activate\");\n      this.authService.getLogger().errorPii(`Guard - error: ${error.message}`);\n      /**\r\n       * If a loginFailedRoute is set, checks to see if state is passed before returning route\r\n       */\n      if (this.loginFailedRoute && state) {\n        this.authService.getLogger().verbose(\"Guard - loginFailedRoute set, redirecting\");\n        return of(this.loginFailedRoute);\n      }\n      return of(false);\n    }));\n  }\n  includesCode(path) {\n    return path.lastIndexOf(\"/code\") > -1 && path.lastIndexOf(\"/code\") === path.length - \"/code\".length ||\n    // path.endsWith(\"/code\")\n    path.indexOf(\"#code=\") > -1 || path.indexOf(\"&code=\") > -1;\n  }\n  canActivate(route, state) {\n    this.authService.getLogger().verbose(\"Guard - canActivate\");\n    return this.activateHelper(state);\n  }\n  canActivateChild(route, state) {\n    this.authService.getLogger().verbose(\"Guard - canActivateChild\");\n    return this.activateHelper(state);\n  }\n  canMatch() {\n    this.authService.getLogger().verbose(\"Guard - canLoad\");\n    return this.activateHelper();\n  }\n}\nMsalGuard.ɵfac = function MsalGuard_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || MsalGuard)(i0.ɵɵinject(MSAL_GUARD_CONFIG), i0.ɵɵinject(MsalBroadcastService), i0.ɵɵinject(MsalService), i0.ɵɵinject(i3.Location), i0.ɵɵinject(i4.Router));\n};\nMsalGuard.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MsalGuard,\n  factory: MsalGuard.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MsalGuard, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MSAL_GUARD_CONFIG]\n      }]\n    }, {\n      type: MsalBroadcastService\n    }, {\n      type: MsalService\n    }, {\n      type: i3.Location\n    }, {\n      type: i4.Router\n    }];\n  }, null);\n})();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass MsalInterceptor {\n  constructor(msalInterceptorConfig, authService, location, msalBroadcastService,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  document) {\n    this.msalInterceptorConfig = msalInterceptorConfig;\n    this.authService = authService;\n    this.location = location;\n    this.msalBroadcastService = msalBroadcastService;\n    this._document = document;\n  }\n  intercept(req,\n  // eslint-disable-line @typescript-eslint/no-explicit-any\n  next\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ) {\n    if (this.msalInterceptorConfig.interactionType !== InteractionType.Popup && this.msalInterceptorConfig.interactionType !== InteractionType.Redirect) {\n      throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Interceptor. InteractionType.Popup, InteractionType.Redirect must be provided in the msalInterceptorConfiguration\");\n    }\n    this.authService.getLogger().verbose(\"MSAL Interceptor activated\");\n    const scopes = this.getScopesForEndpoint(req.url, req.method);\n    // If no scopes for endpoint, does not acquire token\n    if (!scopes || scopes.length === 0) {\n      this.authService.getLogger().verbose(\"Interceptor - no scopes for endpoint\");\n      return next.handle(req);\n    }\n    // Sets account as active account or first account\n    let account;\n    if (!!this.authService.instance.getActiveAccount()) {\n      this.authService.getLogger().verbose(\"Interceptor - active account selected\");\n      account = this.authService.instance.getActiveAccount();\n    } else {\n      this.authService.getLogger().verbose(\"Interceptor - no active account, fallback to first account\");\n      account = this.authService.instance.getAllAccounts()[0];\n    }\n    const authRequest = typeof this.msalInterceptorConfig.authRequest === \"function\" ? this.msalInterceptorConfig.authRequest(this.authService, req, {\n      account: account\n    }) : Object.assign(Object.assign({}, this.msalInterceptorConfig.authRequest), {\n      account\n    });\n    this.authService.getLogger().info(`Interceptor - ${scopes.length} scopes found for endpoint`);\n    this.authService.getLogger().infoPii(`Interceptor - [${scopes}] scopes found for ${req.url}`);\n    return this.acquireToken(authRequest, scopes, account).pipe(switchMap(result => {\n      this.authService.getLogger().verbose(\"Interceptor - setting authorization headers\");\n      const headers = req.headers.set(\"Authorization\", `Bearer ${result.accessToken}`);\n      const requestClone = req.clone({\n        headers\n      });\n      return next.handle(requestClone);\n    }));\n  }\n  /**\r\n   * Try to acquire token silently. Invoke interaction if acquireTokenSilent rejected with error or resolved with null access token\r\n   * @param authRequest Request\r\n   * @param scopes Array of scopes for the request\r\n   * @param account Account\r\n   * @returns Authentication result\r\n   */\n  acquireToken(authRequest, scopes, account) {\n    // Note: For MSA accounts, include openid scope when calling acquireTokenSilent to return idToken\n    return this.authService.acquireTokenSilent(Object.assign(Object.assign({}, authRequest), {\n      scopes,\n      account\n    })).pipe(catchError(() => {\n      this.authService.getLogger().error(\"Interceptor - acquireTokenSilent rejected with error. Invoking interaction to resolve.\");\n      return this.msalBroadcastService.inProgress$.pipe(take(1), switchMap(status => {\n        if (status === InteractionStatus.None) {\n          return this.acquireTokenInteractively(authRequest, scopes);\n        }\n        return this.msalBroadcastService.inProgress$.pipe(filter(status => status === InteractionStatus.None), take(1), switchMap(() => this.acquireToken(authRequest, scopes, account)));\n      }));\n    }), switchMap(result => {\n      if (!result.accessToken) {\n        this.authService.getLogger().error(\"Interceptor - acquireTokenSilent resolved with null access token. Known issue with B2C tenants, invoking interaction to resolve.\");\n        return this.msalBroadcastService.inProgress$.pipe(filter(status => status === InteractionStatus.None), take(1), switchMap(() => this.acquireTokenInteractively(authRequest, scopes)));\n      }\n      return of(result);\n    }));\n  }\n  /**\r\n   * Invoke interaction for the given set of scopes\r\n   * @param authRequest Request\r\n   * @param scopes Array of scopes for the request\r\n   * @returns Result from the interactive request\r\n   */\n  acquireTokenInteractively(authRequest, scopes) {\n    if (this.msalInterceptorConfig.interactionType === InteractionType.Popup) {\n      this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by popup\");\n      return this.authService.acquireTokenPopup(Object.assign(Object.assign({}, authRequest), {\n        scopes\n      }));\n    }\n    this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by redirect\");\n    const redirectStartPage = window.location.href;\n    this.authService.acquireTokenRedirect(Object.assign(Object.assign({}, authRequest), {\n      scopes,\n      redirectStartPage\n    }));\n    return EMPTY;\n  }\n  /**\r\n   * Looks up the scopes for the given endpoint from the protectedResourceMap\r\n   * @param endpoint Url of the request\r\n   * @param httpMethod Http method of the request\r\n   * @returns Array of scopes, or null if not found\r\n   *\r\n   */\n  getScopesForEndpoint(endpoint, httpMethod) {\n    this.authService.getLogger().verbose(\"Interceptor - getting scopes for endpoint\");\n    // Ensures endpoints and protected resources compared are normalized\n    const normalizedEndpoint = this.location.normalize(endpoint);\n    const protectedResourcesArray = Array.from(this.msalInterceptorConfig.protectedResourceMap.keys());\n    const matchingProtectedResources = this.matchResourcesToEndpoint(protectedResourcesArray, normalizedEndpoint);\n    if (matchingProtectedResources.length > 0) {\n      return this.matchScopesToEndpoint(this.msalInterceptorConfig.protectedResourceMap, matchingProtectedResources, httpMethod);\n    }\n    return null;\n  }\n  /**\r\n   * Finds resource endpoints that match request endpoint\r\n   * @param protectedResourcesEndpoints\r\n   * @param endpoint\r\n   * @returns\r\n   */\n  matchResourcesToEndpoint(protectedResourcesEndpoints, endpoint) {\n    const matchingResources = [];\n    protectedResourcesEndpoints.forEach(key => {\n      const normalizedKey = this.location.normalize(key);\n      // Get url components\n      const absoluteKey = this.getAbsoluteUrl(normalizedKey);\n      const keyComponents = new URL(absoluteKey);\n      const absoluteEndpoint = this.getAbsoluteUrl(endpoint);\n      const endpointComponents = new URL(absoluteEndpoint);\n      if (this.checkUrlComponents(keyComponents, endpointComponents)) {\n        matchingResources.push(key);\n      }\n    });\n    return matchingResources;\n  }\n  /**\r\n   * Compares URL segments between key and endpoint\r\n   * @param key\r\n   * @param endpoint\r\n   * @returns\r\n   */\n  checkUrlComponents(keyComponents, endpointComponents) {\n    // URL properties from https://developer.mozilla.org/en-US/docs/Web/API/URL\n    const urlProperties = [\"protocol\", \"host\", \"pathname\", \"search\", \"hash\"];\n    for (const property of urlProperties) {\n      if (keyComponents[property]) {\n        const decodedInput = decodeURIComponent(keyComponents[property]);\n        if (!StringUtils.matchPattern(decodedInput, endpointComponents[property])) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  /**\r\n   * Transforms relative urls to absolute urls\r\n   * @param url\r\n   * @returns\r\n   */\n  getAbsoluteUrl(url) {\n    const link = this._document.createElement(\"a\");\n    link.href = url;\n    return link.href;\n  }\n  /**\r\n   * Finds scopes from first matching endpoint with HTTP method that matches request\r\n   * @param protectedResourceMap Protected resource map\r\n   * @param endpointArray Array of resources that match request endpoint\r\n   * @param httpMethod Http method of the request\r\n   * @returns\r\n   */\n  matchScopesToEndpoint(protectedResourceMap, endpointArray, httpMethod) {\n    const allMatchedScopes = [];\n    // Check each matched endpoint for matching HttpMethod and scopes\n    endpointArray.forEach(matchedEndpoint => {\n      const scopesForEndpoint = [];\n      const methodAndScopesArray = protectedResourceMap.get(matchedEndpoint);\n      // Return if resource is unprotected\n      if (methodAndScopesArray === null) {\n        allMatchedScopes.push(null);\n        return;\n      }\n      methodAndScopesArray.forEach(entry => {\n        // Entry is either array of scopes or ProtectedResourceScopes object\n        if (typeof entry === \"string\") {\n          scopesForEndpoint.push(entry);\n        } else {\n          // Ensure methods being compared are normalized\n          const normalizedRequestMethod = httpMethod.toLowerCase();\n          const normalizedResourceMethod = entry.httpMethod.toLowerCase();\n          // Method in protectedResourceMap matches request http method\n          if (normalizedResourceMethod === normalizedRequestMethod) {\n            // Validate if scopes comes null to unprotect the resource in a certain http method\n            if (entry.scopes === null) {\n              allMatchedScopes.push(null);\n            } else {\n              entry.scopes.forEach(scope => {\n                scopesForEndpoint.push(scope);\n              });\n            }\n          }\n        }\n      });\n      // Only add to all scopes if scopes for endpoint and method is found\n      if (scopesForEndpoint.length > 0) {\n        allMatchedScopes.push(scopesForEndpoint);\n      }\n    });\n    if (allMatchedScopes.length > 0) {\n      if (allMatchedScopes.length > 1) {\n        this.authService.getLogger().warning(\"Interceptor - More than 1 matching scopes for endpoint found.\");\n      }\n      // Returns scopes for first matching endpoint\n      return allMatchedScopes[0];\n    }\n    return null;\n  }\n}\nMsalInterceptor.ɵfac = function MsalInterceptor_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || MsalInterceptor)(i0.ɵɵinject(MSAL_INTERCEPTOR_CONFIG), i0.ɵɵinject(MsalService), i0.ɵɵinject(i3.Location), i0.ɵɵinject(MsalBroadcastService), i0.ɵɵinject(DOCUMENT));\n};\nMsalInterceptor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MsalInterceptor,\n  factory: MsalInterceptor.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MsalInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MSAL_INTERCEPTOR_CONFIG]\n      }]\n    }, {\n      type: MsalService\n    }, {\n      type: i3.Location\n    }, {\n      type: MsalBroadcastService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This is a dedicated redirect component to be added to Angular apps to\r\n * handle redirects when using @azure/msal-angular.\r\n * Import this component to use redirects in your app.\r\n */\nclass MsalRedirectComponent {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  ngOnInit() {\n    this.authService.getLogger().verbose(\"MsalRedirectComponent activated\");\n    this.authService.handleRedirectObservable().subscribe();\n  }\n}\nMsalRedirectComponent.ɵfac = function MsalRedirectComponent_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || MsalRedirectComponent)(i0.ɵɵdirectiveInject(MsalService));\n};\nMsalRedirectComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MsalRedirectComponent,\n  selectors: [[\"app-redirect\"]],\n  standalone: false,\n  decls: 0,\n  vars: 0,\n  template: function MsalRedirectComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MsalRedirectComponent, [{\n    type: Component,\n    args: [{\n      selector: \"app-redirect\",\n      template: \"\"\n    }]\n  }], function () {\n    return [{\n      type: MsalService\n    }];\n  }, null);\n})();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass MsalModule {\n  static forRoot(msalInstance, guardConfig, interceptorConfig) {\n    return {\n      ngModule: MsalModule,\n      providers: [{\n        provide: MSAL_INSTANCE,\n        useValue: msalInstance\n      }, {\n        provide: MSAL_GUARD_CONFIG,\n        useValue: guardConfig\n      }, {\n        provide: MSAL_INTERCEPTOR_CONFIG,\n        useValue: interceptorConfig\n      }, MsalService]\n    };\n  }\n}\nMsalModule.ɵfac = function MsalModule_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || MsalModule)();\n};\nMsalModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MsalModule,\n  declarations: [MsalRedirectComponent],\n  imports: [CommonModule]\n});\nMsalModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MsalGuard, MsalBroadcastService],\n  imports: [CommonModule]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MsalModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MsalRedirectComponent],\n      imports: [CommonModule],\n      providers: [MsalGuard, MsalBroadcastService]\n    }]\n  }], null, null);\n})();\n\n/**\r\n * Custom navigation used for Angular client-side navigation.\r\n * See performance doc for details:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-angular/docs/performance.md\r\n */\nclass MsalCustomNavigationClient extends NavigationClient {\n  constructor(authService, router, location) {\n    super();\n    this.authService = authService;\n    this.router = router;\n    this.location = location;\n  }\n  navigateInternal(url, options) {\n    const _super = Object.create(null, {\n      navigateInternal: {\n        get: () => super.navigateInternal\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      this.authService.getLogger().trace(\"MsalCustomNavigationClient called\");\n      this.authService.getLogger().verbose(\"MsalCustomNavigationClient - navigating\");\n      this.authService.getLogger().verbosePii(`MsalCustomNavigationClient - navigating to url: ${url}`);\n      // Prevent hash clearing from causing an issue with Client-side navigation after redirect is handled\n      if (options.noHistory) {\n        return _super.navigateInternal.call(this, url, options);\n      } else {\n        // Normalizing newUrl if no query string\n        const urlComponents = new UrlString(url).getUrlComponents();\n        const newUrl = urlComponents.QueryString ? `${urlComponents.AbsolutePath}?${urlComponents.QueryString}` : this.location.normalize(urlComponents.AbsolutePath);\n        yield this.router.navigateByUrl(newUrl, {\n          replaceUrl: options.noHistory\n        });\n      }\n      return Promise.resolve(options.noHistory);\n    });\n  }\n}\nMsalCustomNavigationClient.ɵfac = function MsalCustomNavigationClient_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || MsalCustomNavigationClient)(i0.ɵɵinject(MsalService), i0.ɵɵinject(i4.Router), i0.ɵɵinject(i3.Location));\n};\nMsalCustomNavigationClient.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MsalCustomNavigationClient,\n  factory: MsalCustomNavigationClient.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MsalCustomNavigationClient, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: MsalService\n    }, {\n      type: i4.Router\n    }, {\n      type: i3.Location\n    }];\n  }, null);\n})();\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * @packageDocumentation\r\n * @module @azure/msal-angular\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { MSAL_BROADCAST_CONFIG, MSAL_GUARD_CONFIG, MSAL_INSTANCE, MSAL_INTERCEPTOR_CONFIG, MsalBroadcastService, MsalCustomNavigationClient, MsalGuard, MsalInterceptor, MsalModule, MsalRedirectComponent, MsalService, version };\n", "/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n  };\n  return extendStatics(d, b);\n};\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nexport var __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nexport function __param(paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n}\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) {\n    if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n    return f;\n  }\n  var kind = contextIn.kind,\n    key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _,\n    done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n    var context = {};\n    for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n    for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n    context.addInitializer = function (f) {\n      if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n      extraInitializers.push(accept(f || null));\n    };\n    var result = (0, decorators[i])(kind === \"accessor\" ? {\n      get: descriptor.get,\n      set: descriptor.set\n    } : descriptor[key], context);\n    if (kind === \"accessor\") {\n      if (result === void 0) continue;\n      if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n      if (_ = accept(result.get)) descriptor.get = _;\n      if (_ = accept(result.set)) descriptor.set = _;\n      if (_ = accept(result.init)) initializers.unshift(_);\n    } else if (_ = accept(result)) {\n      if (kind === \"field\") initializers.unshift(_);else descriptor[key] = _;\n    }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n}\n;\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n}\n;\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n}\n;\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", {\n    configurable: true,\n    value: prefix ? \"\".concat(prefix, \" \", name) : name\n  });\n}\n;\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\nexport function __generator(thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n}\nexport var __createBinding = Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n};\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n  return r;\n}\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []),\n    i,\n    q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i;\n  function awaitReturn(f) {\n    return function (v) {\n      return Promise.resolve(v).then(f, reject);\n    };\n  }\n  function verb(n, f) {\n    if (g[n]) {\n      i[n] = function (v) {\n        return new Promise(function (a, b) {\n          q.push([n, v, a, b]) > 1 || resume(n, v);\n        });\n      };\n      if (f) i[n] = f(i[n]);\n    }\n  }\n  function resume(n, v) {\n    try {\n      step(g[n](v));\n    } catch (e) {\n      settle(q[0][3], e);\n    }\n  }\n  function step(r) {\n    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n  }\n  function fulfill(value) {\n    resume(\"next\", value);\n  }\n  function reject(value) {\n    resume(\"throw\", value);\n  }\n  function settle(f, v) {\n    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n  }\n}\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) {\n    throw e;\n  }), verb(\"return\"), i[Symbol.iterator] = function () {\n    return this;\n  }, i;\n  function verb(n, f) {\n    i[n] = o[n] ? function (v) {\n      return (p = !p) ? {\n        value: __await(o[n](v)),\n        done: false\n      } : f ? f(v) : v;\n    } : f;\n  }\n}\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n    i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n}\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) {\n    Object.defineProperty(cooked, \"raw\", {\n      value: raw\n    });\n  } else {\n    cooked.raw = raw;\n  }\n  return cooked;\n}\n;\nvar __setModuleDefault = Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n};\nvar ownKeys = function (o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\nexport function __importDefault(mod) {\n  return mod && mod.__esModule ? mod : {\n    default: mod\n  };\n}\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n}\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || typeof receiver !== \"object\" && typeof receiver !== \"function\") throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function () {\n      try {\n        inner.call(this);\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    };\n    env.stack.push({\n      value: value,\n      dispose: dispose,\n      async: async\n    });\n  } else if (async) {\n    env.stack.push({\n      async: true\n    });\n  }\n  return value;\n}\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r,\n    s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function (e) {\n            fail(e);\n            return next();\n          });\n        } else s |= 1;\n      } catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n    return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n      return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : d + ext + \".\" + cm.toLowerCase() + \"js\";\n    });\n  }\n  return path;\n}\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension\n};"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACOA,IAAM,YAAY;AAAA,EAChB,cAAc;AAAA,EACd,KAAK;AAAA;AAAA,EAEL,cAAc;AAAA;AAAA,EAEd,mBAAmB;AAAA,EACnB,wBAAwB;AAAA,EACxB,uBAAuB;AAAA;AAAA,EAEvB,MAAM;AAAA,EACN,MAAM;AAAA;AAAA,EAEN,8BAA8B;AAAA;AAAA,EAE9B,eAAe;AAAA,EACf,0BAA0B;AAAA;AAAA,EAE1B,gBAAgB;AAAA;AAAA,EAEhB,YAAY;AAAA;AAAA,EAEZ,QAAQ;AAAA;AAAA,EAER,eAAe;AAAA;AAAA,EAEf,cAAc;AAAA,EACd,eAAe;AAAA,EACf,sBAAsB;AAAA,EACtB,aAAa;AAAA;AAAA,EAEb,oBAAoB;AAAA,EACpB,iBAAiB;AAAA,EACjB,eAAe;AAAA,EACf,wBAAwB;AAAA,EACxB,4BAA4B;AAAA,EAC5B,uBAAuB;AAAA,EACvB,uBAAuB;AAAA,EACvB,aAAa;AAAA,EACb,cAAc;AAAA,EACd,gBAAgB;AAAA,EAChB,eAAe;AAAA,EACf,eAAe;AAAA,EACf,eAAe;AAAA,EACf,cAAc;AAAA,EACd,cAAc;AAAA,EACd,iCAAiC;AAAA,EACjC,mCAAmC;AAAA,EACnC,qBAAqB,CAAC,6BAA6B,qBAAqB,uBAAuB,iBAAiB;AAAA,EAChH,qBAAqB;AAAA,EACrB,wBAAwB;AAAA,EACxB,oBAAoB;AAAA,EACpB,kBAAkB;AACpB;AAqBA,IAAM,sBAAsB,CAAC,UAAU,cAAc,UAAU,eAAe,UAAU,oBAAoB;AAC5G,IAAM,cAAc,CAAC,GAAG,qBAAqB,UAAU,WAAW;AAuBlE,IAAM,wBAAwB;AAAA,EAC5B,QAAQ;AAAA,EACR,eAAe;AAAA,EACf,WAAW;AACb;AA+BA,IAAM,qBAAqB;AAAA,EACzB,OAAO;AAAA,EACP,UAAU;AACZ;AAIA,IAAM,eAAe,iCAChB,qBADgB;AAAA,EAEnB,WAAW;AACb;AA0DA,IAAM,+BAA+B;AAAA,EACnC,WAAW;AAAA,EACX,sBAAsB,OAAO;AAAA;AAC/B;AACA,IAAM,0BAA0B;AAAA,EAC9B,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,SAAS;AAAA,EACT,kBAAkB;AACpB;AAgDA,IAAM,gBAAgB;AAAA,EACpB,aAAa;AAAA,EACb,gBAAgB;AAClB;AAIA,IAAM,yBAAyB;AAAA,EAC7B,uBAAuB;AAAA,EACvB,gBAAgB;AAAA,EAChB,sBAAsB;AAAA,EACtB,MAAM;AACR;AAIA,IAAM,0BAA0B;AAAA,EAC9B,6BAA6B;AAAA,EAC7B,8BAA8B;AAAA,EAC9B,yBAAyB;AAAA,EACzB,qCAAqC;AAAA,EACrC,iCAAiC;AACnC;AAgBA,IAAM,oBAAoB;AAAA,EACxB,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AACP;AAGA,IAAM,mCAAmC;;;AC5SzC,IAAM,kBAAkB;AACxB,IAAM,oBAAoB;;;ACC1B,IAAM,oBAAoB;AAAA,EACxB,CAAC,eAAe,GAAG;AAAA,EACnB,CAAC,iBAAiB,GAAG;AACvB;AAKA,IAAM,mBAAmB;AAAA,EACvB,iBAAiB;AAAA,IACf,MAAM;AAAA,IACN,MAAM,kBAAkB,eAAe;AAAA,EACzC;AAAA,EACA,mBAAmB;AAAA,IACjB,MAAM;AAAA,IACN,MAAM,kBAAkB,iBAAiB;AAAA,EAC3C;AACF;AAIA,IAAM,YAAN,MAAM,mBAAkB,MAAM;AAAA,EAC5B,YAAY,WAAW,cAAc,UAAU;AAC7C,UAAM,cAAc,eAAe,GAAG,SAAS,KAAK,YAAY,KAAK;AACrE,UAAM,WAAW;AACjB,WAAO,eAAe,MAAM,WAAU,SAAS;AAC/C,SAAK,YAAY,aAAa,UAAU;AACxC,SAAK,eAAe,gBAAgB,UAAU;AAC9C,SAAK,WAAW,YAAY,UAAU;AACtC,SAAK,OAAO;AAAA,EACd;AAAA,EACA,iBAAiB,eAAe;AAC9B,SAAK,gBAAgB;AAAA,EACvB;AACF;;;ACvCA,IAAM,0BAA0B;AAChC,IAAM,uBAAuB;AAC7B,IAAM,oBAAoB;AAC1B,IAAM,mBAAmB;AACzB,IAAM,0BAA0B;AAChC,IAAM,eAAe;AACrB,IAAM,oBAAoB;AAC1B,IAAM,sBAAsB;AAC5B,IAAM,eAAe;AACrB,IAAM,gBAAgB;AACtB,IAAM,gBAAgB;AACtB,IAAM,gBAAgB;AACtB,IAAM,mBAAmB;AACzB,IAAM,mBAAmB;AACzB,IAAM,yBAAyB;AAC/B,IAAM,2BAA2B;AACjC,IAAM,8BAA8B;AACpC,IAAM,sBAAsB;AAC5B,IAAM,yBAAyB;AAC/B,IAAM,uBAAuB;AAC7B,IAAM,qBAAqB;AAC3B,IAAM,6BAA6B;AACnC,IAAM,oBAAoB;AAC1B,IAAM,yBAAyB;AAC/B,IAAM,2BAA2B;AACjC,IAAM,qBAAqB;AAC3B,IAAM,0BAA0B;AAChC,IAAM,iBAAiB;AACvB,IAAM,iBAAiB;AACvB,IAAM,2BAA2B;AACjC,IAAM,mBAAmB;AACzB,IAAM,0BAA0B;AAChC,IAAM,uBAAuB;AAC7B,IAAM,qBAAqB;AAC3B,IAAM,qCAAqC;AAC3C,IAAM,6CAA6C;AACnD,IAAM,uBAAuB;AAC7B,IAAM,iCAAiC;AACvC,IAAM,eAAe;AACrB,IAAM,wBAAwB;AAC9B,IAAM,eAAe;AACrB,IAAM,uBAAuB;AAC7B,IAAM,uBAAuB;AAC7B,IAAM,8BAA8B;;;ACnCpC,IAAM,0BAA0B;AAAA,EAC9B,CAAC,uBAAuB,GAAG;AAAA,EAC3B,CAAC,oBAAoB,GAAG;AAAA,EACxB,CAAC,iBAAiB,GAAG;AAAA,EACrB,CAAC,gBAAgB,GAAG;AAAA,EACpB,CAAC,uBAAuB,GAAG;AAAA,EAC3B,CAAC,YAAY,GAAG;AAAA,EAChB,CAAC,iBAAiB,GAAG;AAAA,EACrB,CAAC,mBAAmB,GAAG;AAAA,EACvB,CAAC,YAAY,GAAG;AAAA,EAChB,CAAC,aAAa,GAAG;AAAA,EACjB,CAAC,aAAa,GAAG;AAAA,EACjB,CAAC,aAAa,GAAG;AAAA,EACjB,CAAC,gBAAgB,GAAG;AAAA,EACpB,CAAC,gBAAgB,GAAG;AAAA,EACpB,CAAC,sBAAsB,GAAG;AAAA,EAC1B,CAAC,wBAAwB,GAAG;AAAA,EAC5B,CAAC,2BAA2B,GAAG;AAAA,EAC/B,CAAC,mBAAmB,GAAG;AAAA,EACvB,CAAC,sBAAsB,GAAG;AAAA,EAC1B,CAAC,oBAAoB,GAAG;AAAA,EACxB,CAAC,kBAAkB,GAAG;AAAA,EACtB,CAAC,0BAA0B,GAAG;AAAA,EAC9B,CAAC,iBAAiB,GAAG;AAAA,EACrB,CAAC,sBAAsB,GAAG;AAAA,EAC1B,CAAC,wBAAwB,GAAG;AAAA,EAC5B,CAAC,kBAAkB,GAAG;AAAA,EACtB,CAAC,uBAAuB,GAAG;AAAA,EAC3B,CAAC,cAAc,GAAG;AAAA,EAClB,CAAC,cAAc,GAAG;AAAA,EAClB,CAAC,wBAAwB,GAAG;AAAA,EAC5B,CAAC,gBAAgB,GAAG;AAAA,EACpB,CAAC,uBAAuB,GAAG;AAAA,EAC3B,CAAC,oBAAoB,GAAG;AAAA,EACxB,CAAC,kBAAkB,GAAG;AAAA,EACtB,CAAC,kCAAkC,GAAG;AAAA,EACtC,CAAC,0CAA0C,GAAG;AAAA,EAC9C,CAAC,oBAAoB,GAAG;AAAA,EACxB,CAAC,8BAA8B,GAAG;AAAA,EAClC,CAAC,YAAY,GAAG;AAAA,EAChB,CAAC,qBAAqB,GAAG;AAAA,EACzB,CAAC,YAAY,GAAG;AAAA,EAChB,CAAC,oBAAoB,GAAG;AAAA,EACxB,CAAC,oBAAoB,GAAG;AAAA,EACxB,CAAC,2BAA2B,GAAG;AACjC;AAKA,IAAM,yBAAyB;AAAA,EAC7B,yBAAyB;AAAA,IACvB,MAAM;AAAA,IACN,MAAM,wBAAwB,uBAAuB;AAAA,EACvD;AAAA,EACA,sBAAsB;AAAA,IACpB,MAAM;AAAA,IACN,MAAM,wBAAwB,oBAAoB;AAAA,EACpD;AAAA,EACA,mBAAmB;AAAA,IACjB,MAAM;AAAA,IACN,MAAM,wBAAwB,iBAAiB;AAAA,EACjD;AAAA,EACA,kBAAkB;AAAA,IAChB,MAAM;AAAA,IACN,MAAM,wBAAwB,gBAAgB;AAAA,EAChD;AAAA,EACA,yBAAyB;AAAA,IACvB,MAAM;AAAA,IACN,MAAM,wBAAwB,uBAAuB;AAAA,EACvD;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,MAAM,wBAAwB,YAAY;AAAA,EAC5C;AAAA,EACA,8BAA8B;AAAA,IAC5B,MAAM;AAAA,IACN,MAAM,wBAAwB,iBAAiB;AAAA,EACjD;AAAA,EACA,qBAAqB;AAAA,IACnB,MAAM;AAAA,IACN,MAAM,wBAAwB,mBAAmB;AAAA,EACnD;AAAA,EACA,mBAAmB;AAAA,IACjB,MAAM;AAAA,IACN,MAAM,wBAAwB,YAAY;AAAA,EAC5C;AAAA,EACA,oBAAoB;AAAA,IAClB,MAAM;AAAA,IACN,MAAM,wBAAwB,aAAa;AAAA,EAC7C;AAAA,EACA,oBAAoB;AAAA,IAClB,MAAM;AAAA,IACN,MAAM,wBAAwB,aAAa;AAAA,EAC7C;AAAA,EACA,oBAAoB;AAAA,IAClB,MAAM;AAAA,IACN,MAAM,wBAAwB,aAAa;AAAA,EAC7C;AAAA,EACA,uBAAuB;AAAA,IACrB,MAAM;AAAA,IACN,MAAM,wBAAwB,gBAAgB;AAAA,EAChD;AAAA,EACA,kBAAkB;AAAA,IAChB,MAAM;AAAA,IACN,MAAM,wBAAwB,gBAAgB;AAAA,EAChD;AAAA,EACA,wBAAwB;AAAA,IACtB,MAAM;AAAA,IACN,MAAM,wBAAwB,sBAAsB;AAAA,EACtD;AAAA,EACA,0BAA0B;AAAA,IACxB,MAAM;AAAA,IACN,MAAM,wBAAwB,wBAAwB;AAAA,EACxD;AAAA,EACA,6BAA6B;AAAA,IAC3B,MAAM;AAAA,IACN,MAAM,wBAAwB,2BAA2B;AAAA,EAC3D;AAAA,EACA,0BAA0B;AAAA,IACxB,MAAM;AAAA,IACN,MAAM,wBAAwB,mBAAmB;AAAA,EACnD;AAAA,EACA,uBAAuB;AAAA,IACrB,MAAM;AAAA,IACN,MAAM,wBAAwB,sBAAsB;AAAA,EACtD;AAAA,EACA,qBAAqB;AAAA,IACnB,MAAM;AAAA,IACN,MAAM,wBAAwB,oBAAoB;AAAA,EACpD;AAAA,EACA,yBAAyB;AAAA,IACvB,MAAM;AAAA,IACN,MAAM,wBAAwB,kBAAkB;AAAA,EAClD;AAAA,EACA,4BAA4B;AAAA,IAC1B,MAAM;AAAA,IACN,MAAM,wBAAwB,0BAA0B;AAAA,EAC1D;AAAA,EACA,mBAAmB;AAAA,IACjB,MAAM;AAAA,IACN,MAAM,wBAAwB,iBAAiB;AAAA,EACjD;AAAA,EACA,wBAAwB;AAAA,IACtB,MAAM;AAAA,IACN,MAAM,wBAAwB,sBAAsB;AAAA,EACtD;AAAA,EACA,0BAA0B;AAAA,IACxB,MAAM;AAAA,IACN,MAAM,wBAAwB,wBAAwB;AAAA,EACxD;AAAA,EACA,oBAAoB;AAAA,IAClB,MAAM;AAAA,IACN,MAAM,wBAAwB,kBAAkB;AAAA,EAClD;AAAA,EACA,yBAAyB;AAAA,IACvB,MAAM;AAAA,IACN,MAAM,wBAAwB,uBAAuB;AAAA,EACvD;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,IACN,MAAM,wBAAwB,cAAc;AAAA,EAC9C;AAAA,EACA,aAAa;AAAA,IACX,MAAM;AAAA,IACN,MAAM,wBAAwB,cAAc;AAAA,EAC9C;AAAA,EACA,0BAA0B;AAAA,IACxB,MAAM;AAAA,IACN,MAAM,wBAAwB,wBAAwB;AAAA,EACxD;AAAA,EACA,kBAAkB;AAAA,IAChB,MAAM;AAAA,IACN,MAAM,wBAAwB,gBAAgB;AAAA,EAChD;AAAA,EACA,yBAAyB;AAAA,IACvB,MAAM;AAAA,IACN,MAAM,wBAAwB,uBAAuB;AAAA,EACvD;AAAA,EACA,sBAAsB;AAAA,IACpB,MAAM;AAAA,IACN,MAAM,wBAAwB,oBAAoB;AAAA,EACpD;AAAA,EACA,oBAAoB;AAAA,IAClB,MAAM;AAAA,IACN,MAAM,wBAAwB,kBAAkB;AAAA,EAClD;AAAA,EACA,qBAAqB;AAAA,IACnB,MAAM;AAAA,IACN,MAAM,wBAAwB,kCAAkC;AAAA,EAClE;AAAA,EACA,+BAA+B;AAAA,IAC7B,MAAM;AAAA,IACN,MAAM,wBAAwB,0CAA0C;AAAA,EAC1E;AAAA,EACA,2BAA2B;AAAA,IACzB,MAAM;AAAA,IACN,MAAM,wBAAwB,oBAAoB;AAAA,EACpD;AAAA,EACA,oBAAoB;AAAA,IAClB,MAAM;AAAA,IACN,MAAM,wBAAwB,8BAA8B;AAAA,EAC9D;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,MAAM,wBAAwB,YAAY;AAAA,EAC5C;AAAA,EACA,uBAAuB;AAAA,IACrB,MAAM;AAAA,IACN,MAAM,wBAAwB,qBAAqB;AAAA,EACrD;AAAA,EACA,mBAAmB;AAAA,IACjB,MAAM;AAAA,IACN,MAAM,wBAAwB,YAAY;AAAA,EAC5C;AAAA,EACA,sBAAsB;AAAA,IACpB,MAAM;AAAA,IACN,MAAM,wBAAwB,oBAAoB;AAAA,EACpD;AAAA,EACA,6BAA6B;AAAA,IAC3B,MAAM;AAAA,IACN,MAAM,wBAAwB,2BAA2B;AAAA,EAC3D;AACF;AAIA,IAAM,kBAAN,MAAM,yBAAwB,UAAU;AAAA,EACtC,YAAY,WAAW,mBAAmB;AACxC,UAAM,WAAW,oBAAoB,GAAG,wBAAwB,SAAS,CAAC,KAAK,iBAAiB,KAAK,wBAAwB,SAAS,CAAC;AACvI,SAAK,OAAO;AACZ,WAAO,eAAe,MAAM,iBAAgB,SAAS;AAAA,EACvD;AACF;AACA,SAAS,sBAAsB,WAAW,mBAAmB;AAC3D,SAAO,IAAI,gBAAgB,WAAW,iBAAiB;AACzD;;;AC/OA,IAAI;AAAA,CACH,SAAUA,WAAU;AACnB,EAAAA,UAASA,UAAS,OAAO,IAAI,CAAC,IAAI;AAClC,EAAAA,UAASA,UAAS,SAAS,IAAI,CAAC,IAAI;AACpC,EAAAA,UAASA,UAAS,MAAM,IAAI,CAAC,IAAI;AACjC,EAAAA,UAASA,UAAS,SAAS,IAAI,CAAC,IAAI;AACpC,EAAAA,UAASA,UAAS,OAAO,IAAI,CAAC,IAAI;AACpC,GAAG,aAAa,WAAW,CAAC,EAAE;AAI9B,IAAM,SAAN,MAAM,QAAO;AAAA,EACX,YAAY,eAAe,aAAa,gBAAgB;AAEtD,SAAK,QAAQ,SAAS;AACtB,UAAM,wBAAwB,MAAM;AAClC;AAAA,IACF;AACA,UAAM,mBAAmB,iBAAiB,QAAO,2BAA2B;AAC5E,SAAK,gBAAgB,iBAAiB,kBAAkB;AACxD,SAAK,oBAAoB,iBAAiB,qBAAqB;AAC/D,SAAK,QAAQ,OAAO,iBAAiB,aAAa,WAAW,iBAAiB,WAAW,SAAS;AAClG,SAAK,gBAAgB,iBAAiB,iBAAiB,UAAU;AACjE,SAAK,cAAc,eAAe,UAAU;AAC5C,SAAK,iBAAiB,kBAAkB,UAAU;AAAA,EACpD;AAAA,EACA,OAAO,6BAA6B;AAClC,WAAO;AAAA,MACL,gBAAgB,MAAM;AAAA,MAEtB;AAAA,MACA,mBAAmB;AAAA,MACnB,UAAU,SAAS;AAAA,IACrB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,MAAM,aAAa,gBAAgB,eAAe;AAChD,WAAO,IAAI,QAAO;AAAA,MAChB,gBAAgB,KAAK;AAAA,MACrB,mBAAmB,KAAK;AAAA,MACxB,UAAU,KAAK;AAAA,MACf,eAAe,iBAAiB,KAAK;AAAA,IACvC,GAAG,aAAa,cAAc;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW,YAAY,SAAS;AAC9B,QAAI,QAAQ,WAAW,KAAK,SAAS,CAAC,KAAK,qBAAqB,QAAQ,aAAa;AACnF;AAAA,IACF;AACA,UAAM,aAAY,oBAAI,KAAK,GAAE,YAAY;AAEzC,UAAM,YAAY,IAAI,SAAS,QAAQ,QAAQ,iBAAiB,KAAK,iBAAiB,EAAE;AACxF,UAAM,MAAM,GAAG,SAAS,MAAM,KAAK,WAAW,IAAI,KAAK,cAAc,MAAM,SAAS,QAAQ,QAAQ,CAAC,MAAM,UAAU;AAErH,SAAK,gBAAgB,QAAQ,UAAU,KAAK,QAAQ,eAAe,KAAK;AAAA,EAC1E;AAAA;AAAA;AAAA;AAAA,EAIA,gBAAgB,OAAO,SAAS,aAAa;AAC3C,QAAI,KAAK,eAAe;AACtB,WAAK,cAAc,OAAO,SAAS,WAAW;AAAA,IAChD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,MAAM,SAAS,eAAe;AAC5B,SAAK,WAAW,SAAS;AAAA,MACvB,UAAU,SAAS;AAAA,MACnB,aAAa;AAAA,MACb,eAAe,iBAAiB,UAAU;AAAA,IAC5C,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAIA,SAAS,SAAS,eAAe;AAC/B,SAAK,WAAW,SAAS;AAAA,MACvB,UAAU,SAAS;AAAA,MACnB,aAAa;AAAA,MACb,eAAe,iBAAiB,UAAU;AAAA,IAC5C,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAIA,QAAQ,SAAS,eAAe;AAC9B,SAAK,WAAW,SAAS;AAAA,MACvB,UAAU,SAAS;AAAA,MACnB,aAAa;AAAA,MACb,eAAe,iBAAiB,UAAU;AAAA,IAC5C,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW,SAAS,eAAe;AACjC,SAAK,WAAW,SAAS;AAAA,MACvB,UAAU,SAAS;AAAA,MACnB,aAAa;AAAA,MACb,eAAe,iBAAiB,UAAU;AAAA,IAC5C,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAIA,KAAK,SAAS,eAAe;AAC3B,SAAK,WAAW,SAAS;AAAA,MACvB,UAAU,SAAS;AAAA,MACnB,aAAa;AAAA,MACb,eAAe,iBAAiB,UAAU;AAAA,IAC5C,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAIA,QAAQ,SAAS,eAAe;AAC9B,SAAK,WAAW,SAAS;AAAA,MACvB,UAAU,SAAS;AAAA,MACnB,aAAa;AAAA,MACb,eAAe,iBAAiB,UAAU;AAAA,IAC5C,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAIA,QAAQ,SAAS,eAAe;AAC9B,SAAK,WAAW,SAAS;AAAA,MACvB,UAAU,SAAS;AAAA,MACnB,aAAa;AAAA,MACb,eAAe,iBAAiB,UAAU;AAAA,IAC5C,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW,SAAS,eAAe;AACjC,SAAK,WAAW,SAAS;AAAA,MACvB,UAAU,SAAS;AAAA,MACnB,aAAa;AAAA,MACb,eAAe,iBAAiB,UAAU;AAAA,IAC5C,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAIA,MAAM,SAAS,eAAe;AAC5B,SAAK,WAAW,SAAS;AAAA,MACvB,UAAU,SAAS;AAAA,MACnB,aAAa;AAAA,MACb,eAAe,iBAAiB,UAAU;AAAA,IAC5C,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAIA,SAAS,SAAS,eAAe;AAC/B,SAAK,WAAW,SAAS;AAAA,MACvB,UAAU,SAAS;AAAA,MACnB,aAAa;AAAA,MACb,eAAe,iBAAiB,UAAU;AAAA,IAC5C,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAIA,sBAAsB;AACpB,WAAO,KAAK,qBAAqB;AAAA,EACnC;AACF;;;ACrLA,IAAM,UAAU;;;ACEhB,IAAM,qBAAqB;AAAA;AAAA,EAEzB,MAAM;AAAA;AAAA,EAEN,aAAa;AAAA;AAAA,EAEb,UAAU;AAAA;AAAA,EAEV,YAAY;AAAA;AAAA,EAEZ,cAAc;AAAA;AAAA,EAEd,mBAAmB;AACrB;;;ACPA,SAAS,aAAa;AAEpB,SAAO,KAAK,OAAM,oBAAI,KAAK,GAAE,QAAQ,IAAI,GAAM;AACjD;;;ACiPA,SAAS,qCAAqC;AAC5C,SAAO,WAAW,IAAI,6BAA6B;AACrD;AACA,SAAS,gCAAgC,mBAAmB,eAAe,aAAa;AACtF,oBAAkB,yBAAyB,cAAc;AACzD,oBAAkB,iBAAiB,cAAc;AACjD,oBAAkB,uBAAuB,cAAc;AACvD,oBAAkB,SAAS,cAAc;AACzC,oBAAkB,uBAAuB;AACzC,oBAAkB,WAAW,cAAc;AAC7C;AACA,SAAS,6BAA6B,mBAAmB,eAAe,aAAa;AACnF,oBAAkB,UAAU,cAAc;AAC1C,oBAAkB,kBAAkB,cAAc;AAClD,oBAAkB,oBAAoB,cAAc;AACpD,oBAAkB,qBAAqB;AACzC;AAIA,SAAS,2BAA2B,UAAU;AAC5C,SAAO,SAAS,aAAa,WAAW;AAC1C;;;ACvRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,IAAM,mBAAmB;AACzB,IAAM,4BAA4B;AAClC,IAAM,uBAAuB;AAC7B,IAAM,gBAAgB;AACtB,IAAM,gBAAgB;AACtB,IAAM,wBAAwB;AAC9B,IAAM,qBAAqB;AAC3B,IAAM,gBAAgB;AACtB,IAAM,oBAAoB;AAC1B,IAAM,qBAAqB;AAC3B,IAAM,6BAA6B;AACnC,IAAM,oBAAoB;AAC1B,IAAM,gCAAgC;AACtC,IAAM,2BAA2B;AACjC,IAAM,qBAAqB;AAC3B,IAAM,gBAAgB;AACtB,IAAM,gBAAgB;AACtB,IAAM,mCAAmC;AACzC,IAAM,8BAA8B;AACpC,IAAM,uBAAuB;AAC7B,IAAM,4BAA4B;AAClC,IAAM,oBAAoB;;;AChB1B,IAAM,mCAAmC;AAAA,EACvC,CAAC,gBAAgB,GAAG;AAAA,EACpB,CAAC,yBAAyB,GAAG;AAAA,EAC7B,CAAC,oBAAoB,GAAG;AAAA,EACxB,CAAC,aAAa,GAAG;AAAA,EACjB,CAAC,aAAa,GAAG;AAAA,EACjB,CAAC,qBAAqB,GAAG;AAAA,EACzB,CAAC,kBAAkB,GAAG;AAAA,EACtB,CAAC,aAAa,GAAG;AAAA,EACjB,CAAC,iBAAiB,GAAG;AAAA,EACrB,CAAC,kBAAkB,GAAG;AAAA,EACtB,CAAC,0BAA0B,GAAG;AAAA,EAC9B,CAAC,iBAAiB,GAAG;AAAA,EACrB,CAAC,6BAA6B,GAAG;AAAA,EACjC,CAAC,wBAAwB,GAAG;AAAA,EAC5B,CAAC,kBAAkB,GAAG;AAAA,EACtB,CAAC,aAAa,GAAG;AAAA,EACjB,CAAC,aAAa,GAAG;AAAA,EACjB,CAAC,gCAAgC,GAAG;AAAA,EACpC,CAAC,2BAA2B,GAAG;AAAA,EAC/B,CAAC,oBAAoB,GAAG;AAAA,EACxB,CAAC,yBAAyB,GAAG;AAAA,EAC7B,CAAC,iBAAiB,GAAG;AACvB;AAKA,IAAM,kCAAkC;AAAA,EACtC,mBAAmB;AAAA,IACjB,MAAM;AAAA,IACN,MAAM,iCAAiC,gBAAgB;AAAA,EACzD;AAAA,EACA,2BAA2B;AAAA,IACzB,MAAM;AAAA,IACN,MAAM,iCAAiC,yBAAyB;AAAA,EAClE;AAAA,EACA,sBAAsB;AAAA,IACpB,MAAM;AAAA,IACN,MAAM,iCAAiC,oBAAoB;AAAA,EAC7D;AAAA,EACA,eAAe;AAAA,IACb,MAAM;AAAA,IACN,MAAM,iCAAiC,aAAa;AAAA,EACtD;AAAA,EACA,eAAe;AAAA,IACb,MAAM;AAAA,IACN,MAAM,iCAAiC,aAAa;AAAA,EACtD;AAAA,EACA,kBAAkB;AAAA,IAChB,MAAM;AAAA,IACN,MAAM,iCAAiC,qBAAqB;AAAA,EAC9D;AAAA,EACA,eAAe;AAAA,IACb,MAAM;AAAA,IACN,MAAM,iCAAiC,kBAAkB;AAAA,EAC3D;AAAA,EACA,sBAAsB;AAAA,IACpB,MAAM;AAAA,IACN,MAAM,iCAAiC,aAAa;AAAA,EACtD;AAAA,EACA,wBAAwB;AAAA,IACtB,MAAM;AAAA,IACN,MAAM,iCAAiC,iBAAiB;AAAA,EAC1D;AAAA,EACA,yBAAyB;AAAA,IACvB,MAAM;AAAA,IACN,MAAM,iCAAiC,kBAAkB;AAAA,EAC3D;AAAA,EACA,4BAA4B;AAAA,IAC1B,MAAM;AAAA,IACN,MAAM,iCAAiC,0BAA0B;AAAA,EACnE;AAAA,EACA,4BAA4B;AAAA,IAC1B,MAAM;AAAA,IACN,MAAM,iCAAiC,iBAAiB;AAAA,EAC1D;AAAA,EACA,+BAA+B;AAAA,IAC7B,MAAM;AAAA,IACN,MAAM,iCAAiC,6BAA6B;AAAA,EACtE;AAAA,EACA,0BAA0B;AAAA,IACxB,MAAM;AAAA,IACN,MAAM,iCAAiC,wBAAwB;AAAA,EACjE;AAAA,EACA,oBAAoB;AAAA,IAClB,MAAM;AAAA,IACN,MAAM,iCAAiC,kBAAkB;AAAA,EAC3D;AAAA,EACA,eAAe;AAAA,IACb,MAAM;AAAA,IACN,MAAM,iCAAiC,aAAa;AAAA,EACtD;AAAA,EACA,eAAe;AAAA,IACb,MAAM;AAAA,IACN,MAAM,iCAAiC,aAAa;AAAA,EACtD;AAAA,EACA,kCAAkC;AAAA,IAChC,MAAM;AAAA,IACN,MAAM,iCAAiC,gCAAgC;AAAA,EACzE;AAAA,EACA,6BAA6B;AAAA,IAC3B,MAAM;AAAA,IACN,MAAM,iCAAiC,2BAA2B;AAAA,EACpE;AAAA,EACA,sBAAsB;AAAA,IACpB,MAAM;AAAA,IACN,MAAM,iCAAiC,oBAAoB;AAAA,EAC7D;AAAA,EACA,2BAA2B;AAAA,IACzB,MAAM;AAAA,IACN,MAAM,iCAAiC,yBAAyB;AAAA,EAClE;AAAA,EACA,mBAAmB;AAAA,IACjB,MAAM;AAAA,IACN,MAAM,iCAAiC,iBAAiB;AAAA,EAC1D;AACF;AAIA,IAAM,2BAAN,MAAM,kCAAiC,UAAU;AAAA,EAC/C,YAAY,WAAW;AACrB,UAAM,WAAW,iCAAiC,SAAS,CAAC;AAC5D,SAAK,OAAO;AACZ,WAAO,eAAe,MAAM,0BAAyB,SAAS;AAAA,EAChE;AACF;AACA,SAAS,+BAA+B,WAAW;AACjD,SAAO,IAAI,yBAAyB,SAAS;AAC/C;;;ACpIA,IAAM,cAAN,MAAkB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKhB,OAAO,WAAW,QAAQ;AACxB,QAAI,QAAQ;AACV,UAAI;AACF,cAAM,MAAM,KAAK,MAAM,MAAM;AAC7B,eAAO,OAAO,KAAK,GAAG,EAAE,WAAW;AAAA,MACrC,SAAS,GAAG;AAAA,MAAC;AAAA,IACf;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,WAAW,KAAK,QAAQ;AAC7B,WAAO,IAAI,QAAQ,MAAM,MAAM;AAAA,EACjC;AAAA,EACA,OAAO,SAAS,KAAK,QAAQ;AAC3B,WAAO,IAAI,UAAU,OAAO,UAAU,IAAI,YAAY,MAAM,MAAM,IAAI,SAAS,OAAO;AAAA,EACxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,oBAAoB,OAAO;AAChC,UAAM,MAAM,CAAC;AACb,UAAM,SAAS,MAAM,MAAM,GAAG;AAC9B,UAAM,SAAS,OAAK,mBAAmB,EAAE,QAAQ,OAAO,GAAG,CAAC;AAC5D,WAAO,QAAQ,UAAQ;AACrB,UAAI,KAAK,KAAK,GAAG;AACf,cAAM,CAAC,KAAK,KAAK,IAAI,KAAK,MAAM,UAAU,CAAC;AAC3C,YAAI,OAAO,OAAO;AAChB,cAAI,OAAO,GAAG,CAAC,IAAI,OAAO,KAAK;AAAA,QACjC;AAAA,MACF;AAAA,IACF,CAAC;AACD,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,iBAAiB,KAAK;AAC3B,WAAO,IAAI,IAAI,WAAS,MAAM,KAAK,CAAC;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,4BAA4B,KAAK;AACtC,WAAO,IAAI,OAAO,WAAS;AACzB,aAAO,CAAC,CAAC;AAAA,IACX,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,gBAAgB,KAAK;AAC1B,QAAI;AACF,aAAO,KAAK,MAAM,GAAG;AAAA,IACvB,SAAS,GAAG;AACV,aAAO;AAAA,IACT;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,aAAa,SAAS,OAAO;AAMlC,UAAM,QAAQ,IAAI,OAAO,QAAQ,QAAQ,OAAO,MAAM,EAAE,QAAQ,OAAO,OAAO,EAAE,QAAQ,OAAO,KAAK,CAAC;AACrG,WAAO,MAAM,KAAK,KAAK;AAAA,EACzB;AACF;;;ACjFA,IAAM,gBAAgB;AAAA,EACpB,SAAS;AAAA,EACT,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AACR;;;ACLA,IAAM,eAAe;AAAA,EACnB,KAAK;AAAA,EACL,MAAM;AACR;;;ACCA,SAAS,wBAAwB,gBAAgB;AAC/C,MAAI,eAAe,WAAW,IAAI,GAAG;AACnC,WAAO,eAAe,UAAU,CAAC;AAAA,EACnC,WAAW,eAAe,WAAW,GAAG,KAAK,eAAe,WAAW,GAAG,GAAG;AAC3E,WAAO,eAAe,UAAU,CAAC;AAAA,EACnC;AACA,SAAO;AACT;AAIA,SAAS,wBAAwB,gBAAgB;AAE/C,MAAI,CAAC,kBAAkB,eAAe,QAAQ,GAAG,IAAI,GAAG;AACtD,WAAO;AAAA,EACT;AACA,MAAI;AAEF,UAAM,qBAAqB,wBAAwB,cAAc;AAEjE,UAAM,mBAAmB,OAAO,YAAY,IAAI,gBAAgB,kBAAkB,CAAC;AAEnF,QAAI,iBAAiB,QAAQ,iBAAiB,SAAS,iBAAiB,qBAAqB,iBAAiB,OAAO;AACnH,aAAO;AAAA,IACT;AAAA,EACF,SAAS,GAAG;AACV,UAAM,sBAAsB,mBAAmB;AAAA,EACjD;AACA,SAAO;AACT;;;AC3BA,IAAM,YAAN,MAAM,WAAU;AAAA,EACd,IAAI,YAAY;AACd,WAAO,KAAK;AAAA,EACd;AAAA,EACA,YAAY,KAAK;AACf,SAAK,aAAa;AAClB,QAAI,CAAC,KAAK,YAAY;AAEpB,YAAM,+BAA+B,aAAa;AAAA,IACpD;AACA,QAAI,CAAC,IAAI,SAAS,GAAG,GAAG;AACtB,WAAK,aAAa,WAAU,gBAAgB,GAAG;AAAA,IACjD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,gBAAgB,KAAK;AAC1B,QAAI,KAAK;AACP,UAAI,eAAe,IAAI,YAAY;AACnC,UAAI,YAAY,SAAS,cAAc,GAAG,GAAG;AAC3C,uBAAe,aAAa,MAAM,GAAG,EAAE;AAAA,MACzC,WAAW,YAAY,SAAS,cAAc,IAAI,GAAG;AACnD,uBAAe,aAAa,MAAM,GAAG,EAAE;AAAA,MACzC;AACA,UAAI,CAAC,YAAY,SAAS,cAAc,GAAG,GAAG;AAC5C,wBAAgB;AAAA,MAClB;AACA,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,gBAAgB;AAEd,QAAI;AACJ,QAAI;AACF,mBAAa,KAAK,iBAAiB;AAAA,IACrC,SAAS,GAAG;AACV,YAAM,+BAA+B,aAAa;AAAA,IACpD;AAEA,QAAI,CAAC,WAAW,mBAAmB,CAAC,WAAW,cAAc;AAC3D,YAAM,+BAA+B,aAAa;AAAA,IACpD;AAEA,QAAI,CAAC,WAAW,YAAY,WAAW,SAAS,YAAY,MAAM,UAAU;AAC1E,YAAM,+BAA+B,oBAAoB;AAAA,IAC3D;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,kBAAkB,KAAK,aAAa;AACzC,QAAI,CAAC,aAAa;AAChB,aAAO;AAAA,IACT;AACA,WAAO,IAAI,QAAQ,GAAG,IAAI,IAAI,GAAG,GAAG,IAAI,WAAW,KAAK,GAAG,GAAG,IAAI,WAAW;AAAA,EAC/E;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,kBAAkB,KAAK;AAC5B,WAAO,WAAU,gBAAgB,IAAI,MAAM,GAAG,EAAE,CAAC,CAAC;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,kBAAkB,UAAU;AAC1B,UAAM,YAAY,KAAK,iBAAiB;AACxC,UAAM,YAAY,UAAU;AAC5B,QAAI,YAAY,UAAU,WAAW,MAAM,UAAU,CAAC,MAAM,sBAAsB,UAAU,UAAU,CAAC,MAAM,sBAAsB,gBAAgB;AACjJ,gBAAU,CAAC,IAAI;AAAA,IACjB;AACA,WAAO,WAAU,gCAAgC,SAAS;AAAA,EAC5D;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,mBAAmB;AAEjB,UAAM,QAAQ,OAAO,4DAA4D;AAEjF,UAAM,QAAQ,KAAK,UAAU,MAAM,KAAK;AACxC,QAAI,CAAC,OAAO;AACV,YAAM,+BAA+B,aAAa;AAAA,IACpD;AAEA,UAAM,gBAAgB;AAAA,MACpB,UAAU,MAAM,CAAC;AAAA,MACjB,iBAAiB,MAAM,CAAC;AAAA,MACxB,cAAc,MAAM,CAAC;AAAA,MACrB,aAAa,MAAM,CAAC;AAAA,IACtB;AACA,QAAI,eAAe,cAAc,aAAa,MAAM,GAAG;AACvD,mBAAe,aAAa,OAAO,SAAO,OAAO,IAAI,SAAS,CAAC;AAC/D,kBAAc,eAAe;AAC7B,QAAI,cAAc,eAAe,cAAc,YAAY,SAAS,GAAG,GAAG;AACxE,oBAAc,cAAc,cAAc,YAAY,UAAU,GAAG,cAAc,YAAY,SAAS,CAAC;AAAA,IACzG;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,iBAAiB,KAAK;AAC3B,UAAM,QAAQ,OAAO,0BAA0B;AAC/C,UAAM,QAAQ,IAAI,MAAM,KAAK;AAC7B,QAAI,CAAC,OAAO;AACV,YAAM,+BAA+B,aAAa;AAAA,IACpD;AACA,WAAO,MAAM,CAAC;AAAA,EAChB;AAAA,EACA,OAAO,eAAe,aAAa,SAAS;AAC1C,QAAI,YAAY,CAAC,MAAM,UAAU,eAAe;AAC9C,YAAM,MAAM,IAAI,WAAU,OAAO;AACjC,YAAM,iBAAiB,IAAI,iBAAiB;AAC5C,aAAO,eAAe,WAAW,OAAO,eAAe,kBAAkB;AAAA,IAC3E;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,gCAAgC,WAAW;AAChD,WAAO,IAAI,WAAU,UAAU,WAAW,OAAO,UAAU,kBAAkB,MAAM,UAAU,aAAa,KAAK,GAAG,CAAC;AAAA,EACrH;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,4BAA4B,UAAU;AAC3C,WAAO,CAAC,CAAC,wBAAwB,QAAQ;AAAA,EAC3C;AACF;;;AC/IA,IAAM,iBAAiB;AAAA,EACrB,kBAAkB;AAAA,IAChB,6BAA6B;AAAA,MAC3B,gBAAgB;AAAA,MAChB,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,wBAAwB;AAAA,MACxB,sBAAsB;AAAA,IACxB;AAAA,IACA,0BAA0B;AAAA,MACxB,gBAAgB;AAAA,MAChB,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,wBAAwB;AAAA,MACxB,sBAAsB;AAAA,IACxB;AAAA,IACA,4BAA4B;AAAA,MAC1B,gBAAgB;AAAA,MAChB,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,wBAAwB;AAAA,MACxB,sBAAsB;AAAA,IACxB;AAAA,EACF;AAAA,EACA,2BAA2B;AAAA,IACzB,2BAA2B;AAAA,IAC3B,UAAU,CAAC;AAAA,MACT,mBAAmB;AAAA,MACnB,iBAAiB;AAAA,MACjB,SAAS,CAAC,6BAA6B,qBAAqB,uBAAuB,iBAAiB;AAAA,IACtG,GAAG;AAAA,MACD,mBAAmB;AAAA,MACnB,iBAAiB;AAAA,MACjB,SAAS,CAAC,oCAAoC,wBAAwB;AAAA,IACxE,GAAG;AAAA,MACD,mBAAmB;AAAA,MACnB,iBAAiB;AAAA,MACjB,SAAS,CAAC,0BAA0B;AAAA,IACtC,GAAG;AAAA,MACD,mBAAmB;AAAA,MACnB,iBAAiB;AAAA,MACjB,SAAS,CAAC,4BAA4B,yBAAyB;AAAA,IACjE,GAAG;AAAA,MACD,mBAAmB;AAAA,MACnB,iBAAiB;AAAA,MACjB,SAAS,CAAC,8BAA8B;AAAA,IAC1C,CAAC;AAAA,EACH;AACF;AACA,IAAM,mBAAmB,eAAe;AACxC,IAAM,4BAA4B,eAAe;AACjD,IAAM,mCAAmC,oBAAI,IAAI;AACjD,0BAA0B,SAAS,QAAQ,mBAAiB;AAC1D,gBAAc,QAAQ,QAAQ,WAAS;AACrC,qCAAiC,IAAI,KAAK;AAAA,EAC5C,CAAC;AACH,CAAC;AAsCD,SAAS,6CAA6C,eAAe;AACnE,QAAM,WAAW,6CAA6C,0BAA0B,UAAU,aAAa;AAC/G,SAAO;AACT;AAMA,SAAS,6CAA6C,UAAU,eAAe;AAC7E,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,UAAM,WAAW,SAAS,CAAC;AAC3B,QAAI,SAAS,QAAQ,SAAS,aAAa,GAAG;AAC5C,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;;;AClHA,IAAM,8BAA8B;AACpC,IAAM,wBAAwB;;;ACG9B,IAAM,qBAAqB;AAAA,EACzB,CAAC,2BAA2B,GAAG;AAAA,EAC/B,CAAC,qBAAqB,GAAG;AAC3B;;;ACGA,IAAM,yBAAyB;AAAA,EAC7B,2BAA2B;AAAA,EAC3B,sBAAsB;AACxB;AACA,IAAM,gCAAgC;AAAA,EACpC,gBAAgB,MAAM;AAAA,EAEtB;AAAA,EACA,mBAAmB;AAAA,EACnB,UAAU,SAAS;AAAA,EACnB,eAAe,UAAU;AAC3B;AAYA,IAAM,uBAAuB;AAAA,EAC3B,KAAK,UAAU;AAAA,EACf;AAAA,EACA,KAAK,UAAU;AAAA,EACf,IAAI,UAAU;AAChB;AACA,IAAM,6BAA6B;AAAA,EACjC,cAAc,UAAU;AAAA,EACxB,iBAAiB;AACnB;AACA,IAAM,8BAA8B;AAAA,EAClC,oBAAoB,mBAAmB;AAAA,EACvC,QAAQ,GAAG,UAAU,qBAAqB;AAC5C;;;AC9CA,SAAS,uBAAuB,UAAU;AACxC,SAAO,SAAS,eAAe,wBAAwB,KAAK,SAAS,eAAe,gBAAgB,KAAK,SAAS,eAAe,QAAQ,KAAK,SAAS,eAAe,UAAU;AAClL;;;ACFA,SAAS,iCAAiC,UAAU;AAClD,SAAO,SAAS,eAAe,2BAA2B,KAAK,SAAS,eAAe,UAAU;AACnG;;;ACFA,SAAS,sCAAsC,UAAU;AACvD,SAAO,SAAS,eAAe,OAAO,KAAK,SAAS,eAAe,mBAAmB;AACxF;;;ACIA,IAAM,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKxB,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKpB,4BAA4B;AAAA;AAAA;AAAA;AAAA;AAAA,EAK5B,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKpB,yBAAyB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKzB,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMnB,yBAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMzB,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKtB,kCAAkC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKlC,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKnB,+BAA+B;AAAA;AAAA;AAAA;AAAA;AAAA,EAK/B,gCAAgC;AAAA,EAChC,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKvB,iCAAiC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKjC,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,EAKX,iDAAiD;AAAA;AAAA;AAAA;AAAA;AAAA,EAKjD,gCAAgC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKhC,qCAAqC;AAAA;AAAA;AAAA;AAAA,EAIrC,qCAAqC;AAAA;AAAA;AAAA;AAAA,EAIrC,mCAAmC;AAAA,EACnC,8CAA8C;AAAA,EAC9C,mDAAmD;AAAA;AAAA;AAAA;AAAA,EAInD,kBAAkB;AAAA;AAAA;AAAA;AAAA,EAIlB,oCAAoC;AAAA;AAAA;AAAA;AAAA,EAIpC,sBAAsB;AAAA;AAAA;AAAA;AAAA,EAItB,uCAAuC;AAAA;AAAA;AAAA;AAAA,EAIvC,gCAAgC;AAAA;AAAA;AAAA;AAAA,EAIhC,sDAAsD;AAAA;AAAA;AAAA;AAAA,EAItD,8CAA8C;AAAA;AAAA;AAAA;AAAA,EAI9C,0CAA0C;AAAA;AAAA;AAAA;AAAA;AAAA,EAK1C,uBAAuB;AAAA,EACvB,oCAAoC;AAAA,EACpC,+CAA+C;AAAA;AAAA;AAAA;AAAA;AAAA,EAK/C,4BAA4B;AAAA;AAAA;AAAA;AAAA,EAI5B,uBAAuB;AAAA;AAAA;AAAA;AAAA,EAIvB,yBAAyB;AAAA,EACzB,6BAA6B;AAAA,EAC7B,iBAAiB;AAAA;AAAA;AAAA;AAAA,EAIjB,+BAA+B;AAAA;AAAA;AAAA;AAAA,EAI/B,kCAAkC;AAAA,EAClC,mCAAmC;AAAA,EACnC,wBAAwB;AAAA,EACxB,4BAA4B;AAAA;AAAA;AAAA;AAAA,EAI5B,+CAA+C;AAAA,EAC/C,iDAAiD;AAAA,EACjD,yDAAyD;AAAA,EACzD,6DAA6D;AAAA;AAAA;AAAA;AAAA,EAI7D,gBAAgB;AAAA;AAAA;AAAA;AAAA,EAIhB,8BAA8B;AAAA,EAC9B,oBAAoB;AAAA,EACpB,8BAA8B;AAAA;AAAA;AAAA;AAAA,EAI9B,wBAAwB;AAAA,EACxB,+BAA+B;AAAA,EAC/B,kCAAkC;AAAA,EAClC,6BAA6B;AAAA;AAAA;AAAA;AAAA,EAI7B,qBAAqB;AAAA,EACrB,qBAAqB;AAAA;AAAA;AAAA;AAAA,EAIrB,2BAA2B;AAAA,EAC3B,qBAAqB;AAAA;AAAA;AAAA;AAAA,EAIrB,0CAA0C;AAAA,EAC1C,gCAAgC;AAAA,EAChC,2CAA2C;AAAA,EAC3C,+CAA+C;AAAA,EAC/C,uCAAuC;AAAA,EACvC,yCAAyC;AAAA,EACzC,iCAAiC;AAAA,EACjC,gDAAgD;AAAA;AAAA;AAAA;AAAA,EAIhD,6BAA6B;AAAA,EAC7B,kCAAkC;AAAA,EAClC,kCAAkC;AAAA,EAClC,yBAAyB;AAAA,EACzB,gCAAgC;AAAA,EAChC,iDAAiD;AAAA,EACjD,kCAAkC;AAAA,EAClC,wCAAwC;AAAA,EACxC,yCAAyC;AAAA,EACzC,oCAAoC;AAAA,EACpC,+BAA+B;AAAA,EAC/B,0BAA0B;AAAA,EAC1B,oBAAoB;AAAA;AAAA;AAAA;AAAA,EAIpB,8BAA8B;AAAA,EAC9B,6BAA6B;AAAA,EAC7B,qBAAqB;AAAA,EACrB,aAAa;AAAA,EACb,qBAAqB;AAAA;AAAA;AAAA;AAAA,EAIrB,mBAAmB;AAAA,EACnB,sBAAsB;AAAA,EACtB,mCAAmC;AAAA,EACnC,cAAc;AAAA,EACd,iBAAiB;AAAA,EACjB,cAAc;AAAA,EACd,iBAAiB;AAAA,EACjB,cAAc;AAAA,EACd,cAAc;AAAA,EACd,SAAS;AAAA,EACT,SAAS;AACX;AACA,IAAM,gCAAgC,oBAAI,IAAI,CAAC,CAAC,kBAAkB,oBAAoB,UAAU,GAAG,CAAC,kBAAkB,4BAA4B,QAAQ,GAAG,CAAC,kBAAkB,oBAAoB,KAAK,GAAG,CAAC,kBAAkB,yBAAyB,UAAU,GAAG,CAAC,kBAAkB,mBAAmB,SAAS,GAAG,CAAC,kBAAkB,sBAAsB,YAAY,GAAG,CAAC,kBAAkB,kCAAkC,kBAAkB,GAAG,CAAC,kBAAkB,mBAAmB,eAAe,GAAG,CAAC,kBAAkB,+BAA+B,kBAAkB,GAAG,CAAC,kBAAkB,gCAAgC,mBAAmB,GAAG,CAAC,kBAAkB,iCAAiC,cAAc,GAAG,CAAC,kBAAkB,WAAW,QAAQ,GAAG,CAAC,kBAAkB,iDAAiD,yBAAyB,GAAG,CAAC,kBAAkB,gCAAgC,yBAAyB,GAAG,CAAC,kBAAkB,qCAAqC,gBAAgB,GAAG,CAAC,kBAAkB,qCAAqC,0BAA0B,GAAG,CAAC,kBAAkB,mCAAmC,mBAAmB,GAAG,CAAC,kBAAkB,8CAA8C,kBAAkB,GAAG,CAAC,kBAAkB,mDAAmD,wBAAwB,GAAG,CAAC,kBAAkB,kBAAkB,iBAAiB,GAAG,CAAC,kBAAkB,oCAAoC,gBAAgB,GAAG,CAAC,kBAAkB,sBAAsB,YAAY,GAAG,CAAC,kBAAkB,uCAAuC,kBAAkB,GAAG,CAAC,kBAAkB,gCAAgC,YAAY,GAAG,CAAC,kBAAkB,sDAAsD,wBAAwB,GAAG,CAAC,kBAAkB,8CAA8C,gBAAgB,GAAG,CAAC,kBAAkB,0CAA0C,wBAAwB,GAAG,CAAC,kBAAkB,uBAAuB,aAAa,GAAG,CAAC,kBAAkB,oCAAoC,uBAAuB,GAAG,CAAC,kBAAkB,+CAA+C,8BAA8B,GAAG,CAAC,kBAAkB,4BAA4B,eAAe,GAAG,CAAC,kBAAkB,uBAAuB,aAAa,GAAG,CAAC,kBAAkB,yBAAyB,YAAY,GAAG,CAAC,kBAAkB,6BAA6B,uBAAuB,GAAG,CAAC,kBAAkB,iBAAiB,WAAW,GAAG,CAAC,kBAAkB,qBAAqB,aAAa,GAAG,CAAC,kBAAkB,aAAa,aAAa,GAAG,CAAC,kBAAkB,qBAAqB,qBAAqB,GAAG,CAAC,kBAAkB,+BAA+B,iBAAiB,GAAG,CAAC,kBAAkB,kCAAkC,qBAAqB,GAAG,CAAC,kBAAkB,mCAAmC,gCAAgC,GAAG,CAAC,kBAAkB,wBAAwB,mBAAmB,GAAG,CAAC,kBAAkB,4BAA4B,uBAAuB,GAAG,CAAC,kBAAkB,+CAA+C,kCAAkC,GAAG,CAAC,kBAAkB,iDAAiD,2BAA2B,GAAG,CAAC,kBAAkB,yDAAyD,yBAAyB,GAAG,CAAC,kBAAkB,6DAA6D,6BAA6B,GAAG,CAAC,kBAAkB,gBAAgB,gBAAgB,GAAG,CAAC,kBAAkB,8BAA8B,yBAAyB,GAAG,CAAC,kBAAkB,oBAAoB,gBAAgB,GAAG,CAAC,kBAAkB,8BAA8B,kBAAkB,GAAG,CAAC,kBAAkB,wBAAwB,cAAc,GAAG,CAAC,kBAAkB,+BAA+B,oBAAoB,GAAG,CAAC,kBAAkB,kCAAkC,0BAA0B,GAAG,CAAC,kBAAkB,6BAA6B,0BAA0B,GAAG,CAAC,kBAAkB,qBAAqB,YAAY,GAAG,CAAC,kBAAkB,qBAAqB,YAAY,GAAG,CAAC,kBAAkB,2BAA2B,kBAAkB,GAAG,CAAC,kBAAkB,qBAAqB,gBAAgB,GAAG,CAAC,kBAAkB,0CAA0C,wBAAwB,GAAG,CAAC,kBAAkB,gCAAgC,2BAA2B,GAAG,CAAC,kBAAkB,2CAA2C,+BAA+B,GAAG,CAAC,kBAAkB,+CAA+C,sBAAsB,GAAG,CAAC,kBAAkB,uCAAuC,eAAe,GAAG,CAAC,kBAAkB,yCAAyC,sBAAsB,GAAG,CAAC,kBAAkB,iCAAiC,qBAAqB,GAAG,CAAC,kBAAkB,gDAAgD,wBAAwB,GAAG,CAAC,kBAAkB,6BAA6B,kBAAkB,GAAG,CAAC,kBAAkB,kCAAkC,uBAAuB,GAAG,CAAC,kBAAkB,kCAAkC,sBAAsB,GAAG,CAAC,kBAAkB,yBAAyB,eAAe,GAAG,CAAC,kBAAkB,gCAAgC,wBAAwB,GAAG,CAAC,kBAAkB,iDAAiD,kBAAkB,GAAG,CAAC,kBAAkB,kCAAkC,uBAAuB,GAAG,CAAC,kBAAkB,wCAAwC,0BAA0B,GAAG,CAAC,kBAAkB,yCAAyC,cAAc,GAAG,CAAC,kBAAkB,oCAAoC,kBAAkB,GAAG,CAAC,kBAAkB,+BAA+B,wBAAwB,GAAG,CAAC,kBAAkB,0BAA0B,eAAe,GAAG,CAAC,kBAAkB,oBAAoB,oBAAoB,GAAG,CAAC,kBAAkB,8BAA8B,yBAAyB,GAAG,CAAC,kBAAkB,6BAA6B,mBAAmB,GAAG,CAAC,kBAAkB,mBAAmB,cAAc,GAAG,CAAC,kBAAkB,sBAAsB,iBAAiB,GAAG,CAAC,kBAAkB,mCAAmC,8BAA8B,GAAG,CAAC,kBAAkB,cAAc,cAAc,GAAG,CAAC,kBAAkB,iBAAiB,iBAAiB,GAAG,CAAC,kBAAkB,cAAc,SAAS,GAAG,CAAC,kBAAkB,iBAAiB,YAAY,GAAG,CAAC,kBAAkB,cAAc,WAAW,GAAG,CAAC,kBAAkB,cAAc,WAAW,GAAG,CAAC,kBAAkB,SAAS,SAAS,GAAG,CAAC,kBAAkB,SAAS,SAAS,CAAC,CAAC;AAOp+M,IAAM,yBAAyB;AAAA,EAC7B,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,WAAW;AACb;;;ACxPA,IAAM,SAAS,CAAC,UAAU,WAAW,QAAQ,iBAAiB,kBAAkB;AAC9E,SAAO,IAAI,SAAS;AAClB,WAAO,MAAM,sBAAsB,SAAS,EAAE;AAC9C,UAAM,kBAAkB,iBAAiB,iBAAiB,WAAW,aAAa;AAClF,QAAI,eAAe;AAEjB,YAAM,aAAa,YAAY;AAC/B,uBAAiB,gBAAgB;AAAA,QAC/B,CAAC,UAAU,GAAG;AAAA,MAChB,GAAG,aAAa;AAAA,IAClB;AACA,QAAI;AACF,YAAM,SAAS,SAAS,GAAG,IAAI;AAC/B,uBAAiB,IAAI;AAAA,QACnB,SAAS;AAAA,MACX,CAAC;AACD,aAAO,MAAM,yBAAyB,SAAS,EAAE;AACjD,aAAO;AAAA,IACT,SAAS,GAAG;AACV,aAAO,MAAM,qBAAqB,SAAS,EAAE;AAC7C,UAAI;AACF,eAAO,MAAM,KAAK,UAAU,CAAC,CAAC;AAAA,MAChC,SAASC,IAAG;AACV,eAAO,MAAM,gCAAgC;AAAA,MAC/C;AACA,uBAAiB,IAAI;AAAA,QACnB,SAAS;AAAA,MACX,GAAG,CAAC;AACJ,YAAM;AAAA,IACR;AAAA,EACF;AACF;AAcA,IAAM,cAAc,CAAC,UAAU,WAAW,QAAQ,iBAAiB,kBAAkB;AACnF,SAAO,IAAI,SAAS;AAClB,WAAO,MAAM,sBAAsB,SAAS,EAAE;AAC9C,UAAM,kBAAkB,iBAAiB,iBAAiB,WAAW,aAAa;AAClF,QAAI,eAAe;AAEjB,YAAM,aAAa,YAAY;AAC/B,uBAAiB,gBAAgB;AAAA,QAC/B,CAAC,UAAU,GAAG;AAAA,MAChB,GAAG,aAAa;AAAA,IAClB;AACA,qBAAiB,gBAAgB,WAAW,aAAa;AACzD,WAAO,SAAS,GAAG,IAAI,EAAE,KAAK,cAAY;AACxC,aAAO,MAAM,yBAAyB,SAAS,EAAE;AACjD,uBAAiB,IAAI;AAAA,QACnB,SAAS;AAAA,MACX,CAAC;AACD,aAAO;AAAA,IACT,CAAC,EAAE,MAAM,OAAK;AACZ,aAAO,MAAM,qBAAqB,SAAS,EAAE;AAC7C,UAAI;AACF,eAAO,MAAM,KAAK,UAAU,CAAC,CAAC;AAAA,MAChC,SAASA,IAAG;AACV,eAAO,MAAM,gCAAgC;AAAA,MAC/C;AACA,uBAAiB,IAAI;AAAA,QACnB,SAAS;AAAA,MACX,GAAG,CAAC;AACJ,YAAM;AAAA,IACR,CAAC;AAAA,EACH;AACF;;;ACpFA,IAAM,kBAAN,MAAM,iBAAgB;AAAA,EACpB,YAAY,kBAAkB,QAAQ,mBAAmB,eAAe;AACtE,SAAK,mBAAmB;AACxB,SAAK,SAAS;AACd,SAAK,oBAAoB;AACzB,SAAK,gBAAgB;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMM,aAAa,mBAAmB,yBAAyB;AAAA;AAC7D,WAAK,mBAAmB,oBAAoB,kBAAkB,6BAA6B,KAAK,aAAa;AAE7G,UAAI,yBAAyB;AAE7B,UAAI,CAAC,wBAAwB;AAC3B,cAAM,UAAU,iBAAgB;AAChC,YAAI;AACF,gBAAM,2BAA2B,MAAM,YAAY,KAAK,kBAAkB,KAAK,IAAI,GAAG,kBAAkB,kCAAkC,KAAK,QAAQ,KAAK,mBAAmB,KAAK,aAAa,EAAE,UAAU,cAAc,OAAO;AAClO,cAAI,yBAAyB,WAAW,cAAc,aAAa;AACjE,qCAAyB,yBAAyB;AAClD,oCAAwB,gBAAgB,uBAAuB;AAAA,UACjE;AAEA,cAAI,yBAAyB,WAAW,cAAc,gBAAgB;AACpE,kBAAM,qBAAqB,MAAM,YAAY,KAAK,kBAAkB,KAAK,IAAI,GAAG,kBAAkB,kCAAkC,KAAK,QAAQ,KAAK,mBAAmB,KAAK,aAAa,EAAE,OAAO;AACpM,gBAAI,CAAC,oBAAoB;AACvB,sCAAwB,gBAAgB,uBAAuB;AAC/D,qBAAO;AAAA,YACT;AACA,kBAAM,6BAA6B,MAAM,YAAY,KAAK,kBAAkB,KAAK,IAAI,GAAG,kBAAkB,kCAAkC,KAAK,QAAQ,KAAK,mBAAmB,KAAK,aAAa,EAAE,oBAAoB,OAAO;AAChO,gBAAI,2BAA2B,WAAW,cAAc,aAAa;AACnE,uCAAyB,2BAA2B;AACpD,sCAAwB,gBAAgB,uBAAuB;AAAA,YACjE;AAAA,UACF;AAAA,QACF,SAAS,GAAG;AACV,kCAAwB,gBAAgB,uBAAuB;AAC/D,iBAAO;AAAA,QACT;AAAA,MACF,OAAO;AACL,gCAAwB,gBAAgB,uBAAuB;AAAA,MACjE;AAEA,UAAI,CAAC,wBAAwB;AAC3B,gCAAwB,gBAAgB,uBAAuB;AAAA,MACjE;AACA,aAAO,0BAA0B;AAAA,IACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOM,kBAAkBC,UAAS,SAAS;AAAA;AACxC,WAAK,mBAAmB,oBAAoB,kBAAkB,kCAAkC,KAAK,aAAa;AAClH,aAAO,KAAK,iBAAiB,oBAAoB,GAAG,UAAU,aAAa,gBAAgBA,QAAO,gBAAgB,SAAS,UAAU,YAAY;AAAA,IACnJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMM,kBAAkB,SAAS;AAAA;AAC/B,WAAK,mBAAmB,oBAAoB,kBAAkB,kCAAkC,KAAK,aAAa;AAClH,UAAI;AACF,cAAM,WAAW,MAAM,KAAK,iBAAiB,oBAAoB,GAAG,UAAU,aAAa,gBAAgB,OAAO;AAElH,YAAI,SAAS,WAAW,cAAc,kBAAkB,SAAS,QAAQ,SAAS,KAAK,iBAAiB,KAAK,SAAS,KAAK,iBAAiB,EAAE,SAAS,GAAG;AACxJ,iBAAO,SAAS,KAAK,iBAAiB,EAAE,CAAC;AAAA,QAC3C;AACA,eAAO;AAAA,MACT,SAAS,GAAG;AACV,eAAO;AAAA,MACT;AAAA,IACF;AAAA;AACF;AAEA,gBAAgB,eAAe;AAAA,EAC7B,SAAS;AAAA,IACP,UAAU;AAAA,EACZ;AACF;;;ACjEA,IAAM,YAAN,MAAM,WAAU;AAAA,EACd,YAAY,WAAW,kBAAkB,cAAc,kBAAkB,QAAQ,eAAe,mBAAmB,iBAAiB;AAClI,SAAK,qBAAqB;AAC1B,SAAK,oBAAoB,cAAc;AACvC,SAAK,mBAAmB;AACxB,SAAK,eAAe;AACpB,SAAK,mBAAmB;AACxB,SAAK,0BAA0B;AAAA,MAC7B,aAAa;AAAA,MACb,eAAe;AAAA,MACf,gBAAgB;AAAA,IAClB;AACA,SAAK,SAAS;AACd,SAAK,oBAAoB;AACzB,SAAK,gBAAgB;AACrB,SAAK,kBAAkB,mBAAmB;AAC1C,SAAK,kBAAkB,IAAI,gBAAgB,kBAAkB,KAAK,QAAQ,KAAK,mBAAmB,KAAK,aAAa;AAAA,EACtH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,iBAAiB,cAAc;AAE7B,QAAI,aAAa,gBAAgB,SAAS,UAAU,aAAa,GAAG;AAClE,aAAO,cAAc;AAAA,IACvB;AACA,UAAM,eAAe,aAAa;AAClC,QAAI,aAAa,QAAQ;AACvB,cAAQ,aAAa,CAAC,EAAE,YAAY,GAAG;AAAA,QACrC,KAAK,UAAU;AACb,iBAAO,cAAc;AAAA,QACvB,KAAK,UAAU;AACb,iBAAO,cAAc;AAAA,MACzB;AAAA,IACF;AACA,WAAO,cAAc;AAAA,EACvB;AAAA;AAAA,EAEA,IAAI,gBAAgB;AAClB,WAAO,KAAK,iBAAiB,KAAK,+BAA+B;AAAA,EACnE;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,eAAe;AACjB,WAAO,KAAK,iBAAiB;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,UAAU;AACZ,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,qBAAqB;AACvB,WAAO,KAAK,oBAAoB;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,mBAAmB,KAAK;AAC1B,SAAK,sBAAsB,IAAI,UAAU,GAAG;AAC5C,SAAK,oBAAoB,cAAc;AACvC,SAAK,mCAAmC;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,kCAAkC;AACpC,QAAI,CAAC,KAAK,kCAAkC;AAC1C,WAAK,mCAAmC,KAAK,oBAAoB,iBAAiB;AAAA,IACpF;AACA,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,kBAAkB;AACpB,WAAO,KAAK,gCAAgC,gBAAgB,YAAY;AAAA,EAC1E;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,SAAS;AACX,WAAO,KAAK,gCAAgC,aAAa,CAAC;AAAA,EAC5D;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,wBAAwB;AAC1B,QAAI,KAAK,kBAAkB,GAAG;AAC5B,aAAO,KAAK,YAAY,KAAK,SAAS,sBAAsB;AAAA,IAC9D,OAAO;AACL,YAAM,sBAAsB,uBAAuB;AAAA,IACrD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,gBAAgB;AAClB,QAAI,KAAK,kBAAkB,GAAG;AAC5B,aAAO,KAAK,YAAY,KAAK,SAAS,cAAc;AAAA,IACtD,OAAO;AACL,YAAM,sBAAsB,uBAAuB;AAAA,IACrD;AAAA,EACF;AAAA,EACA,IAAI,qBAAqB;AACvB,QAAI,KAAK,kBAAkB,GAAG;AAC5B,aAAO,KAAK,YAAY,KAAK,SAAS,eAAe,QAAQ,UAAU,aAAa,CAAC;AAAA,IACvF,OAAO;AACL,YAAM,sBAAsB,uBAAuB;AAAA,IACrD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,qBAAqB;AACvB,QAAI,KAAK,kBAAkB,GAAG;AAE5B,UAAI,CAAC,KAAK,SAAS,sBAAsB;AACvC,cAAM,sBAAsB,8BAA8B;AAAA,MAC5D;AACA,aAAO,KAAK,YAAY,KAAK,SAAS,oBAAoB;AAAA,IAC5D,OAAO;AACL,YAAM,sBAAsB,uBAAuB;AAAA,IACrD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,wBAAwB;AAC1B,QAAI,KAAK,kBAAkB,GAAG;AAC5B,aAAO,KAAK,YAAY,KAAK,SAAS,MAAM;AAAA,IAC9C,OAAO;AACL,YAAM,sBAAsB,uBAAuB;AAAA,IACrD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,UAAU;AACZ,QAAI,KAAK,kBAAkB,GAAG;AAC5B,aAAO,KAAK,YAAY,KAAK,SAAS,QAAQ;AAAA,IAChD,OAAO;AACL,YAAM,sBAAsB,uBAAuB;AAAA,IACrD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,iBAAiB,cAAc;AAC7B,WAAO,aAAa,aAAa,WAAW,KAAK,CAAC,WAAU,sBAAsB,IAAI,aAAa,aAAa,CAAC,CAAC,KAAK,KAAK,iBAAiB,YAAY,MAAM,cAAc,WAAW,KAAK,iBAAiB,aAAa;AAAA,EAC7N;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc,WAAW;AACvB,WAAO,UAAU,QAAQ,wBAAwB,KAAK,MAAM;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY,WAAW;AACrB,QAAI,WAAW;AACf,UAAM,qBAAqB,IAAI,UAAU,KAAK,SAAS,mBAAmB;AAC1E,UAAM,+BAA+B,mBAAmB,iBAAiB;AACzE,UAAM,uBAAuB,6BAA6B;AAC1D,UAAM,wBAAwB,KAAK,gCAAgC;AACnE,0BAAsB,QAAQ,CAAC,aAAa,UAAU;AACpD,UAAI,aAAa,qBAAqB,KAAK;AAC3C,UAAI,UAAU,KAAK,KAAK,iBAAiB,4BAA4B,GAAG;AACtE,cAAM,WAAW,IAAI,UAAU,KAAK,SAAS,sBAAsB,EAAE,iBAAiB,EAAE,aAAa,CAAC;AAMtG,YAAI,eAAe,UAAU;AAC3B,eAAK,OAAO,QAAQ,gCAAgC,UAAU,YAAY,QAAQ,EAAE;AACpF,uBAAa;AAAA,QACf;AAAA,MACF;AACA,UAAI,gBAAgB,YAAY;AAC9B,mBAAW,SAAS,QAAQ,IAAI,UAAU,KAAK,IAAI,WAAW,GAAG;AAAA,MACnE;AAAA,IACF,CAAC;AACD,WAAO,KAAK,cAAc,QAAQ;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,qCAAqC;AACvC,UAAM,yBAAyB,KAAK;AACpC,QAAI,KAAK,mBAAmB,SAAS,OAAO,KAAK,KAAK,kBAAkB,cAAc,QAAQ,KAAK,iBAAiB,aAAa,OAAO,CAAC,KAAK,iCAAiC,sBAAsB,GAAG;AACtM,aAAO,GAAG,KAAK,kBAAkB;AAAA,IACnC;AACA,WAAO,GAAG,KAAK,kBAAkB;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA,EAIA,oBAAoB;AAClB,WAAO,CAAC,CAAC,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKM,wBAAwB;AAAA;AAC5B,WAAK,mBAAmB,oBAAoB,kBAAkB,gCAAgC,KAAK,aAAa;AAChH,YAAM,iBAAiB,KAAK,yBAAyB;AACrD,YAAM,uBAAuB,MAAM,YAAY,KAAK,6BAA6B,KAAK,IAAI,GAAG,kBAAkB,uCAAuC,KAAK,QAAQ,KAAK,mBAAmB,KAAK,aAAa,EAAE,cAAc;AAC7N,WAAK,qBAAqB,KAAK,mBAAmB,QAAQ,KAAK,iBAAiB,eAAe,iBAAiB;AAChH,YAAM,iBAAiB,MAAM,YAAY,KAAK,uBAAuB,KAAK,IAAI,GAAG,kBAAkB,iCAAiC,KAAK,QAAQ,KAAK,mBAAmB,KAAK,aAAa,EAAE,cAAc;AAC3M,WAAK,qBAAqB,gBAAgB,sBAAsB;AAAA,QAC9D,QAAQ;AAAA,MACV,CAAC;AACD,WAAK,mBAAmB,UAAU;AAAA,QAChC;AAAA,QACA,yBAAyB;AAAA,MAC3B,GAAG,KAAK,aAAa;AAAA,IACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,2BAA2B;AACzB,QAAI,iBAAiB,KAAK,aAAa,4BAA4B,KAAK,eAAe;AACvF,QAAI,CAAC,gBAAgB;AACnB,uBAAiB;AAAA,QACf,SAAS,CAAC;AAAA,QACV,iBAAiB,KAAK;AAAA,QACtB,mBAAmB,KAAK;AAAA,QACxB,qBAAqB,KAAK;AAAA,QAC1B,wBAAwB;AAAA,QACxB,gBAAgB;AAAA,QAChB,sBAAsB;AAAA,QACtB,QAAQ;AAAA,QACR,oBAAoB;AAAA,QACpB,sBAAsB;AAAA,QACtB,WAAW,mCAAmC;AAAA,QAC9C,UAAU;AAAA,MACZ;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,qBAAqB,gBAAgB,sBAAsB,wBAAwB;AACjF,QAAI,yBAAyB,wBAAwB,SAAS,wBAAwB,WAAW,wBAAwB,OAAO;AAE9H,qBAAe,YAAY,mCAAmC;AAC9D,qBAAe,sBAAsB,KAAK;AAAA,IAC5C;AACA,UAAM,WAAW,KAAK,aAAa,kCAAkC,eAAe,eAAe;AACnG,SAAK,aAAa,qBAAqB,UAAU,cAAc;AAC/D,SAAK,WAAW;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKM,uBAAuB,gBAAgB;AAAA;AAC3C,WAAK,mBAAmB,oBAAoB,kBAAkB,iCAAiC,KAAK,aAAa;AACjH,YAAM,gBAAgB,KAAK,uCAAuC,cAAc;AAEhF,UAAI,eAAe;AACjB,YAAI,cAAc,WAAW,wBAAwB,kBAAkB;AAErE,cAAI,KAAK,iBAAiB,0BAA0B,aAAa;AAC/D,gBAAI,cAAc,UAAU;AAC1B,oBAAM,oBAAoB,MAAM,YAAY,KAAK,sCAAsC,KAAK,IAAI,GAAG,kBAAkB,gDAAgD,KAAK,QAAQ,KAAK,mBAAmB,KAAK,aAAa,EAAE,cAAc,QAAQ;AACpP,8CAAgC,gBAAgB,mBAAmB,KAAK;AACxE,6BAAe,sBAAsB,KAAK;AAAA,YAC5C;AAAA,UACF;AAAA,QACF;AACA,eAAO,cAAc;AAAA,MACvB;AAEA,UAAI,WAAW,MAAM,YAAY,KAAK,+BAA+B,KAAK,IAAI,GAAG,kBAAkB,yCAAyC,KAAK,QAAQ,KAAK,mBAAmB,KAAK,aAAa,EAAE;AACrM,UAAI,UAAU;AAEZ,YAAI,KAAK,iBAAiB,0BAA0B,aAAa;AAC/D,qBAAW,MAAM,YAAY,KAAK,sCAAsC,KAAK,IAAI,GAAG,kBAAkB,gDAAgD,KAAK,QAAQ,KAAK,mBAAmB,KAAK,aAAa,EAAE,QAAQ;AAAA,QACzN;AACA,wCAAgC,gBAAgB,UAAU,IAAI;AAC9D,eAAO,wBAAwB;AAAA,MACjC,OAAO;AAEL,cAAM,sBAAsB,mBAAmB,KAAK,kCAAkC;AAAA,MACxF;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,uCAAuC,gBAAgB;AACrD,SAAK,OAAO,QAAQ,kEAAkE;AACtF,UAAM,iBAAiB,KAAK,8BAA8B;AAC1D,QAAI,gBAAgB;AAClB,WAAK,OAAO,QAAQ,oDAAoD;AACxE,sCAAgC,gBAAgB,gBAAgB,KAAK;AACrE,aAAO;AAAA,QACL,QAAQ,wBAAwB;AAAA,MAClC;AAAA,IACF;AACA,SAAK,OAAO,QAAQ,gHAAgH;AAEpI,QAAI,KAAK,iBAAiB,4BAA4B;AACpD,WAAK,OAAO,QAAQ,yJAAyJ;AAAA,IAC/K,OAAO;AACL,YAAM,oBAAoB,KAAK,uCAAuC;AACtE,UAAI,mBAAmB;AACrB,wCAAgC,gBAAgB,mBAAmB,KAAK;AACxE,eAAO;AAAA,UACL,QAAQ,wBAAwB;AAAA,UAChC,UAAU;AAAA,QACZ;AAAA,MACF,OAAO;AACL,aAAK,OAAO,QAAQ,4HAA4H;AAAA,MAClJ;AAAA,IACF;AAEA,UAAM,wBAAwB,2BAA2B,cAAc;AACvE,QAAI,KAAK,oBAAoB,cAAc,KAAK,eAAe,wBAAwB,CAAC,uBAAuB;AAE7G,WAAK,OAAO,QAAQ,uCAAuC;AAC3D,aAAO;AAAA,QACL,QAAQ,wBAAwB;AAAA,MAClC;AAAA,IACF,WAAW,uBAAuB;AAChC,WAAK,OAAO,QAAQ,iCAAiC;AAAA,IACvD;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,oBAAoB,gBAAgB;AAClC,UAAM,qBAAqB,IAAI,UAAU,eAAe,mBAAmB;AAC3E,UAAM,cAAc,mBAAmB,iBAAiB,EAAE;AAC1D,WAAO,YAAY,WAAW,KAAK,gCAAgC,aAAa;AAAA,EAClF;AAAA;AAAA;AAAA;AAAA,EAIA,gCAAgC;AAC9B,QAAI,KAAK,iBAAiB,mBAAmB;AAC3C,UAAI;AACF,eAAO,KAAK,MAAM,KAAK,iBAAiB,iBAAiB;AAAA,MAC3D,SAAS,GAAG;AACV,cAAM,+BAA+B,wBAAwB;AAAA,MAC/D;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMM,iCAAiC;AAAA;AACrC,WAAK,mBAAmB,oBAAoB,kBAAkB,yCAAyC,KAAK,aAAa;AACzH,YAAM,UAAU,CAAC;AAKjB,YAAM,8BAA8B,KAAK;AACzC,WAAK,OAAO,QAAQ,yFAAyF,2BAA2B,EAAE;AAC1I,UAAI;AACF,cAAM,WAAW,MAAM,KAAK,iBAAiB,oBAAoB,6BAA6B,OAAO;AACrG,cAAM,kBAAkB,uBAAuB,SAAS,IAAI;AAC5D,YAAI,iBAAiB;AACnB,iBAAO,SAAS;AAAA,QAClB,OAAO;AACL,eAAK,OAAO,QAAQ,4FAA4F;AAChH,iBAAO;AAAA,QACT;AAAA,MACF,SAAS,GAAG;AACV,aAAK,OAAO,QAAQ,6CAA6C,CAAC,EAAE;AACpE,eAAO;AAAA,MACT;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAIA,yCAAyC;AACvC,QAAI,KAAK,mBAAmB,kBAAkB;AAC5C,aAAO,iBAAiB,KAAK,eAAe;AAAA,IAC9C;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAKM,sCAAsC,UAAU;AAAA;AACpD,WAAK,mBAAmB,oBAAoB,kBAAkB,gDAAgD,KAAK,aAAa;AAChI,YAAM,4BAA4B,KAAK,iBAAiB,0BAA0B;AAClF,UAAI,2BAA2B;AAC7B,YAAI,8BAA8B,UAAU,iCAAiC;AAC3E,eAAK,wBAAwB,iBAAiB,wBAAwB;AACtE,eAAK,wBAAwB,cAAc;AAC3C,iBAAO,WAAU,+BAA+B,UAAU,yBAAyB;AAAA,QACrF;AACA,cAAM,yBAAyB,MAAM,YAAY,KAAK,gBAAgB,aAAa,KAAK,KAAK,eAAe,GAAG,kBAAkB,6BAA6B,KAAK,QAAQ,KAAK,mBAAmB,KAAK,aAAa,EAAE,KAAK,iBAAiB,0BAA0B,mBAAmB,KAAK,uBAAuB;AACtT,YAAI,wBAAwB;AAC1B,eAAK,wBAAwB,iBAAiB,wBAAwB;AACtE,eAAK,wBAAwB,cAAc;AAC3C,iBAAO,WAAU,+BAA+B,UAAU,sBAAsB;AAAA,QAClF;AACA,aAAK,wBAAwB,iBAAiB,wBAAwB;AAAA,MACxE;AACA,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOM,6BAA6B,gBAAgB;AAAA;AACjD,WAAK,mBAAmB,oBAAoB,kBAAkB,uCAAuC,KAAK,aAAa;AACvH,YAAM,sBAAsB,KAAK,6CAA6C,cAAc;AAC5F,UAAI,qBAAqB;AACvB,eAAO;AAAA,MACT;AAEA,YAAM,WAAW,MAAM,YAAY,KAAK,qCAAqC,KAAK,IAAI,GAAG,kBAAkB,+CAA+C,KAAK,QAAQ,KAAK,mBAAmB,KAAK,aAAa,EAAE;AACnN,UAAI,UAAU;AACZ,qCAA6B,gBAAgB,UAAU,IAAI;AAC3D,eAAO,wBAAwB;AAAA,MACjC;AAEA,YAAM,+BAA+B,kBAAkB;AAAA,IACzD;AAAA;AAAA,EACA,6CAA6C,gBAAgB;AAC3D,SAAK,OAAO,QAAQ,0EAA0E;AAC9F,SAAK,OAAO,WAAW,sBAAsB,KAAK,iBAAiB,oBAAoB,UAAU,cAAc,EAAE;AACjH,SAAK,OAAO,WAAW,uBAAuB,KAAK,iBAAiB,qBAAqB,UAAU,cAAc,EAAE;AACnH,SAAK,OAAO,WAAW,wBAAwB,eAAe,uBAAuB,UAAU,cAAc,EAAE;AAC/G,UAAM,WAAW,KAAK,oCAAoC;AAC1D,QAAI,UAAU;AACZ,WAAK,OAAO,QAAQ,2DAA2D;AAC/E,mCAA6B,gBAAgB,UAAU,KAAK;AAC5D,aAAO,wBAAwB;AAAA,IACjC;AAEA,SAAK,OAAO,QAAQ,8HAA8H;AAClJ,QAAI,KAAK,QAAQ,4BAA4B;AAC3C,WAAK,OAAO,QAAQ,gLAAgL;AAAA,IACtM,OAAO;AACL,YAAM,oBAAoB,6CAA6C,KAAK,eAAe;AAC3F,UAAI,mBAAmB;AACrB,aAAK,OAAO,QAAQ,uDAAuD;AAC3E,qCAA6B,gBAAgB,mBAAmB,KAAK;AACrE,eAAO,wBAAwB;AAAA,MACjC;AACA,WAAK,OAAO,QAAQ,0IAA0I;AAAA,IAChK;AACA,UAAM,wBAAwB,2BAA2B,cAAc;AACvE,QAAI,KAAK,oBAAoB,cAAc,KAAK,eAAe,sBAAsB,CAAC,uBAAuB;AAC3G,WAAK,OAAO,QAAQ,8CAA8C;AAElE,aAAO,wBAAwB;AAAA,IACjC,WAAW,uBAAuB;AAChC,WAAK,OAAO,QAAQ,iCAAiC;AAAA,IACvD;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,sCAAsC;AAEpC,QAAI,KAAK,kBAAkB,cAAc,MAAM;AAC7C,WAAK,OAAO,QAAQ,qGAAqG;AACzH,aAAO,WAAU,qCAAqC,KAAK,eAAe;AAAA,IAC5E;AAEA,QAAI,KAAK,iBAAiB,wBAAwB;AAChD,WAAK,OAAO,QAAQ,sFAAsF;AAC1G,UAAI;AACF,aAAK,OAAO,QAAQ,mDAAmD;AACvE,cAAM,iBAAiB,KAAK,MAAM,KAAK,iBAAiB,sBAAsB;AAC9E,cAAM,WAAW,6CAA6C,eAAe,UAAU,KAAK,eAAe;AAC3G,aAAK,OAAO,QAAQ,sCAAsC;AAC1D,YAAI,UAAU;AACZ,eAAK,OAAO,QAAQ,+EAA+E;AACnG,iBAAO;AAAA,QACT,OAAO;AACL,eAAK,OAAO,QAAQ,uEAAuE;AAAA,QAC7F;AAAA,MACF,SAAS,GAAG;AACV,aAAK,OAAO,QAAQ,gGAAgG;AACpH,cAAM,+BAA+B,6BAA6B;AAAA,MACpE;AAAA,IACF;AAEA,QAAI,KAAK,qBAAqB,GAAG;AAC/B,WAAK,OAAO,QAAQ,gGAAgG;AACpH,aAAO,WAAU,qCAAqC,KAAK,eAAe;AAAA,IAC5E;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMM,uCAAuC;AAAA;AAC3C,WAAK,mBAAmB,oBAAoB,kBAAkB,+CAA+C,KAAK,aAAa;AAC/H,YAAM,4BAA4B,GAAG,UAAU,4BAA4B,GAAG,KAAK,kBAAkB;AACrG,YAAM,UAAU,CAAC;AAKjB,UAAI,QAAQ;AACZ,UAAI;AACF,cAAM,WAAW,MAAM,KAAK,iBAAiB,oBAAoB,2BAA2B,OAAO;AACnG,YAAI;AACJ,YAAI;AACJ,YAAI,iCAAiC,SAAS,IAAI,GAAG;AACnD,8BAAoB,SAAS;AAC7B,qBAAW,kBAAkB;AAC7B,eAAK,OAAO,WAAW,iCAAiC,kBAAkB,yBAAyB,EAAE;AAAA,QACvG,WAAW,sCAAsC,SAAS,IAAI,GAAG;AAC/D,eAAK,OAAO,QAAQ,sHAAsH,SAAS,MAAM,EAAE;AAC3J,8BAAoB,SAAS;AAC7B,cAAI,kBAAkB,UAAU,UAAU,kBAAkB;AAC1D,iBAAK,OAAO,MAAM,oEAAoE;AACtF,mBAAO;AAAA,UACT;AACA,eAAK,OAAO,QAAQ,oDAAoD,kBAAkB,KAAK,EAAE;AACjG,eAAK,OAAO,QAAQ,gEAAgE,kBAAkB,iBAAiB,EAAE;AACzH,eAAK,OAAO,QAAQ,2FAA2F;AAC/G,qBAAW,CAAC;AAAA,QACd,OAAO;AACL,eAAK,OAAO,MAAM,4FAA4F;AAC9G,iBAAO;AAAA,QACT;AACA,aAAK,OAAO,QAAQ,wIAAwI;AAC5J,gBAAQ,6CAA6C,UAAU,KAAK,eAAe;AAAA,MACrF,SAAS,OAAO;AACd,YAAI,iBAAiB,WAAW;AAC9B,eAAK,OAAO,MAAM;AAAA,SAAoG,MAAM,SAAS;AAAA,qBAAwB,MAAM,YAAY,EAAE;AAAA,QACnL,OAAO;AACL,gBAAM,aAAa;AACnB,eAAK,OAAO,MAAM;AAAA,SAAwG,WAAW,IAAI;AAAA,qBAAwB,WAAW,OAAO,EAAE;AAAA,QACvL;AACA,eAAO;AAAA,MACT;AAEA,UAAI,CAAC,OAAO;AACV,aAAK,OAAO,QAAQ,sHAAsH;AAC1I,aAAK,OAAO,QAAQ,uDAAuD;AAC3E,gBAAQ,WAAU,qCAAqC,KAAK,eAAe;AAAA,MAC7E;AACA,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAIA,uBAAuB;AACrB,UAAM,UAAU,KAAK,iBAAiB,iBAAiB,OAAO,eAAa;AACzE,aAAO,aAAa,UAAU,iBAAiB,SAAS,EAAE,YAAY,MAAM,KAAK;AAAA,IACnF,CAAC;AACD,WAAO,QAAQ,SAAS;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,kBAAkB,iBAAiB,mBAAmB;AAC3D,QAAI;AACJ,QAAI,qBAAqB,kBAAkB,uBAAuB,mBAAmB,MAAM;AACzF,YAAM,SAAS,kBAAkB,SAAS,kBAAkB,SAAS,UAAU;AAC/E,oCAA8B,GAAG,kBAAkB,kBAAkB,IAAI,MAAM;AAAA,IACjF;AACA,WAAO,8BAA8B,8BAA8B;AAAA,EACrE;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,qCAAqC,MAAM;AAChD,WAAO;AAAA,MACL,mBAAmB;AAAA,MACnB,iBAAiB;AAAA,MACjB,SAAS,CAAC,IAAI;AAAA,IAChB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,oBAAoB;AAClB,QAAI,KAAK,iBAAiB;AACxB,aAAO,UAAU;AAAA,IACnB,WAAW,KAAK,kBAAkB,GAAG;AACnC,aAAO,KAAK,SAAS;AAAA,IACvB,OAAO;AACL,YAAM,sBAAsB,uBAAuB;AAAA,IACrD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ,MAAM;AACZ,WAAO,KAAK,SAAS,QAAQ,QAAQ,IAAI,IAAI;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,iCAAiC,MAAM;AACrC,WAAO,iCAAiC,IAAI,IAAI;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,uBAAuB,MAAM;AAClC,WAAO,UAAU,oBAAoB,QAAQ,IAAI,KAAK;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,6BAA6B,MAAM,QAAQ,aAAa;AAE7D,UAAM,uBAAuB,IAAI,UAAU,IAAI;AAC/C,yBAAqB,cAAc;AACnC,UAAM,oBAAoB,qBAAqB,iBAAiB;AAChE,QAAI,kBAAkB,GAAG,MAAM,IAAI,kBAAkB,eAAe;AACpE,QAAI,KAAK,uBAAuB,kBAAkB,eAAe,GAAG;AAClE,wBAAkB,GAAG,MAAM,IAAI,UAAU,iCAAiC;AAAA,IAC5E;AAEA,UAAM,MAAM,UAAU,gCAAgC,iCACjD,qBAAqB,iBAAiB,IADW;AAAA,MAEpD,iBAAiB;AAAA,IACnB,EAAC,EAAE;AAEH,QAAI,YAAa,QAAO,GAAG,GAAG,IAAI,WAAW;AAC7C,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,+BAA+B,UAAU,aAAa;AAC3D,UAAM,mBAAmB,mBACpB;AAEL,qBAAiB,yBAAyB,WAAU,6BAA6B,iBAAiB,wBAAwB,WAAW;AACrI,qBAAiB,iBAAiB,WAAU,6BAA6B,iBAAiB,gBAAgB,WAAW;AACrH,QAAI,iBAAiB,sBAAsB;AACzC,uBAAiB,uBAAuB,WAAU,6BAA6B,iBAAiB,sBAAsB,WAAW;AAAA,IACnI;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,uBAAuB,WAAW;AACvC,QAAI,gBAAgB;AACpB,UAAM,eAAe,IAAI,UAAU,SAAS;AAC5C,UAAM,yBAAyB,aAAa,iBAAiB;AAE7D,QAAI,uBAAuB,aAAa,WAAW,KAAK,uBAAuB,gBAAgB,SAAS,UAAU,aAAa,GAAG;AAChI,YAAM,mBAAmB,uBAAuB,gBAAgB,MAAM,GAAG,EAAE,CAAC;AAC5E,sBAAgB,GAAG,aAAa,GAAG,gBAAgB,GAAG,UAAU,wBAAwB;AAAA,IAC1F;AACA,WAAO;AAAA,EACT;AACF;AAEA,UAAU,wBAAwB,oBAAI,IAAI,CAAC,YAAY,cAAc,sBAAsB,QAAQ,sBAAsB,WAAW,sBAAsB,aAAa,CAAC;;;AC5tBxK,IAAM,eAAN,MAAM,sBAAqB,UAAU;AAAA,EACnC,YAAY,OAAO,YAAY,iBAAiB;AAC9C,UAAM,MAAM,WAAW,MAAM,cAAc,MAAM,QAAQ;AACzD,WAAO,eAAe,MAAM,cAAa,SAAS;AAClD,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,SAAK,aAAa;AAClB,SAAK,kBAAkB;AAAA,EACzB;AACF;AAQA,SAAS,mBAAmB,OAAO,YAAY,iBAAiB;AAC9D,SAAO,IAAI,aAAa,OAAO,YAAY,eAAe;AAC5D;;;ACvBA,IAAM,gBAAgB;AACtB,IAAM,2BAA2B;AACjC,IAAM,sBAAsB;AAK5B,IAAM,WAAW;;;ACGjB,IAAM,uCAAuC;AAAA,EAC3C,CAAC,aAAa,GAAG;AAAA,EACjB,CAAC,wBAAwB,GAAG;AAAA,EAC5B,CAAC,mBAAmB,GAAG;AAAA,EACvB,CAAC,QAAQ,GAAG;AACd;AAKA,IAAM,sCAAsC;AAAA,EAC1C,oBAAoB;AAAA,IAClB,MAAM;AAAA,IACN,MAAM,qCAAqC,aAAa;AAAA,EAC1D;AAAA,EACA,4BAA4B;AAAA,IAC1B,MAAM;AAAA,IACN,MAAM,qCAAqC,wBAAwB;AAAA,EACrE;AAAA,EACA,WAAW;AAAA,IACT,MAAM;AAAA,IACN,MAAM,qCAAqC,QAAQ;AAAA,EACrD;AACF;;;AC/BA,IAAM,uBAAuB;AAAA,EAC3B,qBAAqB,MAAM;AACzB,WAAO,QAAQ,OAAO,sBAAsB,oBAAoB,CAAC;AAAA,EACnE;AAAA,EACA,sBAAsB,MAAM;AAC1B,WAAO,QAAQ,OAAO,sBAAsB,oBAAoB,CAAC;AAAA,EACnE;AACF;;;ACVA,IAAM,kBAAkB;AACxB,IAAM,kBAAkB;;;ACExB,IAAM,0BAA0B;AAAA,EAC9B,CAAC,eAAe,GAAG;AAAA,EACnB,CAAC,eAAe,GAAG;AACrB;AAIA,IAAM,kBAAN,MAAM,yBAAwB,UAAU;AAAA,EACtC,YAAY,WAAW,cAAc;AACnC,UAAM,WAAW,YAAY;AAC7B,SAAK,OAAO;AACZ,WAAO,eAAe,MAAM,iBAAgB,SAAS;AAAA,EACvD;AACF;AAEA,SAAS,sBAAsB,MAAM;AACnC,SAAO,IAAI,gBAAgB,MAAM,wBAAwB,IAAI,CAAC;AAChE;;;ACfA,IAAM,aAAN,MAAM,YAAW;AAAA,EACf,YAAY,SAAS;AACnB,SAAK,MAAM,QAAQ;AACnB,SAAK,MAAM,QAAQ;AACnB,SAAK,MAAM,QAAQ;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,mBAAmB,kBAAkB;AAE1C,QAAI,CAAC,iBAAiB,KAAK;AACzB,YAAM,sBAAsB,eAAe;AAAA,IAC7C;AAEA,QAAI,CAAC,iBAAiB,KAAK;AACzB,YAAM,sBAAsB,eAAe;AAAA,IAC7C;AACA,UAAM,YAAY,IAAI,YAAW;AAAA;AAAA,MAE/B,KAAK,iBAAiB,OAAO,kBAAkB;AAAA,MAC/C,KAAK,iBAAiB;AAAA,MACtB,KAAK,iBAAiB;AAAA,IACxB,CAAC;AACD,WAAO,KAAK,UAAU,SAAS;AAAA,EACjC;AACF;;;AClCA,IAAM,6BAAN,MAAiC;AAAA,EAC/B,mBAAmB;AACjB;AAAA,EACF;AAAA,EACA,iBAAiB;AACf;AAAA,EACF;AAAA,EACA,mBAAmB;AACjB,WAAO;AAAA,EACT;AACF;AACA,IAAM,wBAAN,MAA4B;AAAA,EAC1B,aAAa;AACX,WAAO;AAAA,EACT;AAAA,EACA,iBAAiB,aAAa,eAAe;AAC3C,WAAO;AAAA,MACL,KAAK,MAAM;AAAA,MACX,SAAS,MAAM;AAAA,MAAC;AAAA,MAChB,KAAK,MAAM;AAAA,MAAC;AAAA,MACZ,WAAW,MAAM;AAAA,MAAC;AAAA,MAClB,OAAO;AAAA,QACL,SAAS,KAAK,WAAW;AAAA,QACzB,QAAQ,uBAAuB;AAAA,QAC/B,WAAW;AAAA,QACX,aAAa;AAAA,QACb,gBAAgB;AAAA,QAChB,UAAU;AAAA,QACV,MAAM;AAAA,QACN,aAAa,KAAK,IAAI;AAAA,QACtB,eAAe,iBAAiB;AAAA,MAClC;AAAA,MACA,aAAa,IAAI,2BAA2B;AAAA,IAC9C;AAAA,EACF;AAAA,EACA,8BAA8B;AAC5B,WAAO,IAAI,2BAA2B;AAAA,EACxC;AAAA,EACA,sBAAsB;AACpB,WAAO;AAAA,EACT;AAAA,EACA,sBAAsB;AACpB;AAAA,EACF;AAAA,EACA,kBAAkB;AAChB;AAAA,EACF;AAAA,EACA,iBAAiB;AACf,WAAO;AAAA,EACT;AAAA,EACA,sBAAsB;AACpB;AAAA,EACF;AAAA,EACA,4BAA4B;AAC1B,WAAO;AAAA,EACT;AAAA,EACA,yBAAyB;AACvB,WAAO;AAAA,EACT;AAAA,EACA,aAAa;AACX;AAAA,EACF;AAAA,EACA,YAAY;AACV;AAAA,EACF;AAAA,EACA,kBAAkB;AAChB;AAAA,EACF;AAAA,EACA,4BAA4B;AAC1B;AAAA,EACF;AACF;;;ACzEA,IAAM,iBAAiB;AACvB,IAAM,oBAAoB;AAC1B,IAAM,mBAAmB;AACzB,IAAM,iBAAiB;AACvB,IAAM,gBAAgB;AACtB,IAAM,oCAAoC;AAC1C,IAAM,qBAAqB;AAC3B,IAAM,+BAA+B;AACrC,IAAM,wBAAwB;AAC9B,IAAM,mBAAmB;AACzB,IAAM,mBAAmB;AACzB,IAAM,gBAAgB;AACtB,IAAM,sBAAsB;AAC5B,IAAM,uBAAuB;AAC7B,IAAM,mBAAmB;AACzB,IAAM,oBAAoB;AAC1B,IAAM,oBAAoB;AAC1B,IAAM,0BAA0B;AAChC,IAAM,0BAA0B;AAChC,IAAM,iBAAiB;AACvB,IAAM,yBAAyB;AAC/B,IAAM,2BAA2B;AACjC,IAAM,sCAAsC;AAC5C,IAAM,yBAAyB;AAC/B,IAAM,yBAAyB;AAC/B,IAAM,mBAAmB;AACzB,IAAM,wBAAwB;AAC9B,IAAM,kBAAkB;AACxB,IAAMC,yBAAwB;AAC9B,IAAMC,qBAAoB;AAC1B,IAAM,mBAAmB;AACzB,IAAM,wBAAwB;AAC9B,IAAM,oBAAoB;AAC1B,IAAM,oBAAoB;AAC1B,IAAM,mBAAmB;AACzB,IAAM,oCAAoC;AAC1C,IAAM,mCAAmC;AACzC,IAAM,sBAAsB;AAC5B,IAAM,yCAAyC;AAC/C,IAAM,yBAAyB;AAC/B,IAAM,8BAA8B;AACpC,IAAM,iCAAiC;AACvC,IAAM,uCAAuC;AAC7C,IAAM,2BAA2B;AACjC,IAAM,sBAAsB;AAC5B,IAAM,yBAAyB;AAC/B,IAAM,uBAAuB;AAC7B,IAAM,uBAAuB;;;AC1C7B,IAAM,YAAY;AAIlB,IAAM,2BAA2B;AAAA,EAC/B,CAAC,cAAc,GAAG;AAAA,EAClB,CAAC,iBAAiB,GAAG;AAAA,EACrB,CAAC,gBAAgB,GAAG;AAAA,EACpB,CAAC,cAAc,GAAG,qHAAqH,SAAS;AAAA,EAChJ,CAAC,aAAa,GAAG;AAAA,EACjB,CAAC,iCAAiC,GAAG,0GAA0G,SAAS;AAAA,EACxJ,CAAC,kBAAkB,GAAG;AAAA,EACtB,CAAC,4BAA4B,GAAG;AAAA,EAChC,CAAC,qBAAqB,GAAG,qIAAqI,SAAS;AAAA,EACvK,CAAC,gBAAgB,GAAG;AAAA,EACpB,CAAC,gBAAgB,GAAG;AAAA,EACpB,CAAC,aAAa,GAAG;AAAA,EACjB,CAAC,mBAAmB,GAAG,sDAAsD,SAAS;AAAA,EACtF,CAAC,oBAAoB,GAAG,uDAAuD,SAAS;AAAA,EACxF,CAAC,gBAAgB,GAAG;AAAA,EACpB,CAAC,iBAAiB,GAAG,2FAA2F,SAAS;AAAA,EACzH,CAAC,iBAAiB,GAAG;AAAA,EACrB,CAAC,uBAAuB,GAAG;AAAA,EAC3B,CAAC,uBAAuB,GAAG;AAAA,EAC3B,CAAC,cAAc,GAAG;AAAA,EAClB,CAAC,sBAAsB,GAAG;AAAA,EAC1B,CAAC,wBAAwB,GAAG;AAAA,EAC5B,CAAC,mCAAmC,GAAG;AAAA,EACvC,CAAC,sBAAsB,GAAG;AAAA,EAC1B,CAAC,sBAAsB,GAAG;AAAA,EAC1B,CAAC,gBAAgB,GAAG;AAAA,EACpB,CAAC,qBAAqB,GAAG;AAAA,EACzB,CAAC,eAAe,GAAG;AAAA,EACnB,CAACC,sBAAqB,GAAG;AAAA,EACzB,CAACC,kBAAiB,GAAG;AAAA,EACrB,CAAC,gBAAgB,GAAG;AAAA,EACpB,CAAC,qBAAqB,GAAG;AAAA,EACzB,CAAC,iBAAiB,GAAG;AAAA,EACrB,CAAC,iBAAiB,GAAG;AAAA,EACrB,CAAC,gBAAgB,GAAG;AAAA,EACpB,CAAC,iCAAiC,GAAG;AAAA,EACrC,CAAC,gCAAgC,GAAG;AAAA,EACpC,CAAC,mBAAmB,GAAG;AAAA,EACvB,CAAC,sCAAsC,GAAG,kDAAkD,SAAS;AAAA,EACrG,CAAC,sBAAsB,GAAG;AAAA,EAC1B,CAAC,2BAA2B,GAAG;AAAA,EAC/B,CAAC,8BAA8B,GAAG,gIAAgI,SAAS;AAAA,EAC3K,CAAC,oCAAoC,GAAG,kGAAkG,SAAS;AAAA,EACnJ,CAAC,wBAAwB,GAAG;AAAA,EAC5B,CAAC,mBAAmB,GAAG;AAAA,EACvB,CAAC,sBAAsB,GAAG;AAAA,EAC1B,CAAC,oBAAoB,GAAG;AAAA,EACxB,CAAC,oBAAoB,GAAG;AAC1B;AASA,IAAM,0BAA0B;AAAA,EAC9B,kBAAkB;AAAA,IAChB,MAAM;AAAA,IACN,MAAM,yBAAyB,cAAc;AAAA,EAC/C;AAAA,EACA,oBAAoB;AAAA,IAClB,MAAM;AAAA,IACN,MAAM,yBAAyB,iBAAiB;AAAA,EAClD;AAAA,EACA,uBAAuB;AAAA,IACrB,MAAM;AAAA,IACN,MAAM,yBAAyB,gBAAgB;AAAA,EACjD;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,IACN,MAAM,yBAAyB,cAAc;AAAA,EAC/C;AAAA,EACA,8BAA8B;AAAA,IAC5B,MAAM;AAAA,IACN,MAAM,yBAAyB,aAAa;AAAA,EAC9C;AAAA,EACA,wCAAwC;AAAA,IACtC,MAAM;AAAA,IACN,MAAM,yBAAyB,iCAAiC;AAAA,EAClE;AAAA,EACA,yBAAyB;AAAA,IACvB,MAAM;AAAA,IACN,MAAM,yBAAyB,kBAAkB;AAAA,EACnD;AAAA,EACA,mCAAmC;AAAA,IACjC,MAAM;AAAA,IACN,MAAM,yBAAyB,4BAA4B;AAAA,EAC7D;AAAA,EACA,uBAAuB;AAAA,IACrB,MAAM;AAAA,IACN,MAAM,yBAAyB,qBAAqB;AAAA,EACtD;AAAA,EACA,kBAAkB;AAAA,IAChB,MAAM;AAAA,IACN,MAAM,yBAAyB,gBAAgB;AAAA,EACjD;AAAA,EACA,kBAAkB;AAAA,IAChB,MAAM;AAAA,IACN,MAAM,yBAAyB,gBAAgB;AAAA,EACjD;AAAA,EACA,oBAAoB;AAAA,IAClB,MAAM;AAAA,IACN,MAAM,yBAAyB,aAAa;AAAA,EAC9C;AAAA,EACA,0BAA0B;AAAA,IACxB,MAAM;AAAA,IACN,MAAM,yBAAyB,mBAAmB;AAAA,EACpD;AAAA,EACA,2BAA2B;AAAA,IACzB,MAAM;AAAA,IACN,MAAM,yBAAyB,oBAAoB;AAAA,EACrD;AAAA,EACA,uBAAuB;AAAA,IACrB,MAAM;AAAA,IACN,MAAM,yBAAyB,gBAAgB;AAAA,EACjD;AAAA,EACA,uCAAuC;AAAA,IACrC,MAAM;AAAA,IACN,MAAM,yBAAyB,iBAAiB;AAAA,EAClD;AAAA,EACA,gCAAgC;AAAA,IAC9B,MAAM;AAAA,IACN,MAAM,yBAAyB,iBAAiB;AAAA,EAClD;AAAA,EACA,8BAA8B;AAAA,IAC5B,MAAM;AAAA,IACN,MAAM,yBAAyB,uBAAuB;AAAA,EACxD;AAAA,EACA,8BAA8B;AAAA,IAC5B,MAAM;AAAA,IACN,MAAM,yBAAyB,uBAAuB;AAAA,EACxD;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,IACN,MAAM,yBAAyB,cAAc;AAAA,EAC/C;AAAA,EACA,wBAAwB;AAAA,IACtB,MAAM;AAAA,IACN,MAAM,yBAAyB,sBAAsB;AAAA,EACvD;AAAA,EACA,0BAA0B;AAAA,IACxB,MAAM;AAAA,IACN,MAAM,yBAAyB,wBAAwB;AAAA,EACzD;AAAA,EACA,qCAAqC;AAAA,IACnC,MAAM;AAAA,IACN,MAAM,yBAAyB,mCAAmC;AAAA,EACpE;AAAA,EACA,wBAAwB;AAAA,IACtB,MAAM;AAAA,IACN,MAAM,yBAAyB,sBAAsB;AAAA,EACvD;AAAA,EACA,mBAAmB;AAAA,IACjB,MAAM;AAAA,IACN,MAAM,yBAAyB,sBAAsB;AAAA,EACvD;AAAA,EACA,kBAAkB;AAAA,IAChB,MAAM;AAAA,IACN,MAAM,yBAAyB,gBAAgB;AAAA,EACjD;AAAA,EACA,yBAAyB;AAAA,IACvB,MAAM;AAAA,IACN,MAAM,yBAAyB,qBAAqB;AAAA,EACtD;AAAA,EACA,iBAAiB;AAAA,IACf,MAAM;AAAA,IACN,MAAM,yBAAyB,eAAe;AAAA,EAChD;AAAA,EACA,uBAAuB;AAAA,IACrB,MAAMD;AAAA,IACN,MAAM,yBAAyBA,sBAAqB;AAAA,EACtD;AAAA,EACA,mBAAmB;AAAA,IACjB,MAAMC;AAAA,IACN,MAAM,yBAAyBA,kBAAiB;AAAA,EAClD;AAAA,EACA,kBAAkB;AAAA,IAChB,MAAM;AAAA,IACN,MAAM,yBAAyB,gBAAgB;AAAA,EACjD;AAAA,EACA,8BAA8B;AAAA,IAC5B,MAAM;AAAA,IACN,MAAM,yBAAyB,qBAAqB;AAAA,EACtD;AAAA,EACA,wBAAwB;AAAA,IACtB,MAAM;AAAA,IACN,MAAM,yBAAyB,iBAAiB;AAAA,EAClD;AAAA,EACA,6BAA6B;AAAA,IAC3B,MAAM;AAAA,IACN,MAAM,yBAAyB,iBAAiB;AAAA,EAClD;AAAA,EACA,kBAAkB;AAAA,IAChB,MAAM;AAAA,IACN,MAAM,yBAAyB,gBAAgB;AAAA,EACjD;AAAA,EACA,iCAAiC;AAAA,IAC/B,MAAM;AAAA,IACN,MAAM,yBAAyB,iCAAiC;AAAA,EAClE;AAAA,EACA,gCAAgC;AAAA,IAC9B,MAAM;AAAA,IACN,MAAM,yBAAyB,gCAAgC;AAAA,EACjE;AAAA,EACA,qBAAqB;AAAA,IACnB,MAAM;AAAA,IACN,MAAM,yBAAyB,mBAAmB;AAAA,EACpD;AAAA,EACA,wCAAwC;AAAA,IACtC,MAAM;AAAA,IACN,MAAM,yBAAyB,sCAAsC;AAAA,EACvE;AAAA,EACA,wBAAwB;AAAA,IACtB,MAAM;AAAA,IACN,MAAM,yBAAyB,sBAAsB;AAAA,EACvD;AAAA,EACA,6BAA6B;AAAA,IAC3B,MAAM;AAAA,IACN,MAAM,yBAAyB,2BAA2B;AAAA,EAC5D;AAAA,EACA,gCAAgC;AAAA,IAC9B,MAAM;AAAA,IACN,MAAM,yBAAyB,8BAA8B;AAAA,EAC/D;AAAA,EACA,sCAAsC;AAAA,IACpC,MAAM;AAAA,IACN,MAAM,yBAAyB,oCAAoC;AAAA,EACrE;AAAA,EACA,0BAA0B;AAAA,IACxB,MAAM;AAAA,IACN,MAAM,yBAAyB,wBAAwB;AAAA,EACzD;AAAA,EACA,0BAA0B;AAAA,IACxB,MAAM;AAAA,IACN,MAAM,yBAAyB,mBAAmB;AAAA,EACpD;AAAA,EACA,wBAAwB;AAAA,IACtB,MAAM;AAAA,IACN,MAAM,yBAAyB,sBAAsB;AAAA,EACvD;AACF;AAIA,IAAM,mBAAN,MAAM,0BAAyB,UAAU;AAAA,EACvC,YAAY,WAAW,UAAU;AAC/B,UAAM,WAAW,yBAAyB,SAAS,GAAG,QAAQ;AAC9D,WAAO,eAAe,MAAM,kBAAiB,SAAS;AACtD,SAAK,OAAO;AAAA,EACd;AACF;AACA,SAAS,uBAAuB,WAAW,UAAU;AACnD,SAAO,IAAI,iBAAiB,WAAW,QAAQ;AACjD;;;ACpQA,IAAM,mBAAmB;AAAA;AAAA;AAAA;AAAA,EAIvB,+BAA+B;AAAA;AAAA;AAAA;AAAA,EAI/B,qBAAqB;AAAA;AAAA;AAAA;AAAA,EAIrB,aAAa;AAAA;AAAA;AAAA;AAAA,EAIb,cAAc;AAAA;AAAA;AAAA;AAAA,EAId,mBAAmB;AAAA;AAAA;AAAA;AAAA,EAInB,0BAA0B;AAAA;AAAA;AAAA;AAAA,EAI1B,UAAU;AACZ;AAYA,IAAM,uBAAuB;AAAA,EAC3B,cAAc;AAAA,EACd,gBAAgB;AAAA,EAChB,eAAe;AACjB;AAIA,IAAM,oBAAoB;AAAA,EACxB,KAAK;AAAA,EACL,MAAM;AACR;AAoDA,IAAI;AAAA,CACH,SAAUC,kBAAiB;AAC1B,EAAAA,iBAAgB,UAAU,IAAI;AAC9B,EAAAA,iBAAgB,OAAO,IAAI;AAC3B,EAAAA,iBAAgB,QAAQ,IAAI;AAC5B,EAAAA,iBAAgB,MAAM,IAAI;AAC5B,GAAG,oBAAoB,kBAAkB,CAAC,EAAE;AAK5C,IAAM,oBAAoB;AAAA;AAAA;AAAA;AAAA,EAIxB,SAAS;AAAA;AAAA;AAAA;AAAA,EAIT,OAAO;AAAA;AAAA;AAAA;AAAA,EAIP,QAAQ;AAAA;AAAA;AAAA;AAAA,EAIR,cAAc;AAAA;AAAA;AAAA;AAAA,EAId,WAAW;AAAA;AAAA;AAAA;AAAA,EAIX,gBAAgB;AAAA;AAAA;AAAA;AAAA,EAIhB,MAAM;AACR;AAOA,IAAM,iBAAiB;AAEvB,IAAM,aAAa;AAAA,EACjB,OAAO;AAAA,EACP,SAAS;AACX;AAEA,IAAM,UAAU;AAChB,IAAM,aAAa;AACnB,IAAM,gBAAgB,GAAG,OAAO;AAChC,IAAM,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMxB,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,EAKT,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMb,4BAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM5B,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMd,wBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKxB,MAAM;AACR;AACA,IAAM,wBAAwB,CAAC,kBAAkB,SAAS,kBAAkB,MAAM,kBAAkB,sBAAsB;AAC1H,IAAM,sBAAsB;AAC5B,IAAM,oBAAoB;;;ACpM1B,SAAS,UAAU,OAAO;AACxB,SAAO,mBAAmB,aAAa,KAAK,EAAE,QAAQ,MAAM,EAAE,EAAE,QAAQ,OAAO,GAAG,EAAE,QAAQ,OAAO,GAAG,CAAC;AACzG;AAKA,SAAS,aAAa,UAAU;AAC9B,SAAO,aAAa,QAAQ,EAAE,QAAQ,MAAM,EAAE,EAAE,QAAQ,OAAO,GAAG,EAAE,QAAQ,OAAO,GAAG;AACxF;AAKA,SAAS,aAAa,OAAO;AAC3B,SAAO,aAAa,IAAI,YAAY,EAAE,OAAO,KAAK,CAAC;AACrD;AAKA,SAAS,aAAa,QAAQ;AAC5B,QAAM,YAAY,MAAM,KAAK,QAAQ,OAAK,OAAO,cAAc,CAAC,CAAC,EAAE,KAAK,EAAE;AAC1E,SAAO,KAAK,SAAS;AACvB;;;ACrBA,SAAS,aAAa,OAAO;AAC3B,SAAO,IAAI,YAAY,EAAE,OAAO,eAAe,KAAK,CAAC;AACvD;AAKA,SAAS,eAAe,cAAc;AACpC,MAAI,gBAAgB,aAAa,QAAQ,MAAM,GAAG,EAAE,QAAQ,MAAM,GAAG;AACrE,UAAQ,cAAc,SAAS,GAAG;AAAA,IAChC,KAAK;AACH;AAAA,IACF,KAAK;AACH,uBAAiB;AACjB;AAAA,IACF,KAAK;AACH,uBAAiB;AACjB;AAAA,IACF;AACE,YAAM,uBAAuB,mBAAmB;AAAA,EACpD;AACA,QAAM,YAAY,KAAK,aAAa;AACpC,SAAO,WAAW,KAAK,WAAW,OAAK,EAAE,YAAY,CAAC,KAAK,CAAC;AAC9D;;;ACnBA,IAAM,uBAAuB;AAI7B,IAAM,gBAAgB;AAEtB,IAAM,iBAAiB;AAEvB,IAAM,kBAAkB,IAAI,WAAW,CAAC,GAAM,GAAM,CAAI,CAAC;AAEzD,IAAM,aAAa;AAEnB,IAAM,aAAa,IAAI,YAAY,CAAC;AAQpC,IAAM,kBAAkB;AACxB,IAAM,yBAAyB;AAAA,EAC7B,MAAM;AAAA,EACN,MAAM;AAAA,EACN,eAAe;AAAA,EACf,gBAAgB;AAClB;AAIA,SAAS,wBAAwB,0BAA0B;AACzD,MAAI,CAAC,QAAQ;AACX,UAAM,uBAAuB,qBAAqB;AAAA,EACpD;AACA,MAAI,CAAC,OAAO,QAAQ;AAClB,UAAM,uBAAuB,iBAAiB;AAAA,EAChD;AACA,MAAI,CAAC,4BAA4B,CAAC,OAAO,OAAO,QAAQ;AACtD,UAAM,uBAAuB,mBAAmB,eAAe;AAAA,EACjE;AACF;AAOA,SAAe,aAAa,YAAY,mBAAmB,eAAe;AAAA;AACxE,uBAAmB,oBAAoB,kBAAkB,cAAc,aAAa;AACpF,UAAM,UAAU,IAAI,YAAY;AAChC,UAAM,OAAO,QAAQ,OAAO,UAAU;AACtC,WAAO,OAAO,OAAO,OAAO,OAAO,eAAe,IAAI;AAAA,EACxD;AAAA;AAYA,SAAS,kBAAkB;AACzB,SAAO,OAAO,gBAAgB,UAAU;AACxC,SAAO,WAAW,CAAC;AACrB;AAMA,SAAS,gBAAgB;AACvB,QAAM,mBAAmB,KAAK,IAAI;AAClC,QAAM,WAAW,gBAAgB,IAAI,QAAS,gBAAgB,IAAI;AAElE,QAAM,QAAQ,IAAI,WAAW,EAAE;AAE/B,QAAM,QAAQ,KAAK,MAAM,WAAW,KAAK,EAAE;AAE3C,QAAM,UAAU,WAAW,KAAK,KAAK;AAErC,QAAM,UAAU,gBAAgB;AAChC,QAAM,CAAC,IAAI,mBAAmB,KAAK;AACnC,QAAM,CAAC,IAAI,mBAAmB,KAAK;AACnC,QAAM,CAAC,IAAI,mBAAmB,KAAK;AACnC,QAAM,CAAC,IAAI,mBAAmB,KAAK;AACnC,QAAM,CAAC,IAAI,mBAAmB,KAAK;AACnC,QAAM,CAAC,IAAI;AACX,QAAM,CAAC,IAAI,MAAO,UAAU;AAC5B,QAAM,CAAC,IAAI;AACX,QAAM,CAAC,IAAI,MAAO,YAAY;AAC9B,QAAM,CAAC,IAAI,YAAY;AACvB,QAAM,EAAE,IAAI,YAAY;AACxB,QAAM,EAAE,IAAI;AACZ,QAAM,EAAE,IAAI,YAAY;AACxB,QAAM,EAAE,IAAI,YAAY;AACxB,QAAM,EAAE,IAAI,YAAY;AACxB,QAAM,EAAE,IAAI;AACZ,MAAI,OAAO;AACX,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,YAAQ,WAAW,OAAO,MAAM,CAAC,MAAM,CAAC;AACxC,YAAQ,WAAW,OAAO,MAAM,CAAC,IAAI,EAAG;AACxC,QAAI,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,GAAG;AAC5C,cAAQ;AAAA,IACV;AAAA,EACF;AACA,SAAO;AACT;AAMA,SAAe,gBAAgB,aAAa,QAAQ;AAAA;AAClD,WAAO,OAAO,OAAO,OAAO,YAAY,wBAAwB,aAAa,MAAM;AAAA,EACrF;AAAA;AAKA,SAAe,UAAU,KAAK;AAAA;AAC5B,WAAO,OAAO,OAAO,OAAO,UAAU,gBAAgB,GAAG;AAAA,EAC3D;AAAA;AAOA,SAAe,UAAU,KAAK,aAAa,QAAQ;AAAA;AACjD,WAAO,OAAO,OAAO,OAAO,UAAU,gBAAgB,KAAK,wBAAwB,aAAa,MAAM;AAAA,EACxG;AAAA;AAMA,SAAe,KAAK,KAAK,MAAM;AAAA;AAC7B,WAAO,OAAO,OAAO,OAAO,KAAK,wBAAwB,KAAK,IAAI;AAAA,EACpE;AAAA;AA4EA,SAAe,WAAW,WAAW;AAAA;AACnC,UAAM,aAAa,MAAM,aAAa,SAAS;AAC/C,UAAM,YAAY,IAAI,WAAW,UAAU;AAC3C,WAAO,aAAa,SAAS;AAAA,EAC/B;AAAA;;;AC5OA,IAAM,sBAAsB;AAC5B,IAAM,uCAAuC;AAC7C,IAAM,2BAA2B;;;ACGjC,IAAM,wCAAwC;AAAA,EAC5C,CAAC,mBAAmB,GAAG;AAAA,EACvB,CAAC,oCAAoC,GAAG;AAAA,EACxC,CAAC,wBAAwB,GAAG;AAC9B;AAKA,IAAM,uCAAuC;AAAA,EAC3C,0BAA0B;AAAA,IACxB,MAAM;AAAA,IACN,MAAM,sCAAsC,mBAAmB;AAAA,EACjE;AAAA,EACA,uBAAuB;AAAA,IACrB,MAAM;AAAA,IACN,MAAM,sCAAsC,oCAAoC;AAAA,EAClF;AAAA,EACA,0BAA0B;AAAA,IACxB,MAAM;AAAA,IACN,MAAM,sCAAsC,wBAAwB;AAAA,EACtE;AACF;AAIA,IAAM,gCAAN,MAAM,uCAAsC,UAAU;AAAA,EACpD,YAAY,WAAW,cAAc;AACnC,UAAM,WAAW,YAAY;AAC7B,SAAK,OAAO;AACZ,WAAO,eAAe,MAAM,+BAA8B,SAAS;AAAA,EACrE;AACF;AACA,SAAS,oCAAoC,WAAW;AACtD,SAAO,IAAI,8BAA8B,WAAW,sCAAsC,SAAS,CAAC;AACtG;;;A5C5BA,SAAS,UAAU,eAAe;AAEhC,gBAAc,SAAS,OAAO;AAC9B,MAAI,OAAO,cAAc,QAAQ,iBAAiB,YAAY;AAE5D,kBAAc,QAAQ,aAAa,MAAM,IAAI,GAAG,cAAc,SAAS,MAAM,GAAG,cAAc,SAAS,QAAQ,GAAG,cAAc,SAAS,MAAM,EAAE;AAAA,EACnJ;AACF;AAIA,SAAS,YAAY,KAAK;AACxB,QAAM,WAAW,IAAI,MAAM,GAAG;AAC9B,WAAS,MAAM;AACf,SAAO,SAAS,OAAO,SAAS,SAAS,IAAI,SAAS,KAAK,GAAG,IAAI;AACpE;AAIA,SAAS,aAAa;AACpB,SAAO,OAAO,WAAW;AAC3B;AAIA,SAAS,YAAY;AACnB,SAAO,OAAO,WAAW,eAAe,CAAC,CAAC,OAAO,UAAU,OAAO,WAAW,UAAU,OAAO,OAAO,SAAS,YAAY,OAAO,KAAK,QAAQ,GAAG,iBAAiB,iBAAiB,GAAG,MAAM;AAC9L;AAKA,SAAS,gBAAgB;AACvB,SAAO,OAAO,WAAW,eAAe,OAAO,WAAW,OAAO,SAAS,KAAK,MAAM,GAAG,EAAE,CAAC,EAAE,MAAM,GAAG,EAAE,CAAC,IAAI;AAC/G;AAIA,SAAS,cAAc;AACrB,QAAM,aAAa,IAAI,UAAU,OAAO,SAAS,IAAI;AACrD,QAAM,gBAAgB,WAAW,iBAAiB;AAClD,SAAO,GAAG,cAAc,QAAQ,KAAK,cAAc,eAAe;AACpE;AAKA,SAAS,6BAA6B;AACpC,QAAM,iBAAiB,UAAU,4BAA4B,OAAO,SAAS,IAAI;AAEjF,MAAI,kBAAkB,WAAW,GAAG;AAClC,UAAM,uBAAuB,iBAAiB;AAAA,EAChD;AACF;AAMA,SAAS,sBAAsB,uBAAuB;AACpD,MAAI,WAAW,KAAK,CAAC,uBAAuB;AAE1C,UAAM,uBAAuB,gBAAgB;AAAA,EAC/C;AACF;AAIA,SAAS,4BAA4B;AAEnC,MAAI,UAAU,GAAG;AACf,UAAM,uBAAuB,iBAAiB;AAAA,EAChD;AACF;AAKA,SAAS,6BAA6B;AACpC,MAAI,OAAO,WAAW,aAAa;AACjC,UAAM,uBAAuB,qBAAqB;AAAA,EACpD;AACF;AAKA,SAAS,8BAA8B,aAAa;AAClD,MAAI,CAAC,aAAa;AAChB,UAAM,uBAAuB,oCAAoC;AAAA,EACnE;AACF;AAKA,SAAS,eAAe,aAAa;AAEnC,6BAA2B;AAE3B,6BAA2B;AAE3B,4BAA0B;AAE1B,gCAA8B,WAAW;AAC3C;AAMA,SAAS,uBAAuB,aAAa,QAAQ;AACnD,iBAAe,WAAW;AAC1B,wBAAsB,OAAO,OAAO,qBAAqB;AAEzD,MAAI,OAAO,MAAM,kBAAkB,qBAAqB,iBAAiB,CAAC,OAAO,MAAM,wBAAwB;AAC7G,UAAM,oCAAoC,wBAAwB;AAAA,EACpE;AACF;AAMA,SAAS,WAAW,WAAW;AAC7B,QAAM,OAAO,SAAS,cAAc,MAAM;AAC1C,OAAK,MAAM;AACX,OAAK,OAAO,IAAI,IAAI,SAAS,EAAE;AAC/B,OAAK,cAAc;AACnB,WAAS,KAAK,YAAY,IAAI;AAE9B,SAAO,WAAW,MAAM;AACtB,QAAI;AACF,eAAS,KAAK,YAAY,IAAI;AAAA,IAChC,QAAQ;AAAA,IAAC;AAAA,EACX,GAAG,GAAK;AACV;AAKA,SAAS,aAAa;AACpB,SAAO,cAAc;AACvB;;;A6C3JA,IAAM,mBAAN,MAAM,kBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMrB,iBAAiB,KAAK,SAAS;AAC7B,WAAO,kBAAiB,sBAAsB,KAAK,OAAO;AAAA,EAC5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,iBAAiB,KAAK,SAAS;AAC7B,WAAO,kBAAiB,sBAAsB,KAAK,OAAO;AAAA,EAC5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,sBAAsB,KAAK,SAAS;AACzC,QAAI,QAAQ,WAAW;AACrB,aAAO,SAAS,QAAQ,GAAG;AAAA,IAC7B,OAAO;AACL,aAAO,SAAS,OAAO,GAAG;AAAA,IAC5B;AACA,WAAO,IAAI,QAAQ,aAAW;AAC5B,iBAAW,MAAM;AACf,gBAAQ,IAAI;AAAA,MACd,GAAG,QAAQ,OAAO;AAAA,IACpB,CAAC;AAAA,EACH;AACF;;;AC1BA,IAAM,cAAN,MAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOV,oBAAoB,KAAK,SAAS;AAAA;AACtC,UAAI;AACJ,UAAI,kBAAkB,CAAC;AACvB,UAAI,iBAAiB;AACrB,YAAM,aAAa,gBAAgB,OAAO;AAC1C,UAAI;AACF,mBAAW,MAAM,MAAM,KAAK;AAAA,UAC1B,QAAQ,kBAAkB;AAAA,UAC1B,SAAS;AAAA,QACX,CAAC;AAAA,MACH,SAAS,GAAG;AACV,cAAM,uBAAuB,OAAO,UAAU,SAAS,mBAAmBC,sBAAqB;AAAA,MACjG;AACA,wBAAkB,cAAc,SAAS,OAAO;AAChD,UAAI;AACF,yBAAiB,SAAS;AAC1B,eAAO;AAAA,UACL,SAAS;AAAA,UACT,MAAM,MAAM,SAAS,KAAK;AAAA,UAC1B,QAAQ;AAAA,QACV;AAAA,MACF,SAAS,GAAG;AACV,cAAM,mBAAmB,uBAAuB,qBAAqB,GAAG,gBAAgB,eAAe;AAAA,MACzG;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOM,qBAAqB,KAAK,SAAS;AAAA;AACvC,YAAM,UAAU,WAAW,QAAQ,QAAQ;AAC3C,YAAM,aAAa,gBAAgB,OAAO;AAC1C,UAAI;AACJ,UAAI,iBAAiB;AACrB,UAAI,kBAAkB,CAAC;AACvB,UAAI;AACF,mBAAW,MAAM,MAAM,KAAK;AAAA,UAC1B,QAAQ,kBAAkB;AAAA,UAC1B,SAAS;AAAA,UACT,MAAM;AAAA,QACR,CAAC;AAAA,MACH,SAAS,GAAG;AACV,cAAM,uBAAuB,OAAO,UAAU,SAASC,qBAAoBD,sBAAqB;AAAA,MAClG;AACA,wBAAkB,cAAc,SAAS,OAAO;AAChD,UAAI;AACF,yBAAiB,SAAS;AAC1B,eAAO;AAAA,UACL,SAAS;AAAA,UACT,MAAM,MAAM,SAAS,KAAK;AAAA,UAC1B,QAAQ;AAAA,QACV;AAAA,MACF,SAAS,GAAG;AACV,cAAM,mBAAmB,uBAAuB,qBAAqB,GAAG,gBAAgB,eAAe;AAAA,MACzG;AAAA,IACF;AAAA;AACF;AAKA,SAAS,gBAAgB,SAAS;AAChC,MAAI;AACF,UAAM,UAAU,IAAI,QAAQ;AAC5B,QAAI,EAAE,WAAW,QAAQ,UAAU;AACjC,aAAO;AAAA,IACT;AACA,UAAM,iBAAiB,QAAQ;AAC/B,WAAO,QAAQ,cAAc,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AACvD,cAAQ,OAAO,KAAK,KAAK;AAAA,IAC3B,CAAC;AACD,WAAO;AAAA,EACT,SAAS,GAAG;AACV,UAAM,uBAAuB,oBAAoB;AAAA,EACnD;AACF;AAMA,SAAS,cAAc,SAAS;AAC9B,MAAI;AACF,UAAM,aAAa,CAAC;AACpB,YAAQ,QAAQ,CAAC,OAAO,QAAQ;AAC9B,iBAAW,GAAG,IAAI;AAAA,IACpB,CAAC;AACD,WAAO;AAAA,EACT,SAAS,GAAG;AACV,UAAM,uBAAuB,oBAAoB;AAAA,EACnD;AACF;;;ACrGA,IAAM,2BAA2B;AACjC,IAAM,4BAA4B;AAClC,IAAM,8BAA8B;AACpC,IAAM,6CAA6C;AAUnD,SAAS,mBAAmB;AAAA,EAC1B,MAAM;AAAA,EACN,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,WAAW;AACb,GAAG,sBAAsB;AAEvB,QAAM,uBAAuB;AAAA,IAC3B,UAAU,UAAU;AAAA,IACpB,WAAW,GAAG,UAAU,iBAAiB;AAAA,IACzC,kBAAkB,CAAC;AAAA,IACnB,wBAAwB,UAAU;AAAA,IAClC,mBAAmB,UAAU;AAAA,IAC7B,aAAa,OAAO,WAAW,cAAc,cAAc,IAAI;AAAA,IAC/D,uBAAuB,UAAU;AAAA,IACjC,2BAA2B;AAAA,IAC3B,oBAAoB,CAAC;AAAA,IACrB,cAAc,aAAa;AAAA,IAC3B,aAAa;AAAA,MACX,oBAAoB,mBAAmB;AAAA,MACvC,eAAe,CAAC,UAAU,cAAc,UAAU,eAAe,UAAU,oBAAoB;AAAA,IACjG;AAAA,IACA,mBAAmB;AAAA,MACjB,oBAAoB,mBAAmB;AAAA,MACvC,QAAQ,UAAU;AAAA,IACpB;AAAA,IACA,4BAA4B;AAAA,IAC5B,uBAAuB;AAAA,IACvB,eAAe;AAAA,EACjB;AAEA,QAAM,wBAAwB;AAAA,IAC5B,eAAe,qBAAqB;AAAA,IACpC,wBAAwB,qBAAqB;AAAA,IAC7C,wBAAwB;AAAA,IACxB,eAAe;AAAA;AAAA,IAEf,uBAAuB,kBAAkB,eAAe,kBAAkB,qBAAqB,eAAe,OAAO;AAAA,IACrH,2BAA2B;AAAA,EAC7B;AAEA,QAAM,yBAAyB;AAAA;AAAA,IAE7B,gBAAgB,MAAM;AAAA,IAEtB;AAAA,IACA,UAAU,SAAS;AAAA,IACnB,mBAAmB;AAAA,EACrB;AAEA,QAAM,iCAAiC,iCAClC,yBADkC;AAAA,IAErC,eAAe;AAAA,IACf,eAAe,uBAAuB,IAAI,YAAY,IAAI;AAAA,IAC1D,kBAAkB,IAAI,iBAAiB;AAAA,IACvC,kBAAkB;AAAA;AAAA,IAElB,mBAAmB,iBAAiB,oBAAoB;AAAA,IACxD,mBAAmB,iBAAiB,oBAAoB;AAAA,IACxD,mBAAmB;AAAA,IACnB,2BAA2B;AAAA,IAC3B,aAAa;AAAA,IACb,uBAAuB;AAAA,IACvB,qBAAqB;AAAA,IACrB,8BAA8B,iBAAiB,gCAAgC;AAAA,IAC/E,0BAA0B,iBAAiB;AAAA,EAC7C;AACA,QAAM,wBAAwB,gDACzB,iCACA,kBAFyB;AAAA,IAG5B,eAAe,iBAAiB,iBAAiB;AAAA,EACnD;AACA,QAAM,4BAA4B;AAAA,IAChC,aAAa;AAAA,MACX,SAAS,UAAU;AAAA,MACnB,YAAY,UAAU;AAAA,IACxB;AAAA,IACA,QAAQ,IAAI,sBAAsB;AAAA,EACpC;AAEA,MAAI,eAAe,iBAAiB,aAAa,QAAQ,eAAe,aAAa;AACnF,UAAM,SAAS,IAAI,OAAO,sBAAsB,aAAa;AAC7D,WAAO,QAAQ,KAAK,UAAU,+BAA+B,sCAA8B,oBAAoB,CAAC,CAAC;AAAA,EACnH;AAEA,MAAI,eAAe,gBAAgB,cAAc,iBAAiB,aAAa,OAAO,uBAAuB,qBAAqB;AAChI,UAAM,+BAA+B,sCAA8B,yBAAyB;AAAA,EAC9F;AACA,QAAM,kBAAkB;AAAA,IACtB,MAAM,gDACD,uBACA,gBAFC;AAAA,MAGJ,aAAa,kCACR,qBAAqB,cACrB,eAAe;AAAA,IAEtB;AAAA,IACA,OAAO,kCACF,wBACA;AAAA,IAEL,QAAQ;AAAA,IACR,WAAW,kCACN,4BACA;AAAA,EAEP;AACA,SAAO;AACT;;;ACnIA,IAAME,QAAO;AACb,IAAMC,WAAU;;;ACchB,IAAM,uBAAN,MAAM,sBAAqB;AAAA,EACzB,OAAO,eAAe,OAAO,SAAS;AACpC,YAAQ,OAAO;AAAA,MACb,KAAK,SAAS;AAEZ,gBAAQ,MAAM,OAAO;AACrB;AAAA,MACF,KAAK,SAAS;AAEZ,gBAAQ,KAAK,OAAO;AACpB;AAAA,MACF,KAAK,SAAS;AAEZ,gBAAQ,MAAM,OAAO;AACrB;AAAA,MACF,KAAK,SAAS;AAEZ,gBAAQ,KAAK,OAAO;AACpB;AAAA,MACF;AAEE,gBAAQ,IAAI,OAAO;AACnB;AAAA,IACJ;AAAA,EACF;AAAA,EACA,YAAY,QAAQ;AAMlB,SAAK,qBAAqB,OAAO,WAAW;AAC5C,SAAK,SAAS,mBAAmB,QAAQ,KAAK,kBAAkB;AAChE,QAAI;AACJ,QAAI;AACF,uBAAiB,OAAO,qBAAqB,cAAc;AAAA,IAE7D,SAAS,GAAG;AAAA,IAAC;AACb,UAAM,cAAc,gBAAgB,QAAQ,mBAAmB;AAC/D,UAAM,gBAAgB,gBAAgB,QAAQ,iBAAiB,GAAG,YAAY;AAC9E,UAAM,oBAAoB,kBAAkB,SAAS,OAAO,kBAAkB,UAAU,QAAQ;AAChG,UAAM,gBAAgB,mBACjB,KAAK,OAAO,OAAO;AAExB,UAAM,WAAW,eAAe,OAAO,KAAK,QAAQ,EAAE,SAAS,WAAW,IAAI,SAAS,WAAW,IAAI;AACtG,QAAI,UAAU;AACZ,oBAAc,iBAAiB,sBAAqB;AACpD,oBAAc,WAAW;AAAA,IAC3B;AACA,QAAI,sBAAsB,QAAW;AACnC,oBAAc,oBAAoB;AAAA,IACpC;AACA,SAAK,SAAS,IAAI,OAAO,eAAeC,OAAMC,QAAO;AACrD,SAAK,YAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY;AACV,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY;AACV,WAAO,KAAK;AAAA,EACd;AAAA,EACA,cAAc;AACZ,WAAO,KAAK;AAAA,EACd;AAAA,EACA,uBAAuB;AACrB,WAAO,KAAK;AAAA,EACd;AACF;;;ACvFA,IAAM,mBAAmB;AAAA,EACvB,yBAAyB;AAAA,EACzB,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,gBAAgB;AAAA,EAChB,iBAAiB;AAAA,EACjB,UAAU;AAAA,EACV,oBAAoB;AAAA,EACpB,0BAA0B;AAAA;AAC5B;;;ACCA,IAAM,cAAN,MAAM,aAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOhB,OAAa,gCAAgC;AAAA;AAC3C,UAAI,WAAW,QAAW;AACxB,cAAM,IAAI,MAAM,qBAAqB;AAAA,MACvC;AACA,UAAI,OAAO,wBAAwB,QAAW;AAC5C,cAAM,IAAI,MAAM,yCAAyC;AAAA,MAC3D;AACA,UAAI;AACF,eAAO,oBAAoB,iBAAiB,WAAW,cAAY;AACjE,gBAAM,kBAAkB,OAAO,aAAa,WAAW,WAAW,SAAS;AAC3E,gBAAM,mBAAmB,KAAK,MAAM,eAAe;AACnD,gBAAM,UAAU,aAAY,eAAe,KAAK,aAAW,QAAQ,cAAc,iBAAiB,SAAS;AAC3G,cAAI,YAAY,QAAW;AACzB,yBAAY,eAAe,OAAO,aAAY,eAAe,QAAQ,OAAO,GAAG,CAAC;AAChF,gBAAI,iBAAiB,SAAS;AAC5B,sBAAQ,QAAQ,gBAAgB;AAAA,YAClC,OAAO;AACL,sBAAQ,OAAO,iBAAiB,KAAK;AAAA,YACvC;AAAA,UACF;AAAA,QACF,CAAC;AACD,cAAM,iBAAiB,MAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC5D,gBAAM,UAAU,aAAY,aAAa,gBAAgB;AACzD,gBAAM,UAAU;AAAA,YACd,WAAW,QAAQ;AAAA,YACnB,QAAQ,QAAQ;AAAA,YAChB;AAAA,YACA;AAAA,UACF;AACA,uBAAY,eAAe,KAAK,OAAO;AACvC,iBAAO,oBAAoB,YAAY,KAAK,UAAU,OAAO,CAAC;AAAA,QAChE,CAAC;AACD,eAAO,aAAY,4BAA4B,eAAe,WAAW;AAAA,MAC3E,SAAS,OAAO;AACd,eAAO,QAAQ,IAAI,KAAK;AACxB,cAAM;AAAA,MACR;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,oBAAoB,SAAS;AAC3B,WAAO,KAAK,SAAS,iBAAiB,OAAO;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,eAAe,SAAS;AACtB,WAAO,KAAK,SAAS,YAAY,OAAO;AAAA,EAC1C;AAAA,EACM,SAAS,aAAa,SAAS;AAAA;AACnC,YAAM,SAAS,MAAM,KAAK,YAAY,aAAa;AAAA,QACjD,aAAa;AAAA,MACf,CAAC;AACD,aAAO;AAAA,QACL,OAAO,aAAY,4BAA4B,OAAO,KAAK;AAAA,QAC3D,SAAS,aAAY,4BAA4B,OAAO,OAAO;AAAA,MACjE;AAAA,IACF;AAAA;AAAA,EACA,sBAAsB;AACpB,WAAO,KAAK,gBAAgB;AAAA,EAC9B;AAAA,EACA,oBAAoB;AAClB,WAAO,KAAK,iBAAiB,KAAK,iBAAiB;AAAA,EACrD;AAAA,EACA,OAAO,aAAa,QAAQ,eAAe;AACzC,WAAO;AAAA,MACL,aAAa;AAAA,MACb;AAAA,MACA,WAAW,cAAc;AAAA,MACzB,UAAU,KAAK,IAAI;AAAA,MACnB,eAAe,iBAAiB;AAAA,MAChC,sBAAsBC;AAAA,OACnB;AAAA,EAEP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,YAAY,QAAQ,eAAe;AACjC,UAAM,UAAU,aAAY,aAAa,QAAQ,aAAa;AAC9D,UAAM,UAAU,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC/C,YAAM,UAAU;AAAA,QACd,WAAW,QAAQ;AAAA,QACnB,QAAQ,QAAQ;AAAA,QAChB;AAAA,QACA;AAAA,MACF;AACA,mBAAY,eAAe,KAAK,OAAO;AACvC,aAAO,oBAAoB,YAAY,KAAK,UAAU,OAAO,CAAC;AAAA,IAChE,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,OAAO,4BAA4B,OAAO;AACxC,QAAI,UAAU,QAAW;AACvB,YAAM,cAAc;AAAA,QAClB,QAAQ,iBAAiB;AAAA,MAC3B;AACA,YAAM;AAAA,IACR;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,SAAS,YAAY,gBAAgB,cAAc;AAC7D,SAAK,UAAU;AACf,SAAK,aAAa;AAClB,SAAK,iBAAiB;AACtB,SAAK,eAAe;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAa,SAAS;AAAA;AACpB,YAAM,WAAW,MAAM,aAAY,8BAA8B;AACjE,aAAO,IAAI,aAAY,SAAS,SAAS,SAAS,YAAY,SAAS,gBAAgB,SAAS,YAAY;AAAA,IAC9G;AAAA;AACF;AACA,YAAY,iBAAiB,CAAC;;;AC/I9B,IAAM,4BAAN,MAAM,mCAAkC,qBAAqB;AAAA,EAC3D,cAAc;AACZ,UAAM,GAAG,SAAS;AAClB,SAAK,cAAc;AACnB,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,gBAAgB;AACd,WAAO,2BAA0B;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ;AACN,WAAO,2BAA0B;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB;AACf,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMM,aAAa;AAAA;AACjB,UAAI;AACF,YAAI,OAAO,WAAW,aAAa;AACjC,cAAI,OAAO,OAAO,8BAA8B,YAAY;AAC1D,kBAAM,OAAO,0BAA0B;AAAA,UACzC;AACA,gBAAM,cAAc,MAAM,YAAY,OAAO;AAM7C,eAAK,iBAAiB,YAAY,kBAAkB;AACpD,eAAK,cAAc;AACnB,eAAK,YAAY,gBAAgB;AAAA,QACnC;AAAA,MACF,SAAS,IAAI;AACX,aAAK,OAAO,QAAQ,gDAAgD,EAAE,GAAG;AAAA,MAC3E;AACA,WAAK,OAAO,KAAK,qCAAqC,KAAK,SAAS,EAAE;AACtE,aAAO,KAAK;AAAA,IACd;AAAA;AACF;AAKA,0BAA0B,cAAc;AAIxC,0BAA0B,KAAK;;;ACjE/B,IAAM,2BAAN,MAAM,kCAAiC,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM1D,gBAAgB;AACd,WAAO,0BAAyB;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ;AACN,WAAO,0BAAyB;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMM,aAAa;AAAA;AACjB,WAAK,YAAY,OAAO,WAAW;AACnC,aAAO,KAAK;AAAA,IAKd;AAAA;AACF;AAKA,yBAAyB,cAAc;AAIvC,yBAAyB,KAAK;;;ACjC9B,IAAM,kBAAN,MAAsB;AAAA,EACpB,cAAc;AACZ,SAAK,SAAS;AACd,SAAK,UAAU;AACf,SAAK,YAAY;AACjB,SAAK,SAAS;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAIM,OAAO;AAAA;AACX,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,cAAM,SAAS,OAAO,UAAU,KAAK,KAAK,QAAQ,KAAK,OAAO;AAC9D,eAAO,iBAAiB,iBAAiB,OAAK;AAC5C,gBAAM,QAAQ;AACd,gBAAM,OAAO,OAAO,kBAAkB,KAAK,SAAS;AAAA,QACtD,CAAC;AACD,eAAO,iBAAiB,WAAW,OAAK;AACtC,gBAAM,QAAQ;AACd,eAAK,KAAK,MAAM,OAAO;AACvB,eAAK,SAAS;AACd,kBAAQ;AAAA,QACV,CAAC;AACD,eAAO,iBAAiB,SAAS,MAAM,OAAO,uBAAuB,mBAAmB,CAAC,CAAC;AAAA,MAC5F,CAAC;AAAA,IACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,kBAAkB;AAChB,UAAM,KAAK,KAAK;AAChB,QAAI,MAAM,KAAK,QAAQ;AACrB,SAAG,MAAM;AACT,WAAK,SAAS;AAAA,IAChB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIM,mBAAmB;AAAA;AACvB,UAAI,CAAC,KAAK,QAAQ;AAChB,eAAO,KAAK,KAAK;AAAA,MACnB;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKM,QAAQ,KAAK;AAAA;AACjB,YAAM,KAAK,iBAAiB;AAC5B,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAEtC,YAAI,CAAC,KAAK,IAAI;AACZ,iBAAO,OAAO,uBAAuB,eAAe,CAAC;AAAA,QACvD;AACA,cAAM,cAAc,KAAK,GAAG,YAAY,CAAC,KAAK,SAAS,GAAG,UAAU;AACpE,cAAM,cAAc,YAAY,YAAY,KAAK,SAAS;AAC1D,cAAM,QAAQ,YAAY,IAAI,GAAG;AACjC,cAAM,iBAAiB,WAAW,OAAK;AACrC,gBAAM,QAAQ;AACd,eAAK,gBAAgB;AACrB,kBAAQ,MAAM,OAAO,MAAM;AAAA,QAC7B,CAAC;AACD,cAAM,iBAAiB,SAAS,OAAK;AACnC,eAAK,gBAAgB;AACrB,iBAAO,CAAC;AAAA,QACV,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMM,QAAQ,KAAK,SAAS;AAAA;AAC1B,YAAM,KAAK,iBAAiB;AAC5B,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAEtC,YAAI,CAAC,KAAK,IAAI;AACZ,iBAAO,OAAO,uBAAuB,eAAe,CAAC;AAAA,QACvD;AACA,cAAM,cAAc,KAAK,GAAG,YAAY,CAAC,KAAK,SAAS,GAAG,WAAW;AACrE,cAAM,cAAc,YAAY,YAAY,KAAK,SAAS;AAC1D,cAAM,QAAQ,YAAY,IAAI,SAAS,GAAG;AAC1C,cAAM,iBAAiB,WAAW,MAAM;AACtC,eAAK,gBAAgB;AACrB,kBAAQ;AAAA,QACV,CAAC;AACD,cAAM,iBAAiB,SAAS,OAAK;AACnC,eAAK,gBAAgB;AACrB,iBAAO,CAAC;AAAA,QACV,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKM,WAAW,KAAK;AAAA;AACpB,YAAM,KAAK,iBAAiB;AAC5B,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAI,CAAC,KAAK,IAAI;AACZ,iBAAO,OAAO,uBAAuB,eAAe,CAAC;AAAA,QACvD;AACA,cAAM,cAAc,KAAK,GAAG,YAAY,CAAC,KAAK,SAAS,GAAG,WAAW;AACrE,cAAM,cAAc,YAAY,YAAY,KAAK,SAAS;AAC1D,cAAM,WAAW,YAAY,OAAO,GAAG;AACvC,iBAAS,iBAAiB,WAAW,MAAM;AACzC,eAAK,gBAAgB;AACrB,kBAAQ;AAAA,QACV,CAAC;AACD,iBAAS,iBAAiB,SAAS,OAAK;AACtC,eAAK,gBAAgB;AACrB,iBAAO,CAAC;AAAA,QACV,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAIM,UAAU;AAAA;AACd,YAAM,KAAK,iBAAiB;AAC5B,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAI,CAAC,KAAK,IAAI;AACZ,iBAAO,OAAO,uBAAuB,eAAe,CAAC;AAAA,QACvD;AACA,cAAM,cAAc,KAAK,GAAG,YAAY,CAAC,KAAK,SAAS,GAAG,UAAU;AACpE,cAAM,cAAc,YAAY,YAAY,KAAK,SAAS;AAC1D,cAAM,YAAY,YAAY,WAAW;AACzC,kBAAU,iBAAiB,WAAW,OAAK;AACzC,gBAAM,QAAQ;AACd,eAAK,gBAAgB;AACrB,kBAAQ,MAAM,OAAO,MAAM;AAAA,QAC7B,CAAC;AACD,kBAAU,iBAAiB,SAAS,OAAK;AACvC,eAAK,gBAAgB;AACrB,iBAAO,CAAC;AAAA,QACV,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKM,YAAY,KAAK;AAAA;AACrB,YAAM,KAAK,iBAAiB;AAC5B,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAI,CAAC,KAAK,IAAI;AACZ,iBAAO,OAAO,uBAAuB,eAAe,CAAC;AAAA,QACvD;AACA,cAAM,cAAc,KAAK,GAAG,YAAY,CAAC,KAAK,SAAS,GAAG,UAAU;AACpE,cAAM,cAAc,YAAY,YAAY,KAAK,SAAS;AAC1D,cAAM,gBAAgB,YAAY,MAAM,GAAG;AAC3C,sBAAc,iBAAiB,WAAW,OAAK;AAC7C,gBAAM,QAAQ;AACd,eAAK,gBAAgB;AACrB,kBAAQ,MAAM,OAAO,WAAW,CAAC;AAAA,QACnC,CAAC;AACD,sBAAc,iBAAiB,SAAS,OAAK;AAC3C,eAAK,gBAAgB;AACrB,iBAAO,CAAC;AAAA,QACV,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMM,iBAAiB;AAAA;AAErB,UAAI,KAAK,MAAM,KAAK,QAAQ;AAC1B,aAAK,gBAAgB;AAAA,MACvB;AACA,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,cAAM,kBAAkB,OAAO,UAAU,eAAe,OAAO;AAC/D,cAAM,KAAK,WAAW,MAAM,OAAO,KAAK,GAAG,GAAG;AAC9C,wBAAgB,iBAAiB,WAAW,MAAM;AAChD,uBAAa,EAAE;AACf,iBAAO,QAAQ,IAAI;AAAA,QACrB,CAAC;AACD,wBAAgB,iBAAiB,WAAW,MAAM;AAChD,uBAAa,EAAE;AACf,iBAAO,QAAQ,IAAI;AAAA,QACrB,CAAC;AACD,wBAAgB,iBAAiB,SAAS,MAAM;AAC9C,uBAAa,EAAE;AACf,iBAAO,OAAO,KAAK;AAAA,QACrB,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AAAA;AACF;;;ACvMA,IAAM,gBAAN,MAAoB;AAAA,EAClB,cAAc;AACZ,SAAK,QAAQ,oBAAI,IAAI;AAAA,EACvB;AAAA,EACM,aAAa;AAAA;AAAA,IAEnB;AAAA;AAAA,EACA,QAAQ,KAAK;AACX,WAAO,KAAK,MAAM,IAAI,GAAG,KAAK;AAAA,EAChC;AAAA,EACA,YAAY,KAAK;AACf,WAAO,KAAK,QAAQ,GAAG;AAAA,EACzB;AAAA,EACA,QAAQ,KAAK,OAAO;AAClB,SAAK,MAAM,IAAI,KAAK,KAAK;AAAA,EAC3B;AAAA,EACM,YAAY,KAAK,OAAO;AAAA;AAC5B,WAAK,QAAQ,KAAK,KAAK;AAAA,IACzB;AAAA;AAAA,EACA,WAAW,KAAK;AACd,SAAK,MAAM,OAAO,GAAG;AAAA,EACvB;AAAA,EACA,UAAU;AACR,UAAM,YAAY,CAAC;AACnB,SAAK,MAAM,QAAQ,CAAC,OAAO,QAAQ;AACjC,gBAAU,KAAK,GAAG;AAAA,IACpB,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,YAAY,KAAK;AACf,WAAO,KAAK,MAAM,IAAI,GAAG;AAAA,EAC3B;AAAA,EACA,QAAQ;AACN,SAAK,MAAM,MAAM;AAAA,EACnB;AACF;;;AC1BA,IAAM,qBAAN,MAAyB;AAAA,EACvB,YAAY,QAAQ;AAClB,SAAK,gBAAgB,IAAI,cAAc;AACvC,SAAK,iBAAiB,IAAI,gBAAgB;AAC1C,SAAK,SAAS;AAAA,EAChB;AAAA,EACA,0BAA0B,OAAO;AAC/B,QAAI,iBAAiB,oBAAoB,MAAM,cAAc,qBAAqB;AAChF,WAAK,OAAO,MAAM,6IAA6I;AAAA,IACjK,OAAO;AACL,YAAM;AAAA,IACR;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMM,QAAQ,KAAK;AAAA;AACjB,YAAM,OAAO,KAAK,cAAc,QAAQ,GAAG;AAC3C,UAAI,CAAC,MAAM;AACT,YAAI;AACF,eAAK,OAAO,QAAQ,6EAA6E;AACjG,iBAAO,MAAM,KAAK,eAAe,QAAQ,GAAG;AAAA,QAC9C,SAAS,GAAG;AACV,eAAK,0BAA0B,CAAC;AAAA,QAClC;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOM,QAAQ,KAAK,OAAO;AAAA;AACxB,WAAK,cAAc,QAAQ,KAAK,KAAK;AACrC,UAAI;AACF,cAAM,KAAK,eAAe,QAAQ,KAAK,KAAK;AAAA,MAC9C,SAAS,GAAG;AACV,aAAK,0BAA0B,CAAC;AAAA,MAClC;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKM,WAAW,KAAK;AAAA;AACpB,WAAK,cAAc,WAAW,GAAG;AACjC,UAAI;AACF,cAAM,KAAK,eAAe,WAAW,GAAG;AAAA,MAC1C,SAAS,GAAG;AACV,aAAK,0BAA0B,CAAC;AAAA,MAClC;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKM,UAAU;AAAA;AACd,YAAM,YAAY,KAAK,cAAc,QAAQ;AAC7C,UAAI,UAAU,WAAW,GAAG;AAC1B,YAAI;AACF,eAAK,OAAO,QAAQ,4DAA4D;AAChF,iBAAO,MAAM,KAAK,eAAe,QAAQ;AAAA,QAC3C,SAAS,GAAG;AACV,eAAK,0BAA0B,CAAC;AAAA,QAClC;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKM,YAAY,KAAK;AAAA;AACrB,YAAM,cAAc,KAAK,cAAc,YAAY,GAAG;AACtD,UAAI,CAAC,aAAa;AAChB,YAAI;AACF,eAAK,OAAO,QAAQ,oEAAoE;AACxF,iBAAO,MAAM,KAAK,eAAe,YAAY,GAAG;AAAA,QAClD,SAAS,GAAG;AACV,eAAK,0BAA0B,CAAC;AAAA,QAClC;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAIA,gBAAgB;AAEd,SAAK,OAAO,QAAQ,6BAA6B;AACjD,SAAK,cAAc,MAAM;AACzB,SAAK,OAAO,QAAQ,4BAA4B;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA,EAKM,kBAAkB;AAAA;AACtB,UAAI;AACF,aAAK,OAAO,QAAQ,8BAA8B;AAClD,cAAM,YAAY,MAAM,KAAK,eAAe,eAAe;AAC3D,YAAI,WAAW;AACb,eAAK,OAAO,QAAQ,6BAA6B;AAAA,QACnD;AACA,eAAO;AAAA,MACT,SAAS,GAAG;AACV,aAAK,0BAA0B,CAAC;AAChC,eAAO;AAAA,MACT;AAAA,IACF;AAAA;AACF;;;AC/GA,IAAM,YAAN,MAAM,WAAU;AAAA,EACd,YAAY,QAAQ,mBAAmB,0BAA0B;AAC/D,SAAK,SAAS;AAEd,4BAAwB,4BAA4B,KAAK;AACzD,SAAK,QAAQ,IAAI,mBAAmB,KAAK,MAAM;AAC/C,SAAK,oBAAoB;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgB;AACd,WAAO,cAAc;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,OAAO;AAClB,WAAO,aAAa,KAAK;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,OAAO;AAClB,WAAO,aAAa,KAAK;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgB,OAAO;AACrB,WAAO,UAAU,KAAK;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAU,UAAU;AAClB,WAAO,KAAK,gBAAgB,KAAK,UAAU;AAAA,MACzC,KAAK;AAAA,IACP,CAAC,CAAC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKM,uBAAuB,SAAS;AAAA;AACpC,YAAM,4BAA4B,KAAK,mBAAmB,iBAAiB,kBAAkB,kCAAkC,QAAQ,aAAa;AAEpJ,YAAM,UAAU,MAAM,gBAAgB,WAAU,aAAa,WAAU,cAAc;AAErF,YAAM,eAAe,MAAM,UAAU,QAAQ,SAAS;AACtD,YAAM,qBAAqB;AAAA,QACzB,GAAG,aAAa;AAAA,QAChB,KAAK,aAAa;AAAA,QAClB,GAAG,aAAa;AAAA,MAClB;AACA,YAAM,kBAAkB,sBAAsB,kBAAkB;AAChE,YAAM,gBAAgB,MAAM,KAAK,WAAW,eAAe;AAE3D,YAAM,gBAAgB,MAAM,UAAU,QAAQ,UAAU;AAExD,YAAM,0BAA0B,MAAM,UAAU,eAAe,OAAO,CAAC,MAAM,CAAC;AAE9E,YAAM,KAAK,MAAM,QAAQ,eAAe;AAAA,QACtC,YAAY;AAAA,QACZ,WAAW,QAAQ;AAAA,QACnB,eAAe,QAAQ;AAAA,QACvB,YAAY,QAAQ;AAAA,MACtB,CAAC;AACD,UAAI,2BAA2B;AAC7B,kCAA0B,IAAI;AAAA,UAC5B,SAAS;AAAA,QACX,CAAC;AAAA,MACH;AACA,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKM,sBAAsB,KAAK;AAAA;AAC/B,YAAM,KAAK,MAAM,WAAW,GAAG;AAC/B,YAAM,WAAW,MAAM,KAAK,MAAM,YAAY,GAAG;AACjD,aAAO,CAAC;AAAA,IACV;AAAA;AAAA;AAAA;AAAA;AAAA,EAIM,gBAAgB;AAAA;AAEpB,WAAK,MAAM,cAAc;AAKzB,UAAI;AACF,cAAM,KAAK,MAAM,gBAAgB;AACjC,eAAO;AAAA,MACT,SAAS,GAAG;AACV,YAAI,aAAa,OAAO;AACtB,eAAK,OAAO,MAAM,wCAAwC,EAAE,OAAO,EAAE;AAAA,QACvE,OAAO;AACL,eAAK,OAAO,MAAM,6CAA6C;AAAA,QACjE;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMM,QAAQ,SAAS,KAAK,YAAY,eAAe;AAAA;AACrD,YAAM,qBAAqB,KAAK,mBAAmB,iBAAiB,kBAAkB,mBAAmB,aAAa;AACtH,YAAM,gBAAgB,MAAM,KAAK,MAAM,QAAQ,GAAG;AAClD,UAAI,CAAC,eAAe;AAClB,cAAM,uBAAuB,iBAAiB;AAAA,MAChD;AAEA,YAAM,eAAe,MAAM,UAAU,cAAc,SAAS;AAC5D,YAAM,qBAAqB,sBAAsB,YAAY;AAE7D,YAAM,yBAAyB,UAAU,KAAK,UAAU;AAAA,QACtD;AAAA,MACF,CAAC,CAAC;AAEF,YAAM,YAAY,WAAW,mBAAmB,iCAC3C,YAAY,SAD+B;AAAA,QAE9C,KAAK,aAAa;AAAA,QAClB,KAAK;AAAA,MACP,EAAC;AACD,YAAM,mBAAmB,UAAU,SAAS;AAE5C,cAAQ,MAAM;AAAA,QACZ,KAAK,KAAK,MAAM,kBAAkB;AAAA,MACpC;AACA,YAAM,iBAAiB,UAAU,KAAK,UAAU,OAAO,CAAC;AAExD,YAAM,cAAc,GAAG,gBAAgB,IAAI,cAAc;AAEzD,YAAM,UAAU,IAAI,YAAY;AAChC,YAAM,cAAc,QAAQ,OAAO,WAAW;AAC9C,YAAM,kBAAkB,MAAM,KAAK,cAAc,YAAY,WAAW;AACxE,YAAM,mBAAmB,aAAa,IAAI,WAAW,eAAe,CAAC;AACrE,YAAM,YAAY,GAAG,WAAW,IAAI,gBAAgB;AACpD,UAAI,oBAAoB;AACtB,2BAAmB,IAAI;AAAA,UACrB,SAAS;AAAA,QACX,CAAC;AAAA,MACH;AACA,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKM,WAAW,WAAW;AAAA;AAC1B,aAAO,WAAW,SAAS;AAAA,IAC7B;AAAA;AACF;AACA,UAAU,iBAAiB,CAAC,QAAQ,QAAQ;AAC5C,UAAU,cAAc;AACxB,SAAS,sBAAsB,KAAK;AAClC,SAAO,KAAK,UAAU,KAAK,OAAO,KAAK,GAAG,EAAE,KAAK,CAAC;AACpD;;;AClLA,IAAM,yBAAyB,KAAK,KAAK,KAAK;;;ACH9C,IAAM,YAAY;AAAA,EAChB,kBAAkB;AAAA,EAClB,gBAAgB;AAAA,EAChB,eAAe;AAAA,EACf,iBAAiB;AAAA,EACjB,wBAAwB;AAAA,EACxB,aAAa;AAAA,EACb,eAAe;AAAA,EACf,eAAe;AAAA,EACf,qBAAqB;AAAA,EACrB,uBAAuB;AAAA,EACvB,uBAAuB;AAAA,EACvB,6BAA6B;AAAA,EAC7B,kBAAkB;AAAA,EAClB,oBAAoB;AAAA,EACpB,oBAAoB;AAAA,EACpB,6BAA6B;AAAA,EAC7B,+BAA+B;AAAA,EAC/B,+BAA+B;AAAA,EAC/B,uBAAuB;AAAA,EACvB,qBAAqB;AAAA,EACrB,cAAc;AAAA,EACd,cAAc;AAAA,EACd,gBAAgB;AAAA,EAChB,gBAAgB;AAAA,EAChB,YAAY;AAAA,EACZ,sBAAsB;AACxB;;;AC1BA,IAAM,aAAa;;;ACMnB,IAAM,0BAA0B;AAAA,EAC9B,CAAC,UAAU,GAAG;AAChB;;;ACPA,IAAM,0BAAN,MAAM,iCAAgC,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKzD,QAAQ;AACN,WAAO,yBAAwB;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,gBAAgB;AACd,WAAO,yBAAwB;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMM,aAAa;AAAA;AAKjB,aAAO;AAAA,IACT;AAAA;AACF;AAKA,wBAAwB,cAAc;AAItC,wBAAwB,KAAK;;;ACpC7B,IAAM,oBAAN,MAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMtB,OAAO,8BAA8B,SAAS,eAAe;AAC3D,YAAQ,QAAQ,WAAW;AAAA,MACzB,KAAK,UAAU;AACb,eAAO,kBAAkB;AAAA,MAC3B,KAAK,UAAU;AACb,eAAO,kBAAkB;AAAA,MAC3B,KAAK,UAAU;AACb,YAAI,QAAQ,oBAAoB,gBAAgB,YAAY,QAAQ,oBAAoB,gBAAgB,OAAO;AAC7G,iBAAO,kBAAkB;AAAA,QAC3B;AACA;AAAA,MACF,KAAK,UAAU;AACb,eAAO,kBAAkB;AAAA,MAC3B,KAAK,UAAU;AACb,eAAO,kBAAkB;AAAA,MAC3B,KAAK,UAAU;AAAA,MACf,KAAK,UAAU;AACb,YAAI,iBAAiB,kBAAkB,kBAAkB,WAAW;AAElE;AAAA,QACF;AACA,eAAO,kBAAkB;AAAA,MAC3B,KAAK,UAAU;AACb,YAAI,iBAAiB,kBAAkB,kBAAkB,QAAQ;AAE/D;AAAA,QACF;AACA,eAAO,kBAAkB;AAAA,MAC3B,KAAK,UAAU;AACb,YAAI,iBAAiB,kBAAkB,kBAAkB,gBAAgB;AAEvE;AAAA,QACF;AACA,eAAO,kBAAkB;AAAA,MAC3B,KAAK,UAAU;AAAA,MACf,KAAK,UAAU;AAAA,MACf,KAAK,UAAU;AAAA,MACf,KAAK,UAAU;AAAA,MACf,KAAK,UAAU;AACb,YAAI,QAAQ,oBAAoB,gBAAgB,YAAY,QAAQ,oBAAoB,gBAAgB,OAAO;AAC7G,cAAI,iBAAiB,kBAAkB,kBAAkB,SAAS,kBAAkB,kBAAkB,cAAc;AAElH;AAAA,UACF;AACA,iBAAO,kBAAkB;AAAA,QAC3B;AACA;AAAA,IACJ;AACA,WAAO;AAAA,EACT;AACF;;;AC/DA,kBAAyE;AAGzE,uBAAoE;;;ACsH7D,SAAS,UAAU,SAAS,YAAY,GAAG,WAAW;AAC3D,WAAS,MAAM,OAAO;AACpB,WAAO,iBAAiB,IAAI,QAAQ,IAAI,EAAE,SAAU,SAAS;AAC3D,cAAQ,KAAK;AAAA,IACf,CAAC;AAAA,EACH;AACA,SAAO,KAAK,MAAM,IAAI,UAAU,SAAU,SAAS,QAAQ;AACzD,aAAS,UAAU,OAAO;AACxB,UAAI;AACF,aAAK,UAAU,KAAK,KAAK,CAAC;AAAA,MAC5B,SAAS,GAAG;AACV,eAAO,CAAC;AAAA,MACV;AAAA,IACF;AACA,aAAS,SAAS,OAAO;AACvB,UAAI;AACF,aAAK,UAAU,OAAO,EAAE,KAAK,CAAC;AAAA,MAChC,SAAS,GAAG;AACV,eAAO,CAAC;AAAA,MACV;AAAA,IACF;AACA,aAAS,KAAK,QAAQ;AACpB,aAAO,OAAO,QAAQ,OAAO,KAAK,IAAI,MAAM,OAAO,KAAK,EAAE,KAAK,WAAW,QAAQ;AAAA,IACpF;AACA,UAAM,YAAY,UAAU,MAAM,SAAS,cAAc,CAAC,CAAC,GAAG,KAAK,CAAC;AAAA,EACtE,CAAC;AACH;;;AD3IA,IAAMC,QAAO;AACb,IAAMC,WAAU;AAMhB,IAAM,gBAAgB,IAAI,eAAe,eAAe;AACxD,IAAM,oBAAoB,IAAI,eAAe,mBAAmB;AAChE,IAAM,0BAA0B,IAAI,eAAe,yBAAyB;AAC5E,IAAM,wBAAwB,IAAI,eAAe,uBAAuB;AAMxE,IAAM,cAAN,MAAkB;AAAA,EAChB,YAAY,UAAU,UAAU;AAC9B,SAAK,WAAW;AAChB,SAAK,WAAW;AAChB,UAAM,OAAO,KAAK,SAAS,KAAK,IAAI,EAAE,MAAM,GAAG,EAAE,IAAI;AACrD,QAAI,MAAM;AACR,WAAK,eAAe,IAAI,IAAI;AAAA,IAC9B;AACA,SAAK,SAAS,yBAAyB,WAAW,SAASA,QAAO;AAAA,EACpE;AAAA,EACA,aAAa;AACX,eAAO,kBAAK,KAAK,SAAS,WAAW,CAAC;AAAA,EACxC;AAAA,EACA,kBAAkB,SAAS;AACzB,eAAO,kBAAK,KAAK,SAAS,kBAAkB,OAAO,CAAC;AAAA,EACtD;AAAA,EACA,qBAAqB,SAAS;AAC5B,eAAO,kBAAK,KAAK,SAAS,qBAAqB,OAAO,CAAC;AAAA,EACzD;AAAA,EACA,mBAAmB,eAAe;AAChC,eAAO,kBAAK,KAAK,SAAS,mBAAmB,aAAa,CAAC;AAAA,EAC7D;AAAA,EACA,yBAAyB,MAAM;AAC7B,eAAO,kBAAK,KAAK,SAAS,WAAW,EAAE,KAAK,MAAM,KAAK,SAAS,sBAAsB,QAAQ,KAAK,YAAY,CAAC,CAAC;AAAA,EACnH;AAAA,EACA,WAAW,SAAS;AAClB,eAAO,kBAAK,KAAK,SAAS,WAAW,OAAO,CAAC;AAAA,EAC/C;AAAA,EACA,cAAc,SAAS;AACrB,eAAO,kBAAK,KAAK,SAAS,cAAc,OAAO,CAAC;AAAA,EAClD;AAAA,EACA,OAAO,eAAe;AACpB,eAAO,kBAAK,KAAK,SAAS,OAAO,aAAa,CAAC;AAAA,EACjD;AAAA,EACA,eAAe,eAAe;AAC5B,eAAO,kBAAK,KAAK,SAAS,eAAe,aAAa,CAAC;AAAA,EACzD;AAAA,EACA,YAAY,eAAe;AACzB,eAAO,kBAAK,KAAK,SAAS,YAAY,aAAa,CAAC;AAAA,EACtD;AAAA,EACA,UAAU,SAAS;AACjB,eAAO,kBAAK,KAAK,SAAS,UAAU,OAAO,CAAC;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY;AACV,QAAI,CAAC,KAAK,QAAQ;AAChB,WAAK,SAAS,KAAK,SAAS,UAAU,EAAE,MAAMD,OAAMC,QAAO;AAAA,IAC7D;AACA,WAAO,KAAK;AAAA,EACd;AAAA;AAAA,EAEA,UAAU,QAAQ;AAChB,SAAK,SAAS,OAAO,MAAMD,OAAMC,QAAO;AACxC,SAAK,SAAS,UAAU,MAAM;AAAA,EAChC;AACF;AACA,YAAY,OAAO,SAAS,oBAAoB,mBAAmB;AACjE,SAAO,KAAK,qBAAqB,aAAgB,SAAS,aAAa,GAAM,SAAY,QAAQ,CAAC;AACpG;AACA,YAAY,QAA0B,mBAAmB;AAAA,EACvD,OAAO;AAAA,EACP,SAAS,YAAY;AACvB,CAAC;AAAA,CACA,MAAM;AACL,GAAC,OAAO,cAAc,eAAe,cAAiB,iBAAkB,aAAa,CAAC;AAAA,IACpF,MAAM;AAAA,EACR,CAAC,GAAG,WAAY;AACd,WAAO,CAAC;AAAA,MACN,MAAM;AAAA,MACN,YAAY,CAAC;AAAA,QACX,MAAM;AAAA,QACN,MAAM,CAAC,aAAa;AAAA,MACtB,CAAC;AAAA,IACH,GAAG;AAAA,MACD,MAAS;AAAA,IACX,CAAC;AAAA,EACH,GAAG,IAAI;AACT,GAAG;AAMH,IAAM,uBAAN,MAA2B;AAAA,EACzB,YAAY,cAAc,aAAa,qBAAqB;AAC1D,SAAK,eAAe;AACpB,SAAK,cAAc;AACnB,SAAK,sBAAsB;AAE3B,QAAI,KAAK,uBAAuB,KAAK,oBAAoB,iBAAiB,GAAG;AAC3E,WAAK,YAAY,UAAU,EAAE,QAAQ,gFAAgF,KAAK,oBAAoB,cAAc,SAAS;AACrK,WAAK,eAAe,IAAI,0BAAc,KAAK,oBAAoB,cAAc;AAAA,IAC/E,OAAO;AAEL,WAAK,eAAe,IAAI,oBAAQ;AAAA,IAClC;AACA,SAAK,eAAe,KAAK,aAAa,aAAa;AAEnD,SAAK,cAAc,IAAI,4BAAgB,kBAAkB,OAAO;AAChE,SAAK,cAAc,KAAK,YAAY,aAAa;AACjD,SAAK,aAAa,iBAAiB,aAAW;AAC5C,WAAK,aAAa,KAAK,OAAO;AAC9B,YAAM,SAAS,kBAAkB,8BAA8B,SAAS,KAAK,YAAY,KAAK;AAC9F,UAAI,WAAW,MAAM;AACnB,aAAK,YAAY,UAAU,EAAE,QAAQ,sBAAsB,QAAQ,SAAS,uCAAuC,KAAK,YAAY,KAAK,OAAO,MAAM,EAAE;AACxJ,aAAK,YAAY,KAAK,MAAM;AAAA,MAC9B;AAAA,IACF,CAAC;AAAA,EACH;AACF;AACA,qBAAqB,OAAO,SAAS,6BAA6B,mBAAmB;AACnF,SAAO,KAAK,qBAAqB,sBAAyB,SAAS,aAAa,GAAM,SAAS,WAAW,GAAM,SAAS,uBAAuB,CAAC,CAAC;AACpJ;AACA,qBAAqB,QAA0B,mBAAmB;AAAA,EAChE,OAAO;AAAA,EACP,SAAS,qBAAqB;AAChC,CAAC;AAAA,CACA,MAAM;AACL,GAAC,OAAO,cAAc,eAAe,cAAiB,iBAAkB,sBAAsB,CAAC;AAAA,IAC7F,MAAM;AAAA,EACR,CAAC,GAAG,WAAY;AACd,WAAO,CAAC;AAAA,MACN,MAAM;AAAA,MACN,YAAY,CAAC;AAAA,QACX,MAAM;AAAA,QACN,MAAM,CAAC,aAAa;AAAA,MACtB,CAAC;AAAA,IACH,GAAG;AAAA,MACD,MAAM;AAAA,IACR,GAAG;AAAA,MACD,MAAM;AAAA,MACN,YAAY,CAAC;AAAA,QACX,MAAM;AAAA,MACR,GAAG;AAAA,QACD,MAAM;AAAA,QACN,MAAM,CAAC,qBAAqB;AAAA,MAC9B,CAAC;AAAA,IACH,CAAC;AAAA,EACH,GAAG,IAAI;AACT,GAAG;AAMH,IAAM,YAAN,MAAgB;AAAA,EACd,YAAY,iBAAiB,sBAAsB,aAAa,UAAU,QAAQ;AAChF,SAAK,kBAAkB;AACvB,SAAK,uBAAuB;AAC5B,SAAK,cAAc;AACnB,SAAK,WAAW;AAChB,SAAK,SAAS;AAEd,SAAK,qBAAqB,YAAY,UAAU;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS,KAAK;AACZ,WAAO,KAAK,OAAO,SAAS,GAAG;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,kBAAkB,MAAM;AACtB,SAAK,YAAY,UAAU,EAAE,QAAQ,iCAAiC;AAEtE,UAAM,eAAe,SAAS,qBAAqB,MAAM;AACzD,UAAM,UAAU,KAAK,SAAS,UAAU,aAAa,SAAS,aAAa,CAAC,EAAE,OAAO,OAAO,SAAS,MAAM;AAE3G,UAAM,UAAU,KAAK,SAAS,mBAAmB,IAAI;AAErD,QAAI,QAAQ,WAAW,GAAG,GAAG;AAC3B,WAAK,YAAY,UAAU,EAAE,QAAQ,qCAAqC;AAC1E,aAAO,GAAG,OAAO,IAAI,OAAO;AAAA,IAC9B;AAKA,WAAO,GAAG,OAAO,GAAG,IAAI;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,mBAAmB,OAAO;AACxB,UAAM,cAAc,OAAO,KAAK,gBAAgB,gBAAgB,aAAa,KAAK,gBAAgB,YAAY,KAAK,aAAa,KAAK,IAAI,OAAO,OAAO,CAAC,GAAG,KAAK,gBAAgB,WAAW;AAC3L,QAAI,KAAK,gBAAgB,oBAAoB,gBAAgB,OAAO;AAClE,WAAK,YAAY,UAAU,EAAE,QAAQ,6BAA6B;AAClE,aAAO,KAAK,YAAY,WAAW,WAAW,EAAE,SAAK,sBAAI,cAAY;AACnE,aAAK,YAAY,UAAU,EAAE,QAAQ,yEAAyE;AAC9G,aAAK,YAAY,SAAS,iBAAiB,SAAS,OAAO;AAC3D,eAAO;AAAA,MACT,CAAC,CAAC;AAAA,IACJ;AACA,SAAK,YAAY,UAAU,EAAE,QAAQ,gCAAgC;AACrE,UAAM,oBAAoB,KAAK,kBAAkB,MAAM,GAAG;AAC1D,WAAO,KAAK,YAAY,cAAc,OAAO,OAAO;AAAA,MAClD;AAAA,IACF,GAAG,WAAW,CAAC,EAAE,SAAK,sBAAI,MAAM,KAAK,CAAC;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,eAAe,OAAO;AACpB,QAAI,KAAK,gBAAgB,oBAAoB,gBAAgB,SAAS,KAAK,gBAAgB,oBAAoB,gBAAgB,UAAU;AACvI,YAAM,IAAI,8BAA8B,4BAA4B,mJAAmJ;AAAA,IACzN;AACA,SAAK,YAAY,UAAU,EAAE,QAAQ,sBAAsB;AAK3D,QAAI,OAAO,WAAW,aAAa;AACjC,UAAI,UAAU,4BAA4B,OAAO,SAAS,IAAI,KAAK,qBAAa,WAAW,KAAK,CAAC,KAAK,YAAY,SAAS,iBAAiB,EAAE,OAAO,uBAAuB;AAC1K,aAAK,YAAY,UAAU,EAAE,QAAQ,mIAAmI;AACxK,mBAAO,gBAAG,KAAK;AAAA,MACjB;AAAA,IACF,OAAO;AACL,WAAK,YAAY,UAAU,EAAE,KAAK,kFAAkF;AACpH,iBAAO,gBAAG,IAAI;AAAA,IAChB;AAIA,QAAI,KAAK,gBAAgB,kBAAkB;AACzC,WAAK,mBAAmB,KAAK,SAAS,KAAK,gBAAgB,gBAAgB;AAAA,IAC7E;AAEA,UAAM,cAAc,KAAK,SAAS,KAAK,IAAI;AAC3C,WAAO,KAAK,YAAY,WAAW,EAAE,SAAK,4BAAU,MAAM;AACxD,aAAO,KAAK,YAAY,yBAAyB;AAAA,IACnD,CAAC,OAAG,4BAAU,MAAM;AAClB,UAAI,CAAC,KAAK,YAAY,SAAS,eAAe,EAAE,QAAQ;AACtD,YAAI,OAAO;AACT,eAAK,YAAY,UAAU,EAAE,QAAQ,4DAA4D;AACjG,iBAAO,KAAK,mBAAmB,KAAK;AAAA,QACtC;AACA,aAAK,YAAY,UAAU,EAAE,QAAQ,sDAAsD;AAC3F,mBAAO,gBAAG,KAAK;AAAA,MACjB;AACA,WAAK,YAAY,UAAU,EAAE,QAAQ,yDAAyD;AAE9F,UAAI,OAAO;AAWT,cAAM,kBAAkB,KAAK,aAAa,MAAM,GAAG;AACnD,cAAM,uBAAuB,CAAC,CAAC,MAAM,QAAQ,CAAC,CAAC,MAAM,KAAK,YAAY,KAAK,aAAa,IAAI,MAAM,KAAK,QAAQ,EAAE;AACjH,cAAM,cAAc,KAAK,SAAS,mBAAmB,MAAM,GAAG,EAAE,QAAQ,GAAG,MAAM;AAEjF,YAAI,oBAAoB,wBAAwB,cAAc;AAC5D,eAAK,YAAY,UAAU,EAAE,KAAK,iEAAiE;AAEnG,cAAI,YAAY,QAAQ,GAAG,IAAI,IAAI;AACjC,uBAAO,gBAAG,KAAK,SAAS,KAAK,SAAS,KAAK,CAAC,CAAC;AAAA,UAC/C;AAEA,qBAAO,gBAAG,KAAK,SAAS,EAAE,CAAC;AAAA,QAC7B;AAAA,MACF;AACA,iBAAO,gBAAG,IAAI;AAAA,IAChB,CAAC,OAAG,6BAAW,WAAS;AACtB,WAAK,YAAY,UAAU,EAAE,MAAM,oDAAoD;AACvF,WAAK,YAAY,UAAU,EAAE,SAAS,kBAAkB,MAAM,OAAO,EAAE;AAIvE,UAAI,KAAK,oBAAoB,OAAO;AAClC,aAAK,YAAY,UAAU,EAAE,QAAQ,2CAA2C;AAChF,mBAAO,gBAAG,KAAK,gBAAgB;AAAA,MACjC;AACA,iBAAO,gBAAG,KAAK;AAAA,IACjB,CAAC,CAAC;AAAA,EACJ;AAAA,EACA,aAAa,MAAM;AACjB,WAAO,KAAK,YAAY,OAAO,IAAI,MAAM,KAAK,YAAY,OAAO,MAAM,KAAK,SAAS,QAAQ;AAAA,IAE7F,KAAK,QAAQ,QAAQ,IAAI,MAAM,KAAK,QAAQ,QAAQ,IAAI;AAAA,EAC1D;AAAA,EACA,YAAY,OAAO,OAAO;AACxB,SAAK,YAAY,UAAU,EAAE,QAAQ,qBAAqB;AAC1D,WAAO,KAAK,eAAe,KAAK;AAAA,EAClC;AAAA,EACA,iBAAiB,OAAO,OAAO;AAC7B,SAAK,YAAY,UAAU,EAAE,QAAQ,0BAA0B;AAC/D,WAAO,KAAK,eAAe,KAAK;AAAA,EAClC;AAAA,EACA,WAAW;AACT,SAAK,YAAY,UAAU,EAAE,QAAQ,iBAAiB;AACtD,WAAO,KAAK,eAAe;AAAA,EAC7B;AACF;AACA,UAAU,OAAO,SAAS,kBAAkB,mBAAmB;AAC7D,SAAO,KAAK,qBAAqB,WAAc,SAAS,iBAAiB,GAAM,SAAS,oBAAoB,GAAM,SAAS,WAAW,GAAM,SAAY,QAAQ,GAAM,SAAY,MAAM,CAAC;AAC3L;AACA,UAAU,QAA0B,mBAAmB;AAAA,EACrD,OAAO;AAAA,EACP,SAAS,UAAU;AACrB,CAAC;AAAA,CACA,MAAM;AACL,GAAC,OAAO,cAAc,eAAe,cAAiB,iBAAkB,WAAW,CAAC;AAAA,IAClF,MAAM;AAAA,EACR,CAAC,GAAG,WAAY;AACd,WAAO,CAAC;AAAA,MACN,MAAM;AAAA,MACN,YAAY,CAAC;AAAA,QACX,MAAM;AAAA,QACN,MAAM,CAAC,iBAAiB;AAAA,MAC1B,CAAC;AAAA,IACH,GAAG;AAAA,MACD,MAAM;AAAA,IACR,GAAG;AAAA,MACD,MAAM;AAAA,IACR,GAAG;AAAA,MACD,MAAS;AAAA,IACX,GAAG;AAAA,MACD,MAAS;AAAA,IACX,CAAC;AAAA,EACH,GAAG,IAAI;AACT,GAAG;AAMH,IAAM,kBAAN,MAAsB;AAAA,EACpB,YAAY,uBAAuB,aAAa,UAAU,sBAE1DC,WAAU;AACR,SAAK,wBAAwB;AAC7B,SAAK,cAAc;AACnB,SAAK,WAAW;AAChB,SAAK,uBAAuB;AAC5B,SAAK,YAAYA;AAAA,EACnB;AAAA,EACA,UAAU,KAEV,MAEE;AACA,QAAI,KAAK,sBAAsB,oBAAoB,gBAAgB,SAAS,KAAK,sBAAsB,oBAAoB,gBAAgB,UAAU;AACnJ,YAAM,IAAI,8BAA8B,4BAA4B,6JAA6J;AAAA,IACnO;AACA,SAAK,YAAY,UAAU,EAAE,QAAQ,4BAA4B;AACjE,UAAM,SAAS,KAAK,qBAAqB,IAAI,KAAK,IAAI,MAAM;AAE5D,QAAI,CAAC,UAAU,OAAO,WAAW,GAAG;AAClC,WAAK,YAAY,UAAU,EAAE,QAAQ,sCAAsC;AAC3E,aAAO,KAAK,OAAO,GAAG;AAAA,IACxB;AAEA,QAAI;AACJ,QAAI,CAAC,CAAC,KAAK,YAAY,SAAS,iBAAiB,GAAG;AAClD,WAAK,YAAY,UAAU,EAAE,QAAQ,uCAAuC;AAC5E,gBAAU,KAAK,YAAY,SAAS,iBAAiB;AAAA,IACvD,OAAO;AACL,WAAK,YAAY,UAAU,EAAE,QAAQ,4DAA4D;AACjG,gBAAU,KAAK,YAAY,SAAS,eAAe,EAAE,CAAC;AAAA,IACxD;AACA,UAAM,cAAc,OAAO,KAAK,sBAAsB,gBAAgB,aAAa,KAAK,sBAAsB,YAAY,KAAK,aAAa,KAAK;AAAA,MAC/I;AAAA,IACF,CAAC,IAAI,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,KAAK,sBAAsB,WAAW,GAAG;AAAA,MAC5E;AAAA,IACF,CAAC;AACD,SAAK,YAAY,UAAU,EAAE,KAAK,iBAAiB,OAAO,MAAM,4BAA4B;AAC5F,SAAK,YAAY,UAAU,EAAE,QAAQ,kBAAkB,MAAM,sBAAsB,IAAI,GAAG,EAAE;AAC5F,WAAO,KAAK,aAAa,aAAa,QAAQ,OAAO,EAAE,SAAK,4BAAU,YAAU;AAC9E,WAAK,YAAY,UAAU,EAAE,QAAQ,6CAA6C;AAClF,YAAM,UAAU,IAAI,QAAQ,IAAI,iBAAiB,UAAU,OAAO,WAAW,EAAE;AAC/E,YAAM,eAAe,IAAI,MAAM;AAAA,QAC7B;AAAA,MACF,CAAC;AACD,aAAO,KAAK,OAAO,YAAY;AAAA,IACjC,CAAC,CAAC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,aAAa,QAAQ,SAAS;AAEzC,WAAO,KAAK,YAAY,mBAAmB,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,WAAW,GAAG;AAAA,MACvF;AAAA,MACA;AAAA,IACF,CAAC,CAAC,EAAE,SAAK,6BAAW,MAAM;AACxB,WAAK,YAAY,UAAU,EAAE,MAAM,wFAAwF;AAC3H,aAAO,KAAK,qBAAqB,YAAY,SAAK,uBAAK,CAAC,OAAG,4BAAU,YAAU;AAC7E,YAAI,WAAW,kBAAkB,MAAM;AACrC,iBAAO,KAAK,0BAA0B,aAAa,MAAM;AAAA,QAC3D;AACA,eAAO,KAAK,qBAAqB,YAAY,SAAK,yBAAO,CAAAC,YAAUA,YAAW,kBAAkB,IAAI,OAAG,uBAAK,CAAC,OAAG,4BAAU,MAAM,KAAK,aAAa,aAAa,QAAQ,OAAO,CAAC,CAAC;AAAA,MAClL,CAAC,CAAC;AAAA,IACJ,CAAC,OAAG,4BAAU,YAAU;AACtB,UAAI,CAAC,OAAO,aAAa;AACvB,aAAK,YAAY,UAAU,EAAE,MAAM,kIAAkI;AACrK,eAAO,KAAK,qBAAqB,YAAY,SAAK,yBAAO,YAAU,WAAW,kBAAkB,IAAI,OAAG,uBAAK,CAAC,OAAG,4BAAU,MAAM,KAAK,0BAA0B,aAAa,MAAM,CAAC,CAAC;AAAA,MACtL;AACA,iBAAO,gBAAG,MAAM;AAAA,IAClB,CAAC,CAAC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,0BAA0B,aAAa,QAAQ;AAC7C,QAAI,KAAK,sBAAsB,oBAAoB,gBAAgB,OAAO;AACxE,WAAK,YAAY,UAAU,EAAE,QAAQ,kEAAkE;AACvG,aAAO,KAAK,YAAY,kBAAkB,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,WAAW,GAAG;AAAA,QACtF;AAAA,MACF,CAAC,CAAC;AAAA,IACJ;AACA,SAAK,YAAY,UAAU,EAAE,QAAQ,qEAAqE;AAC1G,UAAM,oBAAoB,OAAO,SAAS;AAC1C,SAAK,YAAY,qBAAqB,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,WAAW,GAAG;AAAA,MAClF;AAAA,MACA;AAAA,IACF,CAAC,CAAC;AACF,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,qBAAqB,UAAU,YAAY;AACzC,SAAK,YAAY,UAAU,EAAE,QAAQ,2CAA2C;AAEhF,UAAM,qBAAqB,KAAK,SAAS,UAAU,QAAQ;AAC3D,UAAM,0BAA0B,MAAM,KAAK,KAAK,sBAAsB,qBAAqB,KAAK,CAAC;AACjG,UAAM,6BAA6B,KAAK,yBAAyB,yBAAyB,kBAAkB;AAC5G,QAAI,2BAA2B,SAAS,GAAG;AACzC,aAAO,KAAK,sBAAsB,KAAK,sBAAsB,sBAAsB,4BAA4B,UAAU;AAAA,IAC3H;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,yBAAyB,6BAA6B,UAAU;AAC9D,UAAM,oBAAoB,CAAC;AAC3B,gCAA4B,QAAQ,SAAO;AACzC,YAAM,gBAAgB,KAAK,SAAS,UAAU,GAAG;AAEjD,YAAM,cAAc,KAAK,eAAe,aAAa;AACrD,YAAM,gBAAgB,IAAI,IAAI,WAAW;AACzC,YAAM,mBAAmB,KAAK,eAAe,QAAQ;AACrD,YAAM,qBAAqB,IAAI,IAAI,gBAAgB;AACnD,UAAI,KAAK,mBAAmB,eAAe,kBAAkB,GAAG;AAC9D,0BAAkB,KAAK,GAAG;AAAA,MAC5B;AAAA,IACF,CAAC;AACD,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,mBAAmB,eAAe,oBAAoB;AAEpD,UAAM,gBAAgB,CAAC,YAAY,QAAQ,YAAY,UAAU,MAAM;AACvE,eAAW,YAAY,eAAe;AACpC,UAAI,cAAc,QAAQ,GAAG;AAC3B,cAAM,eAAe,mBAAmB,cAAc,QAAQ,CAAC;AAC/D,YAAI,CAAC,YAAY,aAAa,cAAc,mBAAmB,QAAQ,CAAC,GAAG;AACzE,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,eAAe,KAAK;AAClB,UAAM,OAAO,KAAK,UAAU,cAAc,GAAG;AAC7C,SAAK,OAAO;AACZ,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,sBAAsB,sBAAsB,eAAe,YAAY;AACrE,UAAM,mBAAmB,CAAC;AAE1B,kBAAc,QAAQ,qBAAmB;AACvC,YAAM,oBAAoB,CAAC;AAC3B,YAAM,uBAAuB,qBAAqB,IAAI,eAAe;AAErE,UAAI,yBAAyB,MAAM;AACjC,yBAAiB,KAAK,IAAI;AAC1B;AAAA,MACF;AACA,2BAAqB,QAAQ,WAAS;AAEpC,YAAI,OAAO,UAAU,UAAU;AAC7B,4BAAkB,KAAK,KAAK;AAAA,QAC9B,OAAO;AAEL,gBAAM,0BAA0B,WAAW,YAAY;AACvD,gBAAM,2BAA2B,MAAM,WAAW,YAAY;AAE9D,cAAI,6BAA6B,yBAAyB;AAExD,gBAAI,MAAM,WAAW,MAAM;AACzB,+BAAiB,KAAK,IAAI;AAAA,YAC5B,OAAO;AACL,oBAAM,OAAO,QAAQ,WAAS;AAC5B,kCAAkB,KAAK,KAAK;AAAA,cAC9B,CAAC;AAAA,YACH;AAAA,UACF;AAAA,QACF;AAAA,MACF,CAAC;AAED,UAAI,kBAAkB,SAAS,GAAG;AAChC,yBAAiB,KAAK,iBAAiB;AAAA,MACzC;AAAA,IACF,CAAC;AACD,QAAI,iBAAiB,SAAS,GAAG;AAC/B,UAAI,iBAAiB,SAAS,GAAG;AAC/B,aAAK,YAAY,UAAU,EAAE,QAAQ,+DAA+D;AAAA,MACtG;AAEA,aAAO,iBAAiB,CAAC;AAAA,IAC3B;AACA,WAAO;AAAA,EACT;AACF;AACA,gBAAgB,OAAO,SAAS,wBAAwB,mBAAmB;AACzE,SAAO,KAAK,qBAAqB,iBAAoB,SAAS,uBAAuB,GAAM,SAAS,WAAW,GAAM,SAAY,QAAQ,GAAM,SAAS,oBAAoB,GAAM,SAAS,QAAQ,CAAC;AACtM;AACA,gBAAgB,QAA0B,mBAAmB;AAAA,EAC3D,OAAO;AAAA,EACP,SAAS,gBAAgB;AAC3B,CAAC;AAAA,CACA,MAAM;AACL,GAAC,OAAO,cAAc,eAAe,cAAiB,iBAAkB,iBAAiB,CAAC;AAAA,IACxF,MAAM;AAAA,EACR,CAAC,GAAG,WAAY;AACd,WAAO,CAAC;AAAA,MACN,MAAM;AAAA,MACN,YAAY,CAAC;AAAA,QACX,MAAM;AAAA,QACN,MAAM,CAAC,uBAAuB;AAAA,MAChC,CAAC;AAAA,IACH,GAAG;AAAA,MACD,MAAM;AAAA,IACR,GAAG;AAAA,MACD,MAAS;AAAA,IACX,GAAG;AAAA,MACD,MAAM;AAAA,IACR,GAAG;AAAA,MACD,MAAM;AAAA,MACN,YAAY,CAAC;AAAA,QACX,MAAM;AAAA,QACN,MAAM,CAAC,QAAQ;AAAA,MACjB,CAAC;AAAA,IACH,CAAC;AAAA,EACH,GAAG,IAAI;AACT,GAAG;AAWH,IAAM,wBAAN,MAA4B;AAAA,EAC1B,YAAY,aAAa;AACvB,SAAK,cAAc;AAAA,EACrB;AAAA,EACA,WAAW;AACT,SAAK,YAAY,UAAU,EAAE,QAAQ,iCAAiC;AACtE,SAAK,YAAY,yBAAyB,EAAE,UAAU;AAAA,EACxD;AACF;AACA,sBAAsB,OAAO,SAAS,8BAA8B,mBAAmB;AACrF,SAAO,KAAK,qBAAqB,uBAA0B,kBAAkB,WAAW,CAAC;AAC3F;AACA,sBAAsB,OAAyB,kBAAkB;AAAA,EAC/D,MAAM;AAAA,EACN,WAAW,CAAC,CAAC,cAAc,CAAC;AAAA,EAC5B,YAAY;AAAA,EACZ,OAAO;AAAA,EACP,MAAM;AAAA,EACN,UAAU,SAAS,+BAA+B,IAAI,KAAK;AAAA,EAAC;AAAA,EAC5D,eAAe;AACjB,CAAC;AAAA,CACA,MAAM;AACL,GAAC,OAAO,cAAc,eAAe,cAAiB,iBAAkB,uBAAuB,CAAC;AAAA,IAC9F,MAAM;AAAA,IACN,MAAM,CAAC;AAAA,MACL,UAAU;AAAA,MACV,UAAU;AAAA,IACZ,CAAC;AAAA,EACH,CAAC,GAAG,WAAY;AACd,WAAO,CAAC;AAAA,MACN,MAAM;AAAA,IACR,CAAC;AAAA,EACH,GAAG,IAAI;AACT,GAAG;AAMH,IAAM,aAAN,MAAM,YAAW;AAAA,EACf,OAAO,QAAQ,cAAc,aAAa,mBAAmB;AAC3D,WAAO;AAAA,MACL,UAAU;AAAA,MACV,WAAW,CAAC;AAAA,QACV,SAAS;AAAA,QACT,UAAU;AAAA,MACZ,GAAG;AAAA,QACD,SAAS;AAAA,QACT,UAAU;AAAA,MACZ,GAAG;AAAA,QACD,SAAS;AAAA,QACT,UAAU;AAAA,MACZ,GAAG,WAAW;AAAA,IAChB;AAAA,EACF;AACF;AACA,WAAW,OAAO,SAAS,mBAAmB,mBAAmB;AAC/D,SAAO,KAAK,qBAAqB,YAAY;AAC/C;AACA,WAAW,OAAyB,iBAAiB;AAAA,EACnD,MAAM;AAAA,EACN,cAAc,CAAC,qBAAqB;AAAA,EACpC,SAAS,CAAC,YAAY;AACxB,CAAC;AACD,WAAW,OAAyB,iBAAiB;AAAA,EACnD,WAAW,CAAC,WAAW,oBAAoB;AAAA,EAC3C,SAAS,CAAC,YAAY;AACxB,CAAC;AAAA,CACA,MAAM;AACL,GAAC,OAAO,cAAc,eAAe,cAAiB,iBAAkB,YAAY,CAAC;AAAA,IACnF,MAAM;AAAA,IACN,MAAM,CAAC;AAAA,MACL,cAAc,CAAC,qBAAqB;AAAA,MACpC,SAAS,CAAC,YAAY;AAAA,MACtB,WAAW,CAAC,WAAW,oBAAoB;AAAA,IAC7C,CAAC;AAAA,EACH,CAAC,GAAG,MAAM,IAAI;AAChB,GAAG;AAOH,IAAM,6BAAN,cAAyC,iBAAiB;AAAA,EACxD,YAAY,aAAa,QAAQ,UAAU;AACzC,UAAM;AACN,SAAK,cAAc;AACnB,SAAK,SAAS;AACd,SAAK,WAAW;AAAA,EAClB;AAAA,EACA,iBAAiB,KAAK,SAAS;AAC7B,UAAM,SAAS,OAAO,OAAO,MAAM;AAAA,MACjC,kBAAkB;AAAA,QAChB,KAAK,MAAM,MAAM;AAAA,MACnB;AAAA,IACF,CAAC;AACD,WAAO,UAAU,MAAM,QAAQ,QAAQ,aAAa;AAClD,WAAK,YAAY,UAAU,EAAE,MAAM,mCAAmC;AACtE,WAAK,YAAY,UAAU,EAAE,QAAQ,yCAAyC;AAC9E,WAAK,YAAY,UAAU,EAAE,WAAW,mDAAmD,GAAG,EAAE;AAEhG,UAAI,QAAQ,WAAW;AACrB,eAAO,OAAO,iBAAiB,KAAK,MAAM,KAAK,OAAO;AAAA,MACxD,OAAO;AAEL,cAAM,gBAAgB,IAAI,UAAU,GAAG,EAAE,iBAAiB;AAC1D,cAAM,SAAS,cAAc,cAAc,GAAG,cAAc,YAAY,IAAI,cAAc,WAAW,KAAK,KAAK,SAAS,UAAU,cAAc,YAAY;AAC5J,cAAM,KAAK,OAAO,cAAc,QAAQ;AAAA,UACtC,YAAY,QAAQ;AAAA,QACtB,CAAC;AAAA,MACH;AACA,aAAO,QAAQ,QAAQ,QAAQ,SAAS;AAAA,IAC1C,CAAC;AAAA,EACH;AACF;AACA,2BAA2B,OAAO,SAAS,mCAAmC,mBAAmB;AAC/F,SAAO,KAAK,qBAAqB,4BAA+B,SAAS,WAAW,GAAM,SAAY,MAAM,GAAM,SAAY,QAAQ,CAAC;AACzI;AACA,2BAA2B,QAA0B,mBAAmB;AAAA,EACtE,OAAO;AAAA,EACP,SAAS,2BAA2B;AACtC,CAAC;AAAA,CACA,MAAM;AACL,GAAC,OAAO,cAAc,eAAe,cAAiB,iBAAkB,4BAA4B,CAAC;AAAA,IACnG,MAAM;AAAA,EACR,CAAC,GAAG,WAAY;AACd,WAAO,CAAC;AAAA,MACN,MAAM;AAAA,IACR,GAAG;AAAA,MACD,MAAS;AAAA,IACX,GAAG;AAAA,MACD,MAAS;AAAA,IACX,CAAC;AAAA,EACH,GAAG,IAAI;AACT,GAAG;",
  "names": ["LogLevel", "e", "version", "noNetworkConnectivity", "postRequestFailed", "noNetworkConnectivity", "postRequestFailed", "InteractionType", "noNetworkConnectivity", "postRequestFailed", "name", "version", "name", "version", "version", "name", "version", "document", "status"]
}
